<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Relativity.Services.ServiceProxy</name>
  </assembly>
  <members>
    <member name="T:Relativity.Services.ServiceProxy.Credentials">
      <summary>
            Determines the authentication type to be used for the connection.
            </summary>
    </member>
    <member name="M:Relativity.Services.ServiceProxy.Credentials.GetAuthenticationHeaderValue">
      <summary>
            Get the correct authentcation header value for this authentication type.
            </summary>
    </member>
    <member name="T:Relativity.Services.ServiceProxy.UsernamePasswordCredentials">
      <summary>
            Specifies that username-password authentication will be used to authenticate the connection.
            </summary>
    </member>
    <member name="M:Relativity.Services.ServiceProxy.UsernamePasswordCredentials.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Relativity.Services.ServiceProxy.UsernamePasswordCredentials" /> class.
            </summary>
      <param name="username">User name to use for authentication</param>
      <param name="password">Password to use for authentication</param>
    </member>
    <member name="M:Relativity.Services.ServiceProxy.UsernamePasswordCredentials.GetAuthenticationHeaderValue">
      <summary>
            Get basic authentication header
            </summary>
    </member>
    <member name="P:Relativity.Services.ServiceProxy.UsernamePasswordCredentials.Username">
      <summary>
            Specifies the username to be used for authentication.
            </summary>
    </member>
    <member name="P:Relativity.Services.ServiceProxy.UsernamePasswordCredentials.Password">
      <summary>
            Specifies the password to be used for authentication.
            </summary>
    </member>
    <member name="T:Relativity.Services.ServiceProxy.IntegratedAuthCredentials">
      <summary>
            Specifies that integrated Windows authentication will be used to authenticate the connection.
            </summary>
    </member>
    <member name="M:Relativity.Services.ServiceProxy.IntegratedAuthCredentials.GetAuthenticationHeaderValue">
      <summary>
            Get integrated authentication header
            </summary>
    </member>
    <member name="T:Relativity.Services.ServiceProxy.TokenCredentials">
      <summary>
            Specifies that token authentication will be used to authenticate the connection.
            </summary>
    </member>
    <member name="M:Relativity.Services.ServiceProxy.TokenCredentials.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Relativity.Services.ServiceProxy.TokenCredentials" /> class.
            </summary>
      <param name="token">The token to be used for authentication</param>
    </member>
    <member name="M:Relativity.Services.ServiceProxy.TokenCredentials.GetAuthenticationHeaderValue">
      <summary>
            Get token authentication header
            </summary>
    </member>
    <member name="P:Relativity.Services.ServiceProxy.TokenCredentials.Token">
      <summary>
            Specifies the token to be used for authentication.
            </summary>
    </member>
    <member name="T:Relativity.Services.ServiceProxy.BearerTokenCredentials">
      <summary>
            Specifies that bearer token authentication will be used to authenticate the connection.
            </summary>
    </member>
    <member name="M:Relativity.Services.ServiceProxy.BearerTokenCredentials.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Relativity.Services.ServiceProxy.BearerTokenCredentials" /> class.
            </summary>
      <param name="token">The access token to be used for authentication</param>
    </member>
    <member name="M:Relativity.Services.ServiceProxy.BearerTokenCredentials.GetAuthenticationHeaderValue">
      <summary>
            Get access token authentication header
            </summary>
    </member>
    <member name="P:Relativity.Services.ServiceProxy.BearerTokenCredentials.Token">
      <summary>
            Specifies the access token to be used for authentication.
            </summary>
    </member>
    <member name="T:Relativity.Services.ServiceProxy.SecretKeyCredentials">
      <summary>
            Specifies that secret key authentication will be used to authenticate the connection.
            </summary>
    </member>
    <member name="M:Relativity.Services.ServiceProxy.SecretKeyCredentials.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Relativity.Services.ServiceProxy.SecretKeyCredentials" /> class.
            </summary>
      <param name="authTag">The tag to be used for authentication</param>
    </member>
    <member name="M:Relativity.Services.ServiceProxy.SecretKeyCredentials.GetAuthenticationHeaderValue">
      <summary>
            Get secret key authentication header
            </summary>
    </member>
    <member name="P:Relativity.Services.ServiceProxy.SecretKeyCredentials.AuthTag">
      <summary>
            Specifies the Authentication Tag to be used for authentication.
            </summary>
    </member>
    <member name="T:Relativity.Services.ServiceProxy.CredentialExtensions">
      <summary>
            Extension methods for Credential objects
            </summary>
    </member>
    <member name="M:Relativity.Services.ServiceProxy.CredentialExtensions.ToRSAPIAuthenticationType(Relativity.Services.ServiceProxy.Credentials)">
      <summary>
            Translates a Relativity.Services.Credentials object to a kCura.Relativity.Client.AuthenticationType object.
            </summary>
      <param name="credentials">The Credentials object.</param>
      <returns>A kCura.Relativity.Client.AuthenticationType.</returns>
    </member>
    <member name="T:Relativity.Services.ServiceProxy.IServiceFactory">
      <summary>
            The ServiceFactory class can be used in standalone console applications to return proxies for any of the service interfaces 
            published by the Relativity Services API, including RSAPIClient and Relativity service manager interfaces. 
            </summary>
    </member>
    <member name="M:Relativity.Services.ServiceProxy.IServiceFactory.CreateProxy``1">
      <summary>
            Returns a proxy to the service specified by interface T.
            </summary>
    </member>
    <member name="T:Relativity.Services.ServiceProxy.ServiceFactorySettings">
      <summary>
            Configuration settings for creating a standalone Service Factory.
            </summary>
    </member>
    <member name="M:Relativity.Services.ServiceProxy.ServiceFactorySettings.#ctor(System.Uri,System.Uri,Relativity.Services.ServiceProxy.Credentials)">
      <summary>
            Instantiate ServiceFactorySettings, specifying the Services API location, REST API location, and authentication type.
            </summary>
      <param name="relativityServicesUri">URI describing the location of the Services API.</param>
      <param name="relativityRestUri">URI describing the location of the REST API.</param>
      <param name="credentials">The type of authentication to use for the connection.</param>
    </member>
    <member name="M:Relativity.Services.ServiceProxy.ServiceFactorySettings.#ctor(System.Uri,System.Uri,Relativity.Services.ServiceProxy.Credentials,System.Net.Http.HttpMessageHandler)">
      <summary>
            Instantiate ServiceFactorySettings, specifying the Services API location, REST API location, and authentication type.
            </summary>
      <param name="relativityServicesUri">URI describing the location of the Services API.</param>
      <param name="relativityRestUri">URI describing the location of the REST API.</param>
      <param name="credentials">The type of authentication to use for the connection.</param>
      <param name="messageHandler">An instance of an HttpMessageHandler object inject into the client proxy.</param>
    </member>
    <member name="P:Relativity.Services.ServiceProxy.ServiceFactorySettings.RelativityServicesUri">
      <summary>
            URI describing the location of the Services API.
            </summary>
    </member>
    <member name="P:Relativity.Services.ServiceProxy.ServiceFactorySettings.RelativityRestUri">
      <summary>
            URI describing the location of the REST API.
            </summary>
    </member>
    <member name="P:Relativity.Services.ServiceProxy.ServiceFactorySettings.Credentials">
      <summary>
            The type of authentication to use for the connection.
            </summary>
    </member>
    <member name="P:Relativity.Services.ServiceProxy.ServiceFactorySettings.HttpMessageHandler">
      <summary>
            An instance of an HttpMessageHandler object inject into the client proxy.
             </summary>
    </member>
    <member name="P:Relativity.Services.ServiceProxy.ServiceFactorySettings.UpnIdentity">
      <summary>
            If populated, this property should match the Identity in the ApplicationPool
            of Relativity.Services.  Setting this value means that a WCF service with
            this identity will be trusted by this client.
            </summary>
      <remarks>
            This property is used only for Integrated Authentication over HTTPS with
            Kerberos authentication protocol.
            </remarks>
    </member>
    <member name="P:Relativity.Services.ServiceProxy.ServiceFactorySettings.ProtocolVersion">
      <summary>
            The preferred API wire protocol version to use.  If not specified, the 
            client will use the most recent version possible.
            </summary>
    </member>
    <member name="T:Relativity.Services.ServiceProxy.ServiceFactory">
      <summary>
            The ServiceFactory class can be used in standalone console applications to return proxies for any of the service interfaces 
            published by the Relativity Services API, including RSAPIClient and Relativity service manager interfaces. 
            </summary>
    </member>
    <member name="M:Relativity.Services.ServiceProxy.ServiceFactory.#ctor(Relativity.Services.ServiceProxy.ServiceFactorySettings)">
      <summary>
            Instantiate a ServiceFactory that can return a proxy to a given service interface. 
            </summary>
      <param name="settings">ServiceFactorySettings for the ServiceFactory</param>
    </member>
    <member name="M:Relativity.Services.ServiceProxy.ServiceFactory.CreateProxy``1">
      <summary>
            Returns a proxy to the service specified by interface T.
            </summary>
    </member>
    <member name="P:Relativity.Services.ServiceProxy.ServiceFactory.ActiveCulture">
      <summary>
            Option to explicitly set localization info
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Bson.BsonObjectId">
      <summary>
            Represents a BSON Oid (object id).
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonObjectId.#ctor(System.Byte[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonObjectId" /> class.
            </summary>
      <param name="value">The Oid value.</param>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonObjectId.Value">
      <summary>
            Gets or sets the value of the Oid.
            </summary>
      <value>The value of the Oid.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonReader">
      <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonReader.State">
      <summary>
            Specifies the state of the reader.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReader" /> class with the specified <see cref="T:System.IO.TextReader" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.Read">
      <summary>
            Reads the next JSON token from the stream.
            </summary>
      <returns>true if the next token was read successfully; false if there are no more tokens to read.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsInt32">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsString">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsBytes">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
            </summary>
      <returns>A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsDecimal">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsDateTime">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsDateTimeOffset">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.Skip">
      <summary>
            Skips the children of the current token.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.SetToken(Newtonsoft.Json.JsonToken)">
      <summary>
            Sets the current token.
            </summary>
      <param name="newToken">The new token.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.SetToken(Newtonsoft.Json.JsonToken,System.Object)">
      <summary>
            Sets the current token and value.
            </summary>
      <param name="newToken">The new token.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.SetStateBasedOnCurrent">
      <summary>
            Sets the state based on current token type.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.Close">
      <summary>
            Changes the <see cref="T:Newtonsoft.Json.JsonReader.State" /> to Closed. 
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.CurrentState">
      <summary>
            Gets the current reader state.
            </summary>
      <value>The current reader state.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.CloseInput">
      <summary>
            Gets or sets a value indicating whether the underlying stream or
            <see cref="T:System.IO.TextReader" /> should be closed when the reader is closed.
            </summary>
      <value>
            true to close the underlying stream or <see cref="T:System.IO.TextReader" /> when
            the reader is closed; otherwise false. The default is true.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.SupportMultipleContent">
      <summary>
            Gets or sets a value indicating whether multiple pieces of JSON content can
            be read from a continuous stream without erroring.
            </summary>
      <value>
            true to support reading multiple pieces of JSON content; otherwise false. The default is false.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.QuoteChar">
      <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.DateTimeZoneHandling">
      <summary>
            Get or set how <see cref="T:System.DateTime" /> time zones are handling when reading JSON.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.DateParseHandling">
      <summary>
            Get or set how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.FloatParseHandling">
      <summary>
            Get or set how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.DateFormatString">
      <summary>
            Get or set how custom date formatted strings are parsed when reading JSON.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.MaxDepth">
      <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Newtonsoft.Json.JsonReaderException" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.TokenType">
      <summary>
            Gets the type of the current JSON token. 
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.Value">
      <summary>
            Gets the text value of the current JSON token.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.ValueType">
      <summary>
            Gets The Common Language Runtime (CLR) type for the current JSON token.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.Depth">
      <summary>
            Gets the depth of the current token in the JSON document.
            </summary>
      <value>The depth of the current token in the JSON document.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.Path">
      <summary>
            Gets the path of the current JSON token. 
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.Culture">
      <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Bson.BsonReader">
      <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </summary>
      <param name="stream">The stream.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </summary>
      <param name="reader">The reader.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.Stream,System.Boolean,System.DateTimeKind)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </summary>
      <param name="stream">The stream.</param>
      <param name="readRootValueAsArray">if set to <c>true</c> the root object will be read as a JSON array.</param>
      <param name="dateTimeKindHandling">The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader,System.Boolean,System.DateTimeKind)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </summary>
      <param name="reader">The reader.</param>
      <param name="readRootValueAsArray">if set to <c>true</c> the root object will be read as a JSON array.</param>
      <param name="dateTimeKindHandling">The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsBytes">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
            </summary>
      <returns>
            A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsDecimal">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsInt32">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsString">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsDateTime">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsDateTimeOffset">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>
            A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.Read">
      <summary>
            Reads the next JSON token from the stream.
            </summary>
      <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.Close">
      <summary>
            Changes the <see cref="T:Newtonsoft.Json.JsonReader.State" /> to Closed.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonReader.JsonNet35BinaryCompatibility">
      <summary>
            Gets or sets a value indicating whether binary data reading should compatible with incorrect Json.NET 3.5 written binary.
            </summary>
      <value>
        <c>true</c> if binary data reading will be compatible with incorrect Json.NET 3.5 written binary; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonReader.ReadRootValueAsArray">
      <summary>
            Gets or sets a value indicating whether the root object will be read as a JSON array.
            </summary>
      <value>
        <c>true</c> if the root object will be read as a JSON array; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonReader.DateTimeKindHandling">
      <summary>
            Gets or sets the <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.
            </summary>
      <value>The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonWriter">
      <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.#ctor">
      <summary>
            Creates an instance of the <c>JsonWriter</c> class. 
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.Flush">
      <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.Close">
      <summary>
            Closes this stream and the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteStartObject">
      <summary>
            Writes the beginning of a Json object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEndObject">
      <summary>
            Writes the end of a Json object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteStartArray">
      <summary>
            Writes the beginning of a Json array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEndArray">
      <summary>
            Writes the end of an array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteStartConstructor(System.String)">
      <summary>
            Writes the start of a constructor with the given name.
            </summary>
      <param name="name">The name of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEndConstructor">
      <summary>
            Writes the end constructor.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WritePropertyName(System.String)">
      <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WritePropertyName(System.String,System.Boolean)">
      <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
      <param name="name">The name of the property.</param>
      <param name="escape">A flag to indicate whether the text should be escaped when it is written as a JSON property name.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEnd">
      <summary>
            Writes the end of the current Json object or array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonReader)">
      <summary>
            Writes the current <see cref="T:Newtonsoft.Json.JsonReader" /> token and its children.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read the token from.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonReader,System.Boolean)">
      <summary>
            Writes the current <see cref="T:Newtonsoft.Json.JsonReader" /> token.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read the token from.</param>
      <param name="writeChildren">A flag indicating whether the current token's children should be written.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
      <summary>
            Writes the specified end token.
            </summary>
      <param name="token">The end token to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteIndent">
      <summary>
            Writes indent characters.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValueDelimiter">
      <summary>
            Writes the JSON value delimiter.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteIndentSpace">
      <summary>
            Writes an indent space.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteNull">
      <summary>
            Writes a null value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteUndefined">
      <summary>
            Writes an undefined value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteRaw(System.String)">
      <summary>
            Writes raw JSON without changing the writer's state.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteRawValue(System.String)">
      <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.String)">
      <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
      <param name="value">The <see cref="T:System.String" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int32)">
      <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt32)">
      <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int64)">
      <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt64)">
      <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Single)">
      <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Single" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Double)">
      <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Double" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Boolean)">
      <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int16)">
      <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt16)">
      <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Char)">
      <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Char" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Byte)">
      <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.SByte)">
      <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Decimal)">
      <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.DateTime)">
      <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.DateTimeOffset)">
      <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Guid)">
      <summary>
            Writes a <see cref="T:System.Guid" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.TimeSpan)">
      <summary>
            Writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
      <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int32})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt32})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int64})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt64})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Single})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Double})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Boolean})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int16})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt16})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Char})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Byte})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.SByte})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Decimal})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.DateTime})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.DateTimeOffset})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Guid})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.TimeSpan})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Byte[])">
      <summary>
            Writes a <see cref="T:Byte[]" /> value.
            </summary>
      <param name="value">The <see cref="T:Byte[]" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Uri)">
      <summary>
            Writes a <see cref="T:System.Uri" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Uri" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Object)">
      <summary>
            Writes a <see cref="T:System.Object" /> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
      <param name="value">The <see cref="T:System.Object" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteComment(System.String)">
      <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text. 
            </summary>
      <param name="text">Text to place inside the comment.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteWhitespace(System.String)">
      <summary>
            Writes out the given white space.
            </summary>
      <param name="ws">The string of white space characters.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.SetWriteState(Newtonsoft.Json.JsonToken,System.Object)">
      <summary>
            Sets the state of the JsonWriter,
            </summary>
      <param name="token">The JsonToken being written.</param>
      <param name="value">The value being written.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.CloseOutput">
      <summary>
            Gets or sets a value indicating whether the underlying stream or
            <see cref="T:System.IO.TextReader" /> should be closed when the writer is closed.
            </summary>
      <value>
            true to close the underlying stream or <see cref="T:System.IO.TextReader" /> when
            the writer is closed; otherwise false. The default is true.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.Top">
      <summary>
            Gets the top.
            </summary>
      <value>The top.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.WriteState">
      <summary>
            Gets the state of the writer.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.Path">
      <summary>
            Gets the path of the writer. 
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.Formatting">
      <summary>
            Indicates how JSON text output is formatted.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.DateFormatHandling">
      <summary>
            Get or set how dates are written to JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.DateTimeZoneHandling">
      <summary>
            Get or set how <see cref="T:System.DateTime" /> time zones are handling when writing JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.StringEscapeHandling">
      <summary>
            Get or set how strings are escaped when writing JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.FloatFormatHandling">
      <summary>
            Get or set how special floating point numbers, e.g. <see cref="F:System.Double.NaN" />,
            <see cref="F:System.Double.PositiveInfinity" /> and <see cref="F:System.Double.NegativeInfinity" />,
            are written to JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.DateFormatString">
      <summary>
            Get or set how <see cref="T:System.DateTime" /> and <see cref="T:System.DateTimeOffset" /> values are formatting when writing JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.Culture">
      <summary>
            Gets or sets the culture used when writing JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Bson.BsonWriter">
      <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating JSON data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonWriter" /> class.
            </summary>
      <param name="stream">The stream.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.#ctor(System.IO.BinaryWriter)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonWriter" /> class.
            </summary>
      <param name="writer">The writer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.Flush">
      <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
      <summary>
            Writes the end.
            </summary>
      <param name="token">The token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteComment(System.String)">
      <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text.
            </summary>
      <param name="text">Text to place inside the comment.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartConstructor(System.String)">
      <summary>
            Writes the start of a constructor with the given name.
            </summary>
      <param name="name">The name of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRaw(System.String)">
      <summary>
            Writes raw JSON.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRawValue(System.String)">
      <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartArray">
      <summary>
            Writes the beginning of a Json array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartObject">
      <summary>
            Writes the beginning of a Json object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WritePropertyName(System.String)">
      <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.Close">
      <summary>
            Closes this stream and the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Object)">
      <summary>
            Writes a <see cref="T:System.Object" /> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
      <param name="value">The <see cref="T:System.Object" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteNull">
      <summary>
            Writes a null value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteUndefined">
      <summary>
            Writes an undefined value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.String)">
      <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
      <param name="value">The <see cref="T:System.String" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int32)">
      <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt32)">
      <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int64)">
      <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt64)">
      <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Single)">
      <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Single" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Double)">
      <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Double" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Boolean)">
      <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int16)">
      <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt16)">
      <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Char)">
      <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Char" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Byte)">
      <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.SByte)">
      <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Decimal)">
      <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.DateTime)">
      <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.DateTimeOffset)">
      <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Byte[])">
      <summary>
            Writes a <see cref="T:Byte[]" /> value.
            </summary>
      <param name="value">The <see cref="T:Byte[]" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Guid)">
      <summary>
            Writes a <see cref="T:System.Guid" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.TimeSpan)">
      <summary>
            Writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
      <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Uri)">
      <summary>
            Writes a <see cref="T:System.Uri" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Uri" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteObjectId(System.Byte[])">
      <summary>
            Writes a <see cref="T:Byte[]" /> value that represents a BSON object id.
            </summary>
      <param name="value">The Object ID value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRegex(System.String,System.String)">
      <summary>
            Writes a BSON regex.
            </summary>
      <param name="pattern">The regex pattern.</param>
      <param name="options">The regex options.</param>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonWriter.DateTimeKindHandling">
      <summary>
            Gets or sets the <see cref="T:System.DateTimeKind" /> used when writing <see cref="T:System.DateTime" /> values to BSON.
            When set to <see cref="F:System.DateTimeKind.Unspecified" /> no conversion will occur.
            </summary>
      <value>The <see cref="T:System.DateTimeKind" /> used when writing <see cref="T:System.DateTime" /> values to BSON.</value>
    </member>
    <member name="T:Newtonsoft.Json.ConstructorHandling">
      <summary>
            Specifies how constructors are used when initializing objects during deserialization by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ConstructorHandling.Default">
      <summary>
            First attempt to use the public default constructor, then fall back to single paramatized constructor, then the non-public default constructor.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ConstructorHandling.AllowNonPublicDefaultConstructor">
      <summary>
            Json.NET will use a non-public default constructor before falling back to a paramatized constructor.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonConverter">
      <summary>
            Converts an object to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverter.GetSchema">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of the JSON produced by the JsonConverter.
            </summary>
      <returns>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of the JSON produced by the JsonConverter.</returns>
    </member>
    <member name="P:Newtonsoft.Json.JsonConverter.CanRead">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can read JSON.
            </summary>
      <value>
        <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can read JSON; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonConverter.CanWrite">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.
            </summary>
      <value>
        <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.Converters.BinaryConverter">
      <summary>
            Converts a binary value to and from a base 64 string value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BinaryConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.BsonObjectIdConverter">
      <summary>
            Converts a <see cref="T:Newtonsoft.Json.Bson.BsonObjectId" /> to and from JSON and BSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.CustomCreationConverter`1">
      <summary>
            Create a custom object
            </summary>
      <typeparam name="T">The object type to convert.</typeparam>
    </member>
    <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.Create(System.Type)">
      <summary>
            Creates an object which will then be populated by the serializer.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>The created object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Converters.CustomCreationConverter`1.CanWrite">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.
            </summary>
      <value>
        <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.Converters.DataSetConverter">
      <summary>
            Converts a <see cref="T:System.Data.DataSet" /> to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataSetConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataSetConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataSetConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
      <param name="valueType">Type of the value.</param>
      <returns>
        <c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.DataTableConverter">
      <summary>
            Converts a <see cref="T:System.Data.DataTable" /> to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataTableConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataTableConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataTableConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
      <param name="valueType">Type of the value.</param>
      <returns>
        <c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.DateTimeConverterBase">
      <summary>
            Provides a base class for converting a <see cref="T:System.DateTime" /> to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DateTimeConverterBase.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.DiscriminatedUnionConverter">
      <summary>
            Converts a F# discriminated union type to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DiscriminatedUnionConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DiscriminatedUnionConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.EntityKeyMemberConverter">
      <summary>
            Converts an Entity Framework EntityKey to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.ExpandoObjectConverter">
      <summary>
            Converts an ExpandoObject to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.ExpandoObjectConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.ExpandoObjectConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.ExpandoObjectConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Converters.ExpandoObjectConverter.CanWrite">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.
            </summary>
      <value>
        <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.Converters.IsoDateTimeConverter">
      <summary>
            Converts a <see cref="T:System.DateTime" /> to and from the ISO 8601 date format (e.g. 2008-04-12T12:53Z).
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.IsoDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.IsoDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeStyles">
      <summary>
            Gets or sets the date time styles used when converting a date to and from JSON.
            </summary>
      <value>The date time styles used when converting a date to and from JSON.</value>
    </member>
    <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeFormat">
      <summary>
            Gets or sets the date time format used when converting a date to and from JSON.
            </summary>
      <value>The date time format used when converting a date to and from JSON.</value>
    </member>
    <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.Culture">
      <summary>
            Gets or sets the culture used when converting a date to and from JSON.
            </summary>
      <value>The culture used when converting a date to and from JSON.</value>
    </member>
    <member name="T:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter">
      <summary>
            Converts a <see cref="T:System.DateTime" /> to and from a JavaScript date constructor (e.g. new Date(52231943)).
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing property value of the JSON that is being converted.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.KeyValuePairConverter">
      <summary>
            Converts a <see cref="T:System.Collections.Generic.KeyValuePair`2" /> to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.RegexConverter">
      <summary>
            Converts a <see cref="T:System.Text.RegularExpressions.Regex" /> to and from JSON and BSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.RegexConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.RegexConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.RegexConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.StringEnumConverter">
      <summary>
            Converts an <see cref="T:System.Enum" /> to and from its name string value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Converters.StringEnumConverter" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Converters.StringEnumConverter.CamelCaseText">
      <summary>
            Gets or sets a value indicating whether the written enum text should be camel case.
            </summary>
      <value>
        <c>true</c> if the written enum text will be camel case; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Converters.StringEnumConverter.AllowIntegerValues">
      <summary>
            Gets or sets a value indicating whether integer values are allowed.
            </summary>
      <value>
        <c>true</c> if integers are allowed; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.Converters.VersionConverter">
      <summary>
            Converts a <see cref="T:System.Version" /> to and from a string (e.g. "1.2.3.4").
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.VersionConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.VersionConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing property value of the JSON that is being converted.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.VersionConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.XmlNodeConverter">
      <summary>
            Converts XML to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="serializer">The calling serializer.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(System.String,System.String@)">
      <summary>
            Checks if the attributeName is a namespace attribute.
            </summary>
      <param name="attributeName">Attribute name to test.</param>
      <param name="prefix">The attribute name prefix if it has one, otherwise an empty string.</param>
      <returns>True if attribute name is for a namespace attribute, otherwise false.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
      <param name="valueType">Type of the value.</param>
      <returns>
        <c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeRootElementName">
      <summary>
            Gets or sets the name of the root element to insert when deserializing to XML if the JSON structure has produces multiple root elements.
            </summary>
      <value>The name of the deserialize root element.</value>
    </member>
    <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.WriteArrayAttribute">
      <summary>
            Gets or sets a flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </summary>
      <value>
        <c>true</c> if the array attibute is written to the XML; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.OmitRootObject">
      <summary>
            Gets or sets a value indicating whether to write the root JSON object.
            </summary>
      <value>
        <c>true</c> if the JSON root object is omitted; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.FloatParseHandling">
      <summary>
            Specifies how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.FloatParseHandling.Double">
      <summary>
            Floating point numbers are parsed to <see cref="F:Newtonsoft.Json.FloatParseHandling.Double" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.FloatParseHandling.Decimal">
      <summary>
            Floating point numbers are parsed to <see cref="F:Newtonsoft.Json.FloatParseHandling.Decimal" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.DateFormatHandling">
      <summary>
            Specifies how dates are formatted when writing JSON text.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateFormatHandling.IsoDateFormat">
      <summary>
            Dates are written in the ISO 8601 format, e.g. "2012-03-21T05:40Z".
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateFormatHandling.MicrosoftDateFormat">
      <summary>
            Dates are written in the Microsoft JSON format, e.g. "\/Date(1198908717056)\/".
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.DateParseHandling">
      <summary>
            Specifies how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON text.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateParseHandling.None">
      <summary>
            Date formatted strings are not parsed to a date type and are read as strings.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateParseHandling.DateTime">
      <summary>
            Date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed to <see cref="F:Newtonsoft.Json.DateParseHandling.DateTime" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateParseHandling.DateTimeOffset">
      <summary>
            Date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed to <see cref="F:Newtonsoft.Json.DateParseHandling.DateTimeOffset" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.DateTimeZoneHandling">
      <summary>
            Specifies how to treat the time value when converting between string and <see cref="T:System.DateTime" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateTimeZoneHandling.Local">
      <summary>
            Treat as local time. If the <see cref="T:System.DateTime" /> object represents a Coordinated Universal Time (UTC), it is converted to the local time.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateTimeZoneHandling.Utc">
      <summary>
            Treat as a UTC. If the <see cref="T:System.DateTime" /> object represents a local time, it is converted to a UTC.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateTimeZoneHandling.Unspecified">
      <summary>
            Treat as a local time if a <see cref="T:System.DateTime" /> is being converted to a string.
            If a string is being converted to <see cref="T:System.DateTime" />, convert to a local time if a time zone is specified.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateTimeZoneHandling.RoundtripKind">
      <summary>
            Time zone information should be preserved when converting.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.DefaultValueHandling">
      <summary>
            Specifies default value handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingObject" title="DefaultValueHandling Class" />
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingExample" title="DefaultValueHandling Ignore Example" />
      </example>
    </member>
    <member name="F:Newtonsoft.Json.DefaultValueHandling.Include">
      <summary>
            Include members where the member value is the same as the member's default value when serializing objects.
            Included members are written to JSON. Has no effect when deserializing.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DefaultValueHandling.Ignore">
      <summary>
            Ignore members where the member value is the same as the member's default value when serializing objects
            so that is is not written to JSON.
            This option will ignore all default values (e.g. <c>null</c> for objects and nullable types; <c>0</c> for integers,
            decimals and floating point numbers; and <c>false</c> for booleans). The default value ignored can be changed by
            placing the <see cref="T:System.ComponentModel.DefaultValueAttribute" /> on the property.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DefaultValueHandling.Populate">
      <summary>
            Members with a default value but no JSON will be set to their default value when deserializing.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DefaultValueHandling.IgnoreAndPopulate">
      <summary>
            Ignore members where the member value is the same as the member's default value when serializing objects
            and sets members to their default value when deserializing.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.FloatFormatHandling">
      <summary>
            Specifies float format handling options when writing special floating point numbers, e.g. <see cref="F:System.Double.NaN" />,
            <see cref="F:System.Double.PositiveInfinity" /> and <see cref="F:System.Double.NegativeInfinity" /> with <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.FloatFormatHandling.String">
      <summary>
            Write special floating point values as strings in JSON, e.g. "NaN", "Infinity", "-Infinity".
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.FloatFormatHandling.Symbol">
      <summary>
            Write special floating point values as symbols in JSON, e.g. NaN, Infinity, -Infinity.
            Note that this will produce non-valid JSON.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.FloatFormatHandling.DefaultValue">
      <summary>
            Write special floating point values as the property's default value in JSON, e.g. 0.0 for a <see cref="T:System.Double" /> property, null for a <see cref="T:System.Nullable`1" /> property.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Formatting">
      <summary>
            Specifies formatting options for the <see cref="T:Newtonsoft.Json.JsonTextWriter" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Formatting.None">
      <summary>
            No special formatting is applied. This is the default.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Formatting.Indented">
      <summary>
            Causes child objects to be indented according to the <see cref="P:Newtonsoft.Json.JsonTextWriter.Indentation" /> and <see cref="P:Newtonsoft.Json.JsonTextWriter.IndentChar" /> settings.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.IJsonLineInfo">
      <summary>
            Provides an interface to enable a class to return line and position information.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.IJsonLineInfo.HasLineInfo">
      <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
      <returns>
        <c>true</c> if LineNumber and LinePosition can be provided; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.IJsonLineInfo.LineNumber">
      <summary>
            Gets the current line number.
            </summary>
      <value>The current line number or 0 if no line information is available (for example, HasLineInfo returns false).</value>
    </member>
    <member name="P:Newtonsoft.Json.IJsonLineInfo.LinePosition">
      <summary>
            Gets the current line position.
            </summary>
      <value>The current line position or 0 if no line information is available (for example, HasLineInfo returns false).</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonContainerAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonContainerAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonContainerAttribute" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonContainerAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonContainerAttribute" /> class with the specified container Id.
            </summary>
      <param name="id">The container Id.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.Id">
      <summary>
            Gets or sets the id.
            </summary>
      <value>The id.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.Title">
      <summary>
            Gets or sets the title.
            </summary>
      <value>The title.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.Description">
      <summary>
            Gets or sets the description.
            </summary>
      <value>The description.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemConverterType">
      <summary>
            Gets the collection's items converter.
            </summary>
      <value>The collection's items converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemConverterParameters">
      <summary>
            The parameter list to use when constructing the JsonConverter described by ItemConverterType.
            If null, the default constructor is used.
            When non-null, there must be a constructor defined in the JsonConverter that exactly matches the number,
            order, and type of these parameters.
            </summary>
      <example>
            [JsonContainer(ItemConverterType = typeof(MyContainerConverter), ItemConverterParameters = new object[] { 123, "Four" })]
            </example>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.IsReference">
      <summary>
            Gets or sets a value that indicates whether to preserve object references.
            </summary>
      <value>
        <c>true</c> to keep object reference; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemIsReference">
      <summary>
            Gets or sets a value that indicates whether to preserve collection's items references.
            </summary>
      <value>
        <c>true</c> to keep collection's items object references; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemReferenceLoopHandling">
      <summary>
            Gets or sets the reference loop handling used when serializing the collection's items.
            </summary>
      <value>The reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemTypeNameHandling">
      <summary>
            Gets or sets the type name handling used when serializing the collection's items.
            </summary>
      <value>The type name handling.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonArrayAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the collection.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonArrayAttribute" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class with a flag indicating whether the array can contain null items
            </summary>
      <param name="allowNullItems">A flag indicating whether the array can contain null items.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonArrayAttribute" /> class with the specified container Id.
            </summary>
      <param name="id">The container Id.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonArrayAttribute.AllowNullItems">
      <summary>
            Gets or sets a value indicating whether null items are allowed in the collection.
            </summary>
      <value>
        <c>true</c> if null items are allowed in the collection; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonConstructorAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to use the specified constructor when deserializing that object.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonConvert">
      <summary>
            Provides methods for converting between common language runtime types and JSON types.
            </summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="SerializeObject" title="Serializing and Deserializing JSON with JsonConvert" />
      </example>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.True">
      <summary>
            Represents JavaScript's boolean value true as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.False">
      <summary>
            Represents JavaScript's boolean value false as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.Null">
      <summary>
            Represents JavaScript's null as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.Undefined">
      <summary>
            Represents JavaScript's undefined as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.PositiveInfinity">
      <summary>
            Represents JavaScript's positive infinity as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.NegativeInfinity">
      <summary>
            Represents JavaScript's negative infinity as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.NaN">
      <summary>
            Represents JavaScript's NaN as a string. This field is read-only.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTime)">
      <summary>
            Converts the <see cref="T:System.DateTime" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTime,Newtonsoft.Json.DateFormatHandling,Newtonsoft.Json.DateTimeZoneHandling)">
      <summary>
            Converts the <see cref="T:System.DateTime" /> to its JSON string representation using the <see cref="T:Newtonsoft.Json.DateFormatHandling" /> specified.
            </summary>
      <param name="value">The value to convert.</param>
      <param name="format">The format the date will be converted to.</param>
      <param name="timeZoneHandling">The time zone handling when the date is converted to a string.</param>
      <returns>A JSON string representation of the <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset)">
      <summary>
            Converts the <see cref="T:System.DateTimeOffset" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.DateTimeOffset" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset,Newtonsoft.Json.DateFormatHandling)">
      <summary>
            Converts the <see cref="T:System.DateTimeOffset" /> to its JSON string representation using the <see cref="T:Newtonsoft.Json.DateFormatHandling" /> specified.
            </summary>
      <param name="value">The value to convert.</param>
      <param name="format">The format the date will be converted to.</param>
      <returns>A JSON string representation of the <see cref="T:System.DateTimeOffset" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Boolean)">
      <summary>
            Converts the <see cref="T:System.Boolean" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Char)">
      <summary>
            Converts the <see cref="T:System.Char" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Char" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Enum)">
      <summary>
            Converts the <see cref="T:System.Enum" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Enum" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int32)">
      <summary>
            Converts the <see cref="T:System.Int32" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int16)">
      <summary>
            Converts the <see cref="T:System.Int16" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Int16" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt16)">
      <summary>
            Converts the <see cref="T:System.UInt16" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.UInt16" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt32)">
      <summary>
            Converts the <see cref="T:System.UInt32" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.UInt32" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int64)">
      <summary>
            Converts the <see cref="T:System.Int64" />  to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt64)">
      <summary>
            Converts the <see cref="T:System.UInt64" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.UInt64" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Single)">
      <summary>
            Converts the <see cref="T:System.Single" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Single" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Double)">
      <summary>
            Converts the <see cref="T:System.Double" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Byte)">
      <summary>
            Converts the <see cref="T:System.Byte" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.SByte)">
      <summary>
            Converts the <see cref="T:System.SByte" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Decimal)">
      <summary>
            Converts the <see cref="T:System.Decimal" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Guid)">
      <summary>
            Converts the <see cref="T:System.Guid" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Guid" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.TimeSpan)">
      <summary>
            Converts the <see cref="T:System.TimeSpan" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.TimeSpan" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Uri)">
      <summary>
            Converts the <see cref="T:System.Uri" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Uri" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.String)">
      <summary>
            Converts the <see cref="T:System.String" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.String,System.Char)">
      <summary>
            Converts the <see cref="T:System.String" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <param name="delimiter">The string delimiter character.</param>
      <returns>A JSON string representation of the <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.String,System.Char,Newtonsoft.Json.StringEscapeHandling)">
      <summary>
            Converts the <see cref="T:System.String" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <param name="delimiter">The string delimiter character.</param>
      <param name="stringEscapeHandling">The string escape handling.</param>
      <returns>A JSON string representation of the <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Object)">
      <summary>
            Converts the <see cref="T:System.Object" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object)">
      <summary>
            Serializes the specified object to a JSON string.
            </summary>
      <param name="value">The object to serialize.</param>
      <returns>A JSON string representation of the object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting)">
      <summary>
            Serializes the specified object to a JSON string using formatting.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <returns>
            A JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Serializes the specified object to a JSON string using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="converters">A collection converters used while serializing.</param>
      <returns>A JSON string representation of the object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Serializes the specified object to a JSON string using formatting and a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="converters">A collection converters used while serializing.</param>
      <returns>A JSON string representation of the object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Serializes the specified object to a JSON string using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is null, default serialization settings will be used.</param>
      <returns>
            A JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Serializes the specified object to a JSON string using a type, formatting and <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is null, default serialization settings will be used.</param>
      <param name="type">
            The type of the value being serialized.
            This parameter is used when <see cref="T:Newtonsoft.Json.TypeNameHandling" /> is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            </param>
      <returns>
            A JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Serializes the specified object to a JSON string using formatting and <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is null, default serialization settings will be used.</param>
      <returns>
            A JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,System.Type,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Serializes the specified object to a JSON string using a type, formatting and <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is null, default serialization settings will be used.</param>
      <param name="type">
            The type of the value being serialized.
            This parameter is used when <see cref="T:Newtonsoft.Json.TypeNameHandling" /> is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            </param>
      <returns>
            A JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObjectAsync(System.Object)">
      <summary>
            Asynchronously serializes the specified object to a JSON string.
            Serialization will happen on a new thread.
            </summary>
      <param name="value">The object to serialize.</param>
      <returns>
            A task that represents the asynchronous serialize operation. The value of the <c>TResult</c> parameter contains a JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObjectAsync(System.Object,Newtonsoft.Json.Formatting)">
      <summary>
            Asynchronously serializes the specified object to a JSON string using formatting.
            Serialization will happen on a new thread.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <returns>
            A task that represents the asynchronous serialize operation. The value of the <c>TResult</c> parameter contains a JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObjectAsync(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Asynchronously serializes the specified object to a JSON string using formatting and a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            Serialization will happen on a new thread.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is null, default serialization settings will be used.</param>
      <returns>
            A task that represents the asynchronous serialize operation. The value of the <c>TResult</c> parameter contains a JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String)">
      <summary>
            Deserializes the JSON to a .NET object.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Deserializes the JSON to a .NET object using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be used.
            </param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type)">
      <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <param name="type">The <see cref="T:System.Type" /> of object being deserialized.</param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String)">
      <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
      <typeparam name="T">The type of the object to deserialize to.</typeparam>
      <param name="value">The JSON to deserialize.</param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0)">
      <summary>
            Deserializes the JSON to the given anonymous type.
            </summary>
      <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be infered from the anonymous type passed
            as a parameter.
            </typeparam>
      <param name="value">The JSON to deserialize.</param>
      <param name="anonymousTypeObject">The anonymous type object.</param>
      <returns>The deserialized anonymous type from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Deserializes the JSON to the given anonymous type using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be infered from the anonymous type passed
            as a parameter.
            </typeparam>
      <param name="value">The JSON to deserialize.</param>
      <param name="anonymousTypeObject">The anonymous type object.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be used.
            </param>
      <returns>The deserialized anonymous type from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Deserializes the JSON to the specified .NET type using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <typeparam name="T">The type of the object to deserialize to.</typeparam>
      <param name="value">The JSON to deserialize.</param>
      <param name="converters">Converters to use while deserializing.</param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Deserializes the JSON to the specified .NET type using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <typeparam name="T">The type of the object to deserialize to.</typeparam>
      <param name="value">The object to deserialize.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be used.
            </param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Deserializes the JSON to the specified .NET type using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <param name="type">The type of the object to deserialize.</param>
      <param name="converters">Converters to use while deserializing.</param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Deserializes the JSON to the specified .NET type using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <param name="type">The type of the object to deserialize to.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be used.
            </param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObjectAsync``1(System.String)">
      <summary>
            Asynchronously deserializes the JSON to the specified .NET type.
            Deserialization will happen on a new thread.
            </summary>
      <typeparam name="T">The type of the object to deserialize to.</typeparam>
      <param name="value">The JSON to deserialize.</param>
      <returns>
            A task that represents the asynchronous deserialize operation. The value of the <c>TResult</c> parameter contains the deserialized object from the JSON string.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObjectAsync``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Asynchronously deserializes the JSON to the specified .NET type using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            Deserialization will happen on a new thread.
            </summary>
      <typeparam name="T">The type of the object to deserialize to.</typeparam>
      <param name="value">The JSON to deserialize.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be used.
            </param>
      <returns>
            A task that represents the asynchronous deserialize operation. The value of the <c>TResult</c> parameter contains the deserialized object from the JSON string.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObjectAsync(System.String)">
      <summary>
            Asynchronously deserializes the JSON to the specified .NET type.
            Deserialization will happen on a new thread.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <returns>
            A task that represents the asynchronous deserialize operation. The value of the <c>TResult</c> parameter contains the deserialized object from the JSON string.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObjectAsync(System.String,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Asynchronously deserializes the JSON to the specified .NET type using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            Deserialization will happen on a new thread.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <param name="type">The type of the object to deserialize to.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be used.
            </param>
      <returns>
            A task that represents the asynchronous deserialize operation. The value of the <c>TResult</c> parameter contains the deserialized object from the JSON string.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.PopulateObject(System.String,System.Object)">
      <summary>
            Populates the object with values from the JSON string.
            </summary>
      <param name="value">The JSON to populate values from.</param>
      <param name="target">The target object to populate values onto.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.PopulateObject(System.String,System.Object,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Populates the object with values from the JSON string using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <param name="value">The JSON to populate values from.</param>
      <param name="target">The target object to populate values onto.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be used.
            </param>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.PopulateObjectAsync(System.String,System.Object,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Asynchronously populates the object with values from the JSON string using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <param name="value">The JSON to populate values from.</param>
      <param name="target">The target object to populate values onto.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be used.
            </param>
      <returns>
            A task that represents the asynchronous populate operation.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode)">
      <summary>
            Serializes the XML node to a JSON string.
            </summary>
      <param name="node">The node to serialize.</param>
      <returns>A JSON string of the XmlNode.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode,Newtonsoft.Json.Formatting)">
      <summary>
            Serializes the XML node to a JSON string using formatting.
            </summary>
      <param name="node">The node to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <returns>A JSON string of the XmlNode.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode,Newtonsoft.Json.Formatting,System.Boolean)">
      <summary>
            Serializes the XML node to a JSON string using formatting and omits the root object if <paramref name="omitRootObject" /> is <c>true</c>.
            </summary>
      <param name="node">The node to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="omitRootObject">Omits writing the root object.</param>
      <returns>A JSON string of the XmlNode.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String)">
      <summary>
            Deserializes the XmlNode from a JSON string.
            </summary>
      <param name="value">The JSON string.</param>
      <returns>The deserialized XmlNode</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String,System.String)">
      <summary>
            Deserializes the XmlNode from a JSON string nested in a root elment specified by <paramref name="deserializeRootElementName" />.
            </summary>
      <param name="value">The JSON string.</param>
      <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
      <returns>The deserialized XmlNode</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String,System.String,System.Boolean)">
      <summary>
            Deserializes the XmlNode from a JSON string nested in a root elment specified by <paramref name="deserializeRootElementName" />
            and writes a .NET array attribute for collections.
            </summary>
      <param name="value">The JSON string.</param>
      <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
      <param name="writeArrayAttribute">
            A flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </param>
      <returns>The deserialized XmlNode</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject)">
      <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode" /> to a JSON string.
            </summary>
      <param name="node">The node to convert to JSON.</param>
      <returns>A JSON string of the XNode.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject,Newtonsoft.Json.Formatting)">
      <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode" /> to a JSON string using formatting.
            </summary>
      <param name="node">The node to convert to JSON.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <returns>A JSON string of the XNode.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject,Newtonsoft.Json.Formatting,System.Boolean)">
      <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode" /> to a JSON string using formatting and omits the root object if <paramref name="omitRootObject" /> is <c>true</c>.
            </summary>
      <param name="node">The node to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="omitRootObject">Omits writing the root object.</param>
      <returns>A JSON string of the XNode.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String)">
      <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode" /> from a JSON string.
            </summary>
      <param name="value">The JSON string.</param>
      <returns>The deserialized XNode</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String,System.String)">
      <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode" /> from a JSON string nested in a root elment specified by <paramref name="deserializeRootElementName" />.
            </summary>
      <param name="value">The JSON string.</param>
      <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
      <returns>The deserialized XNode</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String,System.String,System.Boolean)">
      <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode" /> from a JSON string nested in a root elment specified by <paramref name="deserializeRootElementName" />
            and writes a .NET array attribute for collections.
            </summary>
      <param name="value">The JSON string.</param>
      <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
      <param name="writeArrayAttribute">
            A flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </param>
      <returns>The deserialized XNode</returns>
    </member>
    <member name="P:Newtonsoft.Json.JsonConvert.DefaultSettings">
      <summary>
            Gets or sets a function that creates default <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            Default settings are automatically used by serialization methods on <see cref="T:Newtonsoft.Json.JsonConvert" />,
            and <see cref="M:Newtonsoft.Json.Linq.JToken.ToObject``1" /> and <see cref="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object)" /> on <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            To serialize without using any default settings create a <see cref="T:Newtonsoft.Json.JsonSerializer" /> with
            <see cref="M:Newtonsoft.Json.JsonSerializer.Create" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonConverterAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to use the specified <see cref="T:Newtonsoft.Json.JsonConverter" /> when serializing the member or class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverterAttribute.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonConverterAttribute" /> class.
            </summary>
      <param name="converterType">Type of the converter.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverterAttribute.#ctor(System.Type,System.Object[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonConverterAttribute" /> class.
            </summary>
      <param name="converterType">Type of the converter.</param>
      <param name="converterParameters">Parameter list to use when constructing the JsonConverter.  Can be null.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonConverterAttribute.ConverterType">
      <summary>
            Gets the type of the converter.
            </summary>
      <value>The type of the converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonConverterAttribute.ConverterParameters">
      <summary>
            The parameter list to use when constructing the JsonConverter described by ConverterType.  
            If null, the default constructor is used.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonConverterCollection">
      <summary>
            Represents a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonDictionaryAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the collection.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonDictionaryAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonDictionaryAttribute" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonDictionaryAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonDictionaryAttribute" /> class with the specified container Id.
            </summary>
      <param name="id">The container Id.</param>
    </member>
    <member name="T:Newtonsoft.Json.JsonException">
      <summary>
            The exception thrown when an error occurs during Json serialization or deserialization.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException" /> class
            with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
    </member>
    <member name="T:Newtonsoft.Json.JsonExtensionDataAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to deserialize properties with no matching class member into the specified collection
            and write values during serialization.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonExtensionDataAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonExtensionDataAttribute" /> class.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonExtensionDataAttribute.WriteData">
      <summary>
            Gets or sets a value that indicates whether to write extension data when serializing the object.
            </summary>
      <value>
        <c>true</c> to write extension data when serializing the object; otherwise, <c>false</c>. The default is <c>true</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonExtensionDataAttribute.ReadData">
      <summary>
            Gets or sets a value that indicates whether to read extension data when deserializing the object.
            </summary>
      <value>
        <c>true</c> to read extension data when deserializing the object; otherwise, <c>false</c>. The default is <c>true</c>.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.JsonIgnoreAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> not to serialize the public field or public read/write property value.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonObjectAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor(Newtonsoft.Json.MemberSerialization)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class with the specified member serialization.
            </summary>
      <param name="memberSerialization">The member serialization.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class with the specified container Id.
            </summary>
      <param name="id">The container Id.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonObjectAttribute.MemberSerialization">
      <summary>
            Gets or sets the member serialization.
            </summary>
      <value>The member serialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonObjectAttribute.ItemRequired">
      <summary>
            Gets or sets a value that indicates whether the object's properties are required.
            </summary>
      <value>
            	A value indicating whether the object's properties are required.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.JsonPropertyAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to always serialize the member with the specified name.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonPropertyAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" /> class with the specified name.
            </summary>
      <param name="propertyName">Name of the property.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemConverterType">
      <summary>
            Gets or sets the converter used when serializing the property's collection items.
            </summary>
      <value>The collection's items converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemConverterParameters">
      <summary>
            The parameter list to use when constructing the JsonConverter described by ItemConverterType.
            If null, the default constructor is used.
            When non-null, there must be a constructor defined in the JsonConverter that exactly matches the number,
            order, and type of these parameters.
            </summary>
      <example>
            [JsonProperty(ItemConverterType = typeof(MyContainerConverter), ItemConverterParameters = new object[] { 123, "Four" })]
            </example>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.NullValueHandling">
      <summary>
            Gets or sets the null value handling used when serializing this property.
            </summary>
      <value>The null value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.DefaultValueHandling">
      <summary>
            Gets or sets the default value handling used when serializing this property.
            </summary>
      <value>The default value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ReferenceLoopHandling">
      <summary>
            Gets or sets the reference loop handling used when serializing this property.
            </summary>
      <value>The reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ObjectCreationHandling">
      <summary>
            Gets or sets the object creation handling used when deserializing this property.
            </summary>
      <value>The object creation handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.TypeNameHandling">
      <summary>
            Gets or sets the type name handling used when serializing this property.
            </summary>
      <value>The type name handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.IsReference">
      <summary>
            Gets or sets whether this property's value is serialized as a reference.
            </summary>
      <value>Whether this property's value is serialized as a reference.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.Order">
      <summary>
            Gets or sets the order of serialization and deserialization of a member.
            </summary>
      <value>The numeric order of serialization or deserialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.Required">
      <summary>
            Gets or sets a value indicating whether this property is required.
            </summary>
      <value>
            	A value indicating whether this property is required.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.PropertyName">
      <summary>
            Gets or sets the name of the property.
            </summary>
      <value>The name of the property.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemReferenceLoopHandling">
      <summary>
            Gets or sets the the reference loop handling used when serializing the property's collection items.
            </summary>
      <value>The collection's items reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemTypeNameHandling">
      <summary>
            Gets or sets the the type name handling used when serializing the property's collection items.
            </summary>
      <value>The collection's items type name handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemIsReference">
      <summary>
            Gets or sets whether this property's collection items are serialized as a reference.
            </summary>
      <value>Whether this property's collection items are serialized as a reference.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonReaderException">
      <summary>
            The exception thrown when an error occurs while reading Json text.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReaderException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class
            with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
    </member>
    <member name="P:Newtonsoft.Json.JsonReaderException.LineNumber">
      <summary>
            Gets the line number indicating where the error occurred.
            </summary>
      <value>The line number indicating where the error occurred.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReaderException.LinePosition">
      <summary>
            Gets the line position indicating where the error occurred.
            </summary>
      <value>The line position indicating where the error occurred.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReaderException.Path">
      <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
      <value>The path to the JSON where the error occurred.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonSerializationException">
      <summary>
            The exception thrown when an error occurs during Json serialization or deserialization.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class
            with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
    </member>
    <member name="T:Newtonsoft.Json.JsonSerializer">
      <summary>
            Serializes and deserializes objects into and from the JSON format.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> enables you to control how objects are encoded into JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializer" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Create">
      <summary>
            Creates a new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will not use default settings.
            </summary>
      <returns>
            A new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will not use default settings.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Create(Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Creates a new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will not use default settings.
            </summary>
      <param name="settings">The settings to be applied to the <see cref="T:Newtonsoft.Json.JsonSerializer" />.</param>
      <returns>
            A new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will not use default settings.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.CreateDefault">
      <summary>
            Creates a new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will use default settings.
            </summary>
      <returns>
            A new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will use default settings.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.CreateDefault(Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Creates a new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will use default settings.
            </summary>
      <param name="settings">The settings to be applied to the <see cref="T:Newtonsoft.Json.JsonSerializer" />.</param>
      <returns>
            A new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will use default settings.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Populate(System.IO.TextReader,System.Object)">
      <summary>
            Populates the JSON values onto the target object.
            </summary>
      <param name="reader">The <see cref="T:System.IO.TextReader" /> that contains the JSON structure to reader values from.</param>
      <param name="target">The target object to populate values onto.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Populate(Newtonsoft.Json.JsonReader,System.Object)">
      <summary>
            Populates the JSON values onto the target object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> that contains the JSON structure to reader values from.</param>
      <param name="target">The target object to populate values onto.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader)">
      <summary>
            Deserializes the Json structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> that contains the JSON structure to deserialize.</param>
      <returns>The <see cref="T:System.Object" /> being deserialized.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(System.IO.TextReader,System.Type)">
      <summary>
            Deserializes the Json structure contained by the specified <see cref="T:System.IO.StringReader" />
            into an instance of the specified type.
            </summary>
      <param name="reader">The <see cref="T:System.IO.TextReader" /> containing the object.</param>
      <param name="objectType">The <see cref="T:System.Type" /> of object being deserialized.</param>
      <returns>The instance of <paramref name="objectType" /> being deserialized.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize``1(Newtonsoft.Json.JsonReader)">
      <summary>
            Deserializes the Json structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader" />
            into an instance of the specified type.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the object.</param>
      <typeparam name="T">The type of the object to deserialize.</typeparam>
      <returns>The instance of <typeparamref name="T" /> being deserialized.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader,System.Type)">
      <summary>
            Deserializes the Json structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader" />
            into an instance of the specified type.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the object.</param>
      <param name="objectType">The <see cref="T:System.Type" /> of object being deserialized.</param>
      <returns>The instance of <paramref name="objectType" /> being deserialized.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object)">
      <summary>
            Serializes the specified <see cref="T:System.Object" /> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter" />. 
            </summary>
      <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> used to write the Json structure.</param>
      <param name="value">The <see cref="T:System.Object" /> to serialize.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter,System.Object,System.Type)">
      <summary>
            Serializes the specified <see cref="T:System.Object" /> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter" />. 
            </summary>
      <param name="jsonWriter">The <see cref="T:Newtonsoft.Json.JsonWriter" /> used to write the Json structure.</param>
      <param name="value">The <see cref="T:System.Object" /> to serialize.</param>
      <param name="objectType">
            The type of the value being serialized.
            This parameter is used when <see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling" /> is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            </param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object,System.Type)">
      <summary>
            Serializes the specified <see cref="T:System.Object" /> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter" />. 
            </summary>
      <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> used to write the Json structure.</param>
      <param name="value">The <see cref="T:System.Object" /> to serialize.</param>
      <param name="objectType">
            The type of the value being serialized.
            This parameter is used when <see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling" /> is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            </param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter,System.Object)">
      <summary>
            Serializes the specified <see cref="T:System.Object" /> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:Newtonsoft.Json.JsonWriter" />. 
            </summary>
      <param name="jsonWriter">The <see cref="T:Newtonsoft.Json.JsonWriter" /> used to write the Json structure.</param>
      <param name="value">The <see cref="T:System.Object" /> to serialize.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ReferenceResolver">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver" /> used by the serializer when resolving references.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.Binder">
      <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.SerializationBinder" /> used by the serializer when resolving type names.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.TraceWriter">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.ITraceWriter" /> used by the serializer when writing trace messages.
            </summary>
      <value>The trace writer.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling">
      <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.TypeNameAssemblyFormat">
      <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            </summary>
      <value>The type name assembly format.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.PreserveReferencesHandling">
      <summary>
            Gets or sets how object references are preserved by the serializer.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ReferenceLoopHandling">
      <summary>
            Get or set how reference loops (e.g. a class referencing itself) is handled.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.MissingMemberHandling">
      <summary>
            Get or set how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.NullValueHandling">
      <summary>
            Get or set how null values are handled during serialization and deserialization.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.DefaultValueHandling">
      <summary>
            Get or set how null default are handled during serialization and deserialization.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ObjectCreationHandling">
      <summary>
            Gets or sets how objects are created during deserialization.
            </summary>
      <value>The object creation handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ConstructorHandling">
      <summary>
            Gets or sets how constructors are used during deserialization.
            </summary>
      <value>The constructor handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.MetadataPropertyHandling">
      <summary>
            Gets or sets how metadata properties are used during deserialization.
            </summary>
      <value>The metadata properties handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.Converters">
      <summary>
            Gets a collection <see cref="T:Newtonsoft.Json.JsonConverter" /> that will be used during serialization.
            </summary>
      <value>Collection <see cref="T:Newtonsoft.Json.JsonConverter" /> that will be used during serialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ContractResolver">
      <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.Context">
      <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext" /> used by the serializer when invoking serialization callback methods.
            </summary>
      <value>The context.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.Formatting">
      <summary>
            Indicates how JSON text output is formatted.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.DateFormatHandling">
      <summary>
            Get or set how dates are written to JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.DateTimeZoneHandling">
      <summary>
            Get or set how <see cref="T:System.DateTime" /> time zones are handling during serialization and deserialization.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.DateParseHandling">
      <summary>
            Get or set how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.FloatParseHandling">
      <summary>
            Get or set how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.FloatFormatHandling">
      <summary>
            Get or set how special floating point numbers, e.g. <see cref="F:System.Double.NaN" />,
            <see cref="F:System.Double.PositiveInfinity" /> and <see cref="F:System.Double.NegativeInfinity" />,
            are written as JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.StringEscapeHandling">
      <summary>
            Get or set how strings are escaped when writing JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.DateFormatString">
      <summary>
            Get or set how <see cref="T:System.DateTime" /> and <see cref="T:System.DateTimeOffset" /> values are formatting when writing JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.Culture">
      <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.MaxDepth">
      <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Newtonsoft.Json.JsonReaderException" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.CheckAdditionalContent">
      <summary>
            Gets a value indicating whether there will be a check for additional JSON content after deserializing an object.
            </summary>
      <value>
        <c>true</c> if there will be a check for additional JSON content after deserializing an object; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="E:Newtonsoft.Json.JsonSerializer.Error">
      <summary>
            Occurs when the <see cref="T:Newtonsoft.Json.JsonSerializer" /> errors during serialization and deserialization.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonSerializerSettings">
      <summary>
            Specifies the settings on a <see cref="T:Newtonsoft.Json.JsonSerializer" /> object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializerSettings.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> class.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ReferenceLoopHandling">
      <summary>
            Gets or sets how reference loops (e.g. a class referencing itself) is handled.
            </summary>
      <value>Reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.MissingMemberHandling">
      <summary>
            Gets or sets how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            </summary>
      <value>Missing member handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ObjectCreationHandling">
      <summary>
            Gets or sets how objects are created during deserialization.
            </summary>
      <value>The object creation handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.NullValueHandling">
      <summary>
            Gets or sets how null values are handled during serialization and deserialization.
            </summary>
      <value>Null value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.DefaultValueHandling">
      <summary>
            Gets or sets how null default are handled during serialization and deserialization.
            </summary>
      <value>The default value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Converters">
      <summary>
            Gets or sets a collection <see cref="T:Newtonsoft.Json.JsonConverter" /> that will be used during serialization.
            </summary>
      <value>The converters.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.PreserveReferencesHandling">
      <summary>
            Gets or sets how object references are preserved by the serializer.
            </summary>
      <value>The preserve references handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.TypeNameHandling">
      <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            </summary>
      <value>The type name handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.MetadataPropertyHandling">
      <summary>
            Gets or sets how metadata properties are used during deserialization.
            </summary>
      <value>The metadata properties handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.TypeNameAssemblyFormat">
      <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            </summary>
      <value>The type name assembly format.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ConstructorHandling">
      <summary>
            Gets or sets how constructors are used during deserialization.
            </summary>
      <value>The constructor handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ContractResolver">
      <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
      <value>The contract resolver.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ReferenceResolver">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver" /> used by the serializer when resolving references.
            </summary>
      <value>The reference resolver.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.TraceWriter">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.ITraceWriter" /> used by the serializer when writing trace messages.
            </summary>
      <value>The trace writer.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Binder">
      <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.SerializationBinder" /> used by the serializer when resolving type names.
            </summary>
      <value>The binder.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Error">
      <summary>
            Gets or sets the error handler called during serialization and deserialization.
            </summary>
      <value>The error handler called during serialization and deserialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Context">
      <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext" /> used by the serializer when invoking serialization callback methods.
            </summary>
      <value>The context.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateFormatString">
      <summary>
            Get or set how <see cref="T:System.DateTime" /> and <see cref="T:System.DateTimeOffset" /> values are formatting when writing JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.MaxDepth">
      <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Newtonsoft.Json.JsonReaderException" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Formatting">
      <summary>
            Indicates how JSON text output is formatted.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateFormatHandling">
      <summary>
            Get or set how dates are written to JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateTimeZoneHandling">
      <summary>
            Get or set how <see cref="T:System.DateTime" /> time zones are handling during serialization and deserialization.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateParseHandling">
      <summary>
            Get or set how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.FloatFormatHandling">
      <summary>
            Get or set how special floating point numbers, e.g. <see cref="F:System.Double.NaN" />,
            <see cref="F:System.Double.PositiveInfinity" /> and <see cref="F:System.Double.NegativeInfinity" />,
            are written as JSON.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.FloatParseHandling">
      <summary>
            Get or set how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.StringEscapeHandling">
      <summary>
            Get or set how strings are escaped when writing JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Culture">
      <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.CheckAdditionalContent">
      <summary>
            Gets a value indicating whether there will be a check for additional content after deserializing an object.
            </summary>
      <value>
        <c>true</c> if there will be a check for additional content after deserializing an object; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.JsonTextReader">
      <summary>
            Represents a reader that provides fast, non-cached, forward-only access to JSON text data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.#ctor(System.IO.TextReader)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReader" /> class with the specified <see cref="T:System.IO.TextReader" />.
            </summary>
      <param name="reader">The <c>TextReader</c> containing the XML data to read.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.Read">
      <summary>
            Reads the next JSON token from the stream.
            </summary>
      <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsBytes">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
            </summary>
      <returns>
            A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDecimal">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsInt32">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsString">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDateTime">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDateTimeOffset">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.DateTimeOffset" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.Close">
      <summary>
            Changes the state to closed. 
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.HasLineInfo">
      <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
      <returns>
        <c>true</c> if LineNumber and LinePosition can be provided; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextReader.LineNumber">
      <summary>
            Gets the current line number.
            </summary>
      <value>
            The current line number or 0 if no line information is available (for example, HasLineInfo returns false).
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextReader.LinePosition">
      <summary>
            Gets the current line position.
            </summary>
      <value>
            The current line position or 0 if no line information is available (for example, HasLineInfo returns false).
            </value>
    </member>
    <member name="T:Newtonsoft.Json.JsonTextWriter">
      <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.#ctor(System.IO.TextWriter)">
      <summary>
            Creates an instance of the <c>JsonWriter</c> class using the specified <see cref="T:System.IO.TextWriter" />. 
            </summary>
      <param name="textWriter">The <c>TextWriter</c> to write to.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.Flush">
      <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.Close">
      <summary>
            Closes this stream and the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartObject">
      <summary>
            Writes the beginning of a Json object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartArray">
      <summary>
            Writes the beginning of a Json array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartConstructor(System.String)">
      <summary>
            Writes the start of a constructor with the given name.
            </summary>
      <param name="name">The name of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
      <summary>
            Writes the specified end token.
            </summary>
      <param name="token">The end token to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WritePropertyName(System.String)">
      <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WritePropertyName(System.String,System.Boolean)">
      <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
      <param name="name">The name of the property.</param>
      <param name="escape">A flag to indicate whether the text should be escaped when it is written as a JSON property name.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteIndent">
      <summary>
            Writes indent characters.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueDelimiter">
      <summary>
            Writes the JSON value delimiter.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteIndentSpace">
      <summary>
            Writes an indent space.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Object)">
      <summary>
            Writes a <see cref="T:System.Object" /> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
      <param name="value">The <see cref="T:System.Object" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteNull">
      <summary>
            Writes a null value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteUndefined">
      <summary>
            Writes an undefined value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteRaw(System.String)">
      <summary>
            Writes raw JSON.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.String)">
      <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
      <param name="value">The <see cref="T:System.String" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int32)">
      <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt32)">
      <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int64)">
      <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt64)">
      <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Single)">
      <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Single" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Nullable{System.Single})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Double)">
      <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Double" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Nullable{System.Double})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Boolean)">
      <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int16)">
      <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt16)">
      <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Char)">
      <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Char" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Byte)">
      <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.SByte)">
      <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Decimal)">
      <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.DateTime)">
      <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Byte[])">
      <summary>
            Writes a <see cref="T:Byte[]" /> value.
            </summary>
      <param name="value">The <see cref="T:Byte[]" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.DateTimeOffset)">
      <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Guid)">
      <summary>
            Writes a <see cref="T:System.Guid" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.TimeSpan)">
      <summary>
            Writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
      <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Uri)">
      <summary>
            Writes a <see cref="T:System.Uri" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Uri" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteComment(System.String)">
      <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text. 
            </summary>
      <param name="text">Text to place inside the comment.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteWhitespace(System.String)">
      <summary>
            Writes out the given white space.
            </summary>
      <param name="ws">The string of white space characters.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextWriter.Indentation">
      <summary>
            Gets or sets how many IndentChars to write for each level in the hierarchy when <see cref="T:Newtonsoft.Json.Formatting" /> is set to <c>Formatting.Indented</c>.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextWriter.QuoteChar">
      <summary>
            Gets or sets which character to use to quote attribute values.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextWriter.IndentChar">
      <summary>
            Gets or sets which character to use for indenting when <see cref="T:Newtonsoft.Json.Formatting" /> is set to <c>Formatting.Indented</c>.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextWriter.QuoteName">
      <summary>
            Gets or sets a value indicating whether object names will be surrounded with quotes.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonToken">
      <summary>
            Specifies the type of Json token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.None">
      <summary>
            This is returned by the <see cref="T:Newtonsoft.Json.JsonReader" /> if a <see cref="M:Newtonsoft.Json.JsonReader.Read" /> method has not been called. 
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.StartObject">
      <summary>
            An object start token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.StartArray">
      <summary>
            An array start token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.StartConstructor">
      <summary>
            A constructor start token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.PropertyName">
      <summary>
            An object property name.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Comment">
      <summary>
            A comment.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Raw">
      <summary>
            Raw JSON.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Integer">
      <summary>
            An integer.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Float">
      <summary>
            A float.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.String">
      <summary>
            A string.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Boolean">
      <summary>
            A boolean.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Null">
      <summary>
            A null token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Undefined">
      <summary>
            An undefined token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.EndObject">
      <summary>
            An object end token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.EndArray">
      <summary>
            An array end token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.EndConstructor">
      <summary>
            A constructor end token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Date">
      <summary>
            A Date.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Bytes">
      <summary>
            Byte data.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonValidatingReader">
      <summary>
            Represents a reader that provides <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> validation.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.#ctor(Newtonsoft.Json.JsonReader)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonValidatingReader" /> class that
            validates the content returned from the given <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from while validating.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsInt32">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsBytes">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
            </summary>
      <returns>
            A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDecimal">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsString">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDateTime">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDateTimeOffset">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.Read">
      <summary>
            Reads the next JSON token from the stream.
            </summary>
      <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Value">
      <summary>
            Gets the text value of the current JSON token.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Depth">
      <summary>
            Gets the depth of the current token in the JSON document.
            </summary>
      <value>The depth of the current token in the JSON document.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Path">
      <summary>
            Gets the path of the current JSON token. 
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.QuoteChar">
      <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.TokenType">
      <summary>
            Gets the type of the current JSON token.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.ValueType">
      <summary>
            Gets the Common Language Runtime (CLR) type for the current JSON token.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Schema">
      <summary>
            Gets or sets the schema.
            </summary>
      <value>The schema.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Reader">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.JsonReader" /> used to construct this <see cref="T:Newtonsoft.Json.JsonValidatingReader" />.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.JsonReader" /> specified in the constructor.</value>
    </member>
    <member name="E:Newtonsoft.Json.JsonValidatingReader.ValidationEventHandler">
      <summary>
            Sets an event handler for receiving schema validation errors.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonWriterException">
      <summary>
            The exception thrown when an error occurs while reading Json text.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriterException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class
            with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriterException.Path">
      <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
      <value>The path to the JSON where the error occurred.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.Extensions">
      <summary>
            Contains the LINQ to JSON extension methods.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns a collection of tokens that contains the ancestors of every token in the source collection.
            </summary>
      <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Newtonsoft.Json.Linq.JToken" />.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the ancestors of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns a collection of tokens that contains the descendants of every token in the source collection.
            </summary>
      <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Newtonsoft.Json.Linq.JContainer" />.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the descendants of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Properties(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JObject})">
      <summary>
            Returns a collection of child properties of every object in the source collection.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JObject" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JProperty" /> that contains the properties of every object in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken},System.Object)">
      <summary>
            Returns a collection of child values of every object in the source collection with the given key.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <param name="key">The token key.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the values of every node in the source collection with the given key.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
      <summary>
            Returns a collection of child values of every object in the source collection.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the values of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken},System.Object)">
      <summary>
            Returns a collection of converted child values of every object in the source collection with the given key.
            </summary>
      <typeparam name="U">The type to convert the values to.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <param name="key">The token key.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the converted values of every node in the source collection with the given key.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
      <summary>
            Returns a collection of converted child values of every object in the source collection.
            </summary>
      <typeparam name="U">The type to convert the values to.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the converted values of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Value``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
      <summary>
            Converts the value.
            </summary>
      <typeparam name="U">The type to convert the value to.</typeparam>
      <param name="value">A <see cref="T:Newtonsoft.Json.Linq.JToken" /> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Value``2(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Converts the value.
            </summary>
      <typeparam name="T">The source collection type.</typeparam>
      <typeparam name="U">The type to convert the value to.</typeparam>
      <param name="value">A <see cref="T:Newtonsoft.Json.Linq.JToken" /> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Children``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns a collection of child tokens of every array in the source collection.
            </summary>
      <typeparam name="T">The source collection type.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the values of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Children``2(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns a collection of converted child tokens of every array in the source collection.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <typeparam name="U">The type to convert the values to.</typeparam>
      <typeparam name="T">The source collection type.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the converted values of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.AsJEnumerable(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
      <summary>
            Returns the input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>The input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.AsJEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns the input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.
            </summary>
      <typeparam name="T">The source collection type.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>The input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Linq.IJEnumerable`1">
      <summary>
            Represents a collection of <see cref="T:Newtonsoft.Json.Linq.JToken" /> objects.
            </summary>
      <typeparam name="T">The type of token</typeparam>
    </member>
    <member name="P:Newtonsoft.Json.Linq.IJEnumerable`1.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" /> with the specified key.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JToken">
      <summary>
            Represents an abstract JSON token.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.DeepEquals(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
      <summary>
            Compares the values of two tokens, including the values of all descendant tokens.
            </summary>
      <param name="t1">The first <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</param>
      <param name="t2">The second <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</param>
      <returns>true if the tokens are equal; otherwise false.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.AddAfterSelf(System.Object)">
      <summary>
            Adds the specified content immediately after this token.
            </summary>
      <param name="content">A content object that contains simple content or a collection of content objects to be added after this token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.AddBeforeSelf(System.Object)">
      <summary>
            Adds the specified content immediately before this token.
            </summary>
      <param name="content">A content object that contains simple content or a collection of content objects to be added before this token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Ancestors">
      <summary>
            Returns a collection of the ancestor tokens of this token.
            </summary>
      <returns>A collection of the ancestor tokens of this token.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.AfterSelf">
      <summary>
            Returns a collection of the sibling tokens after this token, in document order.
            </summary>
      <returns>A collection of the sibling tokens after this tokens, in document order.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.BeforeSelf">
      <summary>
            Returns a collection of the sibling tokens before this token, in document order.
            </summary>
      <returns>A collection of the sibling tokens before this token, in document order.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Value``1(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key converted to the specified type.
            </summary>
      <typeparam name="T">The type to convert the token to.</typeparam>
      <param name="key">The token key.</param>
      <returns>The converted token value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Children">
      <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Children``1">
      <summary>
            Returns a collection of the child tokens of this token, in document order, filtered by the specified type.
            </summary>
      <typeparam name="T">The type to filter the child tokens on.</typeparam>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Values``1">
      <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
      <typeparam name="T">The type to convert the values to.</typeparam>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the child values of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Remove">
      <summary>
            Removes this token from its parent.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Replace(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Replaces this token with the specified token.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToString">
      <summary>
            Returns the indented JSON for this token.
            </summary>
      <returns>
            The indented JSON for this token.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToString(Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Returns the JSON for this token using the given formatting and converters.
            </summary>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
      <returns>The JSON for this token using the given formatting and converters.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Boolean">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Boolean" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.DateTimeOffset">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.DateTimeOffset" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Boolean}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int64">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Int64" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTime}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTimeOffset}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Decimal}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Double}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Char}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int32">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Int32" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int16">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Int16" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt16">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.UInt16" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Char">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Char" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Byte">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Byte" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.SByte">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.SByte" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int32}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int16}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt16}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Byte}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.SByte}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.DateTime">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.DateTime" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int64}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Single}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Decimal">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Decimal" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt32}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt64}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Double">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Double" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Single">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Single" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.String">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.String" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt32">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.UInt32" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt64">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.UInt64" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Byte[]">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Byte[]" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Guid">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Guid" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Guid}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Guid" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.TimeSpan">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.TimeSpan" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.TimeSpan}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.TimeSpan" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Uri">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Uri" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Boolean)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Boolean" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.DateTimeOffset)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.DateTimeOffset" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Byte)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Byte" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Byte})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.SByte)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.SByte" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.SByte})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Boolean})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int64)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTime})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTimeOffset})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Decimal})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Double})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int16)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Int16" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt16)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.UInt16" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int32)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Int32" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int32})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.DateTime)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.DateTime" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int64})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Single})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Decimal)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Decimal" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int16})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt16})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt32})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt64})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Double)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Double" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Single)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Single" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.String)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.String" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt32)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.UInt32" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt64)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.UInt64" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Byte[])~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Byte[]" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Uri)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Uri" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.TimeSpan)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.TimeSpan" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.TimeSpan})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Guid)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Guid" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Guid})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.CreateReader">
      <summary>
            Creates an <see cref="T:Newtonsoft.Json.JsonReader" /> for this token.
            </summary>
      <returns>An <see cref="T:Newtonsoft.Json.JsonReader" /> that can be used to read this token and its descendants.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the value of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from an object using the specified <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used when reading the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the value of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToObject``1">
      <summary>
            Creates the specified .NET type from the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <typeparam name="T">The object type that the token will be deserialized to.</typeparam>
      <returns>The new object created from the JSON value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToObject(System.Type)">
      <summary>
            Creates the specified .NET type from the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="objectType">The object type that the token will be deserialized to.</param>
      <returns>The new object created from the JSON value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToObject``1(Newtonsoft.Json.JsonSerializer)">
      <summary>
            Creates the specified .NET type from the <see cref="T:Newtonsoft.Json.Linq.JToken" /> using the specified <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
      <typeparam name="T">The object type that the token will be deserialized to.</typeparam>
      <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used when creating the object.</param>
      <returns>The new object created from the JSON value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToObject(System.Type,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Creates the specified .NET type from the <see cref="T:Newtonsoft.Json.Linq.JToken" /> using the specified <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
      <param name="objectType">The object type that the token will be deserialized to.</param>
      <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used when creating the object.</param>
      <returns>The new object created from the JSON value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ReadFrom(Newtonsoft.Json.JsonReader)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">An <see cref="T:Newtonsoft.Json.JsonReader" /> positioned at the token to read into this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <returns>
            An <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Parse(System.String)">
      <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a string that contains JSON.
            </summary>
      <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> populated from the string that contains JSON.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Load(Newtonsoft.Json.JsonReader)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">An <see cref="T:Newtonsoft.Json.JsonReader" /> positioned at the token to read into this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <returns>
            An <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.SelectToken(System.String)">
      <summary>
            Selects a <see cref="T:Newtonsoft.Json.Linq.JToken" /> using a JPath expression. Selects the token that matches the object path.
            </summary>
      <param name="path">
            A <see cref="T:System.String" /> that contains a JPath expression.
            </param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" />, or null.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.SelectToken(System.String,System.Boolean)">
      <summary>
            Selects a <see cref="T:Newtonsoft.Json.Linq.JToken" /> using a JPath expression. Selects the token that matches the object path.
            </summary>
      <param name="path">
            A <see cref="T:System.String" /> that contains a JPath expression.
            </param>
      <param name="errorWhenNoMatch">A flag to indicate whether an error should be thrown if no tokens are found when evaluating part of the expression.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.SelectTokens(System.String)">
      <summary>
            Selects a collection of elements using a JPath expression.
            </summary>
      <param name="path">
            A <see cref="T:System.String" /> that contains a JPath expression.
            </param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the selected elements.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.SelectTokens(System.String,System.Boolean)">
      <summary>
            Selects a collection of elements using a JPath expression.
            </summary>
      <param name="path">
            A <see cref="T:System.String" /> that contains a JPath expression.
            </param>
      <param name="errorWhenNoMatch">A flag to indicate whether an error should be thrown if no tokens are found when evaluating part of the expression.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the selected elements.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject" /> responsible for binding operations performed on this object.
            </summary>
      <param name="parameter">The expression tree representation of the runtime value.</param>
      <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject" /> to bind this object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.DeepClone">
      <summary>
            Creates a new instance of the <see cref="T:Newtonsoft.Json.Linq.JToken" />. All child tokens are recursively cloned.
            </summary>
      <returns>A new instance of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.EqualityComparer">
      <summary>
            Gets a comparer that can compare two tokens for value equality.
            </summary>
      <value>A <see cref="T:Newtonsoft.Json.Linq.JTokenEqualityComparer" /> that can compare two nodes for value equality.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Parent">
      <summary>
            Gets or sets the parent.
            </summary>
      <value>The parent.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Root">
      <summary>
            Gets the root <see cref="T:Newtonsoft.Json.Linq.JToken" /> of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The root <see cref="T:Newtonsoft.Json.Linq.JToken" /> of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.HasValues">
      <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
      <value>
        <c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Next">
      <summary>
            Gets the next sibling token of this node.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the next sibling token.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Previous">
      <summary>
            Gets the previous sibling token of this node.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the previous sibling token.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Path">
      <summary>
            Gets the path of the JSON token. 
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.First">
      <summary>
            Get the first child token of this token.
            </summary>
      <value>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the first child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Last">
      <summary>
            Get the last child token of this token.
            </summary>
      <value>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the last child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JContainer">
      <summary>
            Represents a token that can contain other tokens.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.OnAddingNew(System.ComponentModel.AddingNewEventArgs)">
      <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JContainer.AddingNew" /> event.
            </summary>
      <param name="e">The <see cref="T:System.ComponentModel.AddingNewEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JContainer.ListChanged" /> event.
            </summary>
      <param name="e">The <see cref="T:System.ComponentModel.ListChangedEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JContainer.CollectionChanged" /> event.
            </summary>
      <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.Children">
      <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.Values``1">
      <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
      <typeparam name="T">The type to convert the values to.</typeparam>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the child values of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.Descendants">
      <summary>
            Returns a collection of the descendant tokens for this token in document order.
            </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the descendant tokens of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.Add(System.Object)">
      <summary>
            Adds the specified content as children of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="content">The content to be added.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.AddFirst(System.Object)">
      <summary>
            Adds the specified content as the first children of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="content">The content to be added.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.CreateWriter">
      <summary>
            Creates an <see cref="T:Newtonsoft.Json.JsonWriter" /> that can be used to add tokens to the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <returns>An <see cref="T:Newtonsoft.Json.JsonWriter" /> that is ready to have content written to it.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.ReplaceAll(System.Object)">
      <summary>
            Replaces the children nodes of this token with the specified content.
            </summary>
      <param name="content">The content.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.RemoveAll">
      <summary>
            Removes the child nodes from this token.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.Merge(System.Object)">
      <summary>
            Merge the specified content into this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="content">The content to be merged.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.Merge(System.Object,Newtonsoft.Json.Linq.JsonMergeSettings)">
      <summary>
            Merge the specified content into this <see cref="T:Newtonsoft.Json.Linq.JToken" /> using <see cref="T:Newtonsoft.Json.Linq.JsonMergeSettings" />.
            </summary>
      <param name="content">The content to be merged.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonMergeSettings" /> used to merge the content.</param>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.ChildrenTokens">
      <summary>
            Gets the container's children tokens.
            </summary>
      <value>The container's children tokens.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.HasValues">
      <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
      <value>
        <c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.First">
      <summary>
            Get the first child token of this token.
            </summary>
      <value>
            A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the first child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.Last">
      <summary>
            Get the last child token of this token.
            </summary>
      <value>
            A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the last child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.Count">
      <summary>
            Gets the count of child JSON tokens.
            </summary>
      <value>The count of child JSON tokens</value>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JContainer.ListChanged">
      <summary>
            Occurs when the list changes or an item in the list changes.
            </summary>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JContainer.AddingNew">
      <summary>
            Occurs before an item is added to the collection.
            </summary>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JContainer.CollectionChanged">
      <summary>
            Occurs when the items list of the collection has changed, or the collection is reset.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JArray">
      <summary>
            Represents a JSON array.
            </summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
      </example>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(Newtonsoft.Json.Linq.JArray)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class from another <see cref="T:Newtonsoft.Json.Linq.JArray" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JArray" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(System.Object[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class with the specified content.
            </summary>
      <param name="content">The contents of the array.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class with the specified content.
            </summary>
      <param name="content">The contents of the array.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Load(Newtonsoft.Json.JsonReader)">
      <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JArray" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Parse(System.String)">
      <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from a string that contains JSON.
            </summary>
      <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> populated from the string that contains JSON.</returns>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
      </example>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.FromObject(System.Object)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> with the values of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
      <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used to read the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> with the values of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.IndexOf(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
      <returns>
            The index of <paramref name="item" /> if found in the list; otherwise, -1.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Insert(System.Int32,Newtonsoft.Json.Linq.JToken)">
      <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
            </summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.RemoveAt(System.Int32)">
      <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.
            </summary>
      <param name="index">The zero-based index of the item to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Add(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Clear">
      <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only. </exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Contains(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.CopyTo(Newtonsoft.Json.Linq.JToken[],System.Int32)">
      <summary>
            Copies to.
            </summary>
      <param name="array">The array.</param>
      <param name="arrayIndex">Index of the array.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Remove(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JArray.ChildrenTokens">
      <summary>
            Gets the container's children tokens.
            </summary>
      <value>The container's children tokens.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JArray.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JArray.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JArray.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> at the specified index.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JArray.IsReadOnly">
      <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
      <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JConstructor">
      <summary>
            Represents a JSON constructor.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(Newtonsoft.Json.Linq.JConstructor)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class from another <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String,System.Object[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class with the specified name and content.
            </summary>
      <param name="name">The constructor name.</param>
      <param name="content">The contents of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class with the specified name and content.
            </summary>
      <param name="name">The constructor name.</param>
      <param name="content">The contents of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class with the specified name.
            </summary>
      <param name="name">The constructor name.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.Load(Newtonsoft.Json.JsonReader)">
      <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JConstructor.ChildrenTokens">
      <summary>
            Gets the container's children tokens.
            </summary>
      <value>The container's children tokens.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JConstructor.Name">
      <summary>
            Gets or sets the name of this constructor.
            </summary>
      <value>The constructor name.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JConstructor.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JConstructor.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JEnumerable`1">
      <summary>
            Represents a collection of <see cref="T:Newtonsoft.Json.Linq.JToken" /> objects.
            </summary>
      <typeparam name="T">The type of token</typeparam>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JEnumerable`1.Empty">
      <summary>
            An empty collection of <see cref="T:Newtonsoft.Json.Linq.JToken" /> objects.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> struct.
            </summary>
      <param name="enumerable">The enumerable.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.Equals(Newtonsoft.Json.Linq.JEnumerable{`0})">
      <summary>
            Determines whether the specified <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> is equal to this instance.
            </summary>
      <param name="other">The <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JEnumerable`1.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" /> with the specified key.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JObject">
      <summary>
            Represents a JSON object.
            </summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
      </example>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(Newtonsoft.Json.Linq.JObject)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class from another <see cref="T:Newtonsoft.Json.Linq.JObject" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JObject" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(System.Object[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class with the specified content.
            </summary>
      <param name="content">The contents of the object.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class with the specified content.
            </summary>
      <param name="content">The contents of the object.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Properties">
      <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1" /> of this object's properties.
            </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of this object's properties.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Property(System.String)">
      <summary>
            Gets a <see cref="T:Newtonsoft.Json.Linq.JProperty" /> the specified name.
            </summary>
      <param name="name">The property name.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JProperty" /> with the specified name or null.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.PropertyValues">
      <summary>
            Gets an <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> of this object's property values.
            </summary>
      <returns>An <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> of this object's property values.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Load(Newtonsoft.Json.JsonReader)">
      <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JObject" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JObject" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Parse(System.String)">
      <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JObject" /> from a string that contains JSON.
            </summary>
      <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> populated from the string that contains JSON.</returns>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
      </example>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.FromObject(System.Object)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JObject" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JObject" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> with the values of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JObject" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JObject" />.</param>
      <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used to read the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> with the values of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.GetValue(System.String)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.GetValue(System.String,System.StringComparison)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
            The exact property name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison" /> will be used to match a property.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <param name="comparison">One of the enumeration values that specifies how the strings will be compared.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.TryGetValue(System.String,System.StringComparison,Newtonsoft.Json.Linq.JToken@)">
      <summary>
            Tries to get the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
            The exact property name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison" /> will be used to match a property.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <param name="value">The value.</param>
      <param name="comparison">One of the enumeration values that specifies how the strings will be compared.</param>
      <returns>true if a value was successfully retrieved; otherwise, false.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Add(System.String,Newtonsoft.Json.Linq.JToken)">
      <summary>
            Adds the specified property name.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Remove(System.String)">
      <summary>
            Removes the property with the specified name.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>true if item was successfully removed; otherwise, false.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.TryGetValue(System.String,Newtonsoft.Json.Linq.JToken@)">
      <summary>
            Tries the get value.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <param name="value">The value.</param>
      <returns>true if a value was successfully retrieved; otherwise, false.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.OnPropertyChanged(System.String)">
      <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JObject.PropertyChanged" /> event with the provided arguments.
            </summary>
      <param name="propertyName">Name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.OnPropertyChanging(System.String)">
      <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JObject.PropertyChanging" /> event with the provided arguments.
            </summary>
      <param name="propertyName">Name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject" /> responsible for binding operations performed on this object.
            </summary>
      <param name="parameter">The expression tree representation of the runtime value.</param>
      <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject" /> to bind this object.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JObject.ChildrenTokens">
      <summary>
            Gets the container's children tokens.
            </summary>
      <value>The container's children tokens.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JObject.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JObject.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JObject.Item(System.String)">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
            </summary>
      <value>
      </value>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JObject.PropertyChanged">
      <summary>
            Occurs when a property value changes.
            </summary>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JObject.PropertyChanging">
      <summary>
            Occurs when a property value is changing.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JsonMergeSettings">
      <summary>
            Specifies the settings used when merging JSON.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JsonMergeSettings.MergeArrayHandling">
      <summary>
            Gets or sets the method used when merging JSON arrays.
            </summary>
      <value>The method used when merging JSON arrays.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JProperty">
      <summary>
            Represents a JSON property.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(Newtonsoft.Json.Linq.JProperty)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JProperty" /> class from another <see cref="T:Newtonsoft.Json.Linq.JProperty" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JProperty" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(System.String,System.Object[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JProperty" /> class.
            </summary>
      <param name="name">The property name.</param>
      <param name="content">The property content.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(System.String,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JProperty" /> class.
            </summary>
      <param name="name">The property name.</param>
      <param name="content">The property content.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.Load(Newtonsoft.Json.JsonReader)">
      <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JProperty" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JProperty" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JProperty" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JProperty.ChildrenTokens">
      <summary>
            Gets the container's children tokens.
            </summary>
      <value>The container's children tokens.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JProperty.Name">
      <summary>
            Gets the property name.
            </summary>
      <value>The property name.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JProperty.Value">
      <summary>
            Gets or sets the property value.
            </summary>
      <value>The property value.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JProperty.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JPropertyDescriptor">
      <summary>
            Represents a view of a <see cref="T:Newtonsoft.Json.Linq.JProperty" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JPropertyDescriptor" /> class.
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.CanResetValue(System.Object)">
      <summary>
            When overridden in a derived class, returns whether resetting an object changes its value.
            </summary>
      <returns>
            true if resetting the component changes its value; otherwise, false.
            </returns>
      <param name="component">The component to test for reset capability. 
                            </param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.GetValue(System.Object)">
      <summary>
            When overridden in a derived class, gets the current value of the property on a component.
            </summary>
      <returns>
            The value of a property for a given component.
            </returns>
      <param name="component">The component with the property for which to retrieve the value. 
                            </param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.ResetValue(System.Object)">
      <summary>
            When overridden in a derived class, resets the value for this property of the component to the default value.
            </summary>
      <param name="component">The component with the property value that is to be reset to the default value. 
                            </param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary>
            When overridden in a derived class, sets the value of the component to a different value.
            </summary>
      <param name="component">The component with the property value that is to be set. 
                            </param>
      <param name="value">The new value. 
                            </param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>
            When overridden in a derived class, determines a value indicating whether the value of this property needs to be persisted.
            </summary>
      <returns>
            true if the property should be persisted; otherwise, false.
            </returns>
      <param name="component">The component with the property to be examined for persistence. 
                            </param>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.ComponentType">
      <summary>
            When overridden in a derived class, gets the type of the component this property is bound to.
            </summary>
      <returns>
            A <see cref="T:System.Type" /> that represents the type of component this property is bound to. When the <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)" /> or <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)" /> methods are invoked, the object specified might be an instance of this type.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.IsReadOnly">
      <summary>
            When overridden in a derived class, gets a value indicating whether this property is read-only.
            </summary>
      <returns>
            true if the property is read-only; otherwise, false.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.PropertyType">
      <summary>
            When overridden in a derived class, gets the type of the property.
            </summary>
      <returns>
            A <see cref="T:System.Type" /> that represents the type of the property.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.NameHashCode">
      <summary>
            Gets the hash code for the name of the member.
            </summary>
      <value>
      </value>
      <returns>
            The hash code for the name of the member.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JValue">
      <summary>
            Represents a value in JSON (string, integer, date, etc).
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(Newtonsoft.Json.Linq.JValue)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class from another <see cref="T:Newtonsoft.Json.Linq.JValue" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JValue" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Int64)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Decimal)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Char)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.UInt64)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.DateTime)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.DateTimeOffset)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Guid)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Uri)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.TimeSpan)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.CreateComment(System.String)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JValue" /> comment with the given value.
            </summary>
      <param name="value">The value.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JValue" /> comment with the given value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.CreateString(System.String)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JValue" /> string with the given value.
            </summary>
      <param name="value">The value.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JValue" /> string with the given value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.CreateNull">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JValue" /> null value.
            </summary>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JValue" /> null value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.CreateUndefined">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JValue" /> null value.
            </summary>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JValue" /> null value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.Equals(Newtonsoft.Json.Linq.JValue)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
      <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
      <exception cref="T:System.NullReferenceException">
            The <paramref name="obj" /> parameter is null.
            </exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.GetHashCode">
      <summary>
            Serves as a hash function for a particular type.
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.String)">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <param name="format">The format.</param>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.IFormatProvider)">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <param name="formatProvider">The format provider.</param>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.String,System.IFormatProvider)">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <param name="format">The format.</param>
      <param name="formatProvider">The format provider.</param>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject" /> responsible for binding operations performed on this object.
            </summary>
      <param name="parameter">The expression tree representation of the runtime value.</param>
      <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject" /> to bind this object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.CompareTo(Newtonsoft.Json.Linq.JValue)">
      <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings:
            Value
            Meaning
            Less than zero
            This instance is less than <paramref name="obj" />.
            Zero
            This instance is equal to <paramref name="obj" />.
            Greater than zero
            This instance is greater than <paramref name="obj" />.
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not the same type as this instance.
            </exception>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JValue.HasValues">
      <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
      <value>
        <c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JValue.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JValue.Value">
      <summary>
            Gets or sets the underlying token value.
            </summary>
      <value>The underlying token value.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JRaw">
      <summary>
            Represents a raw JSON string.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JRaw.#ctor(Newtonsoft.Json.Linq.JRaw)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JRaw" /> class from another <see cref="T:Newtonsoft.Json.Linq.JRaw" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JRaw" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JRaw.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JRaw" /> class.
            </summary>
      <param name="rawJson">The raw json.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JRaw.Create(Newtonsoft.Json.JsonReader)">
      <summary>
            Creates an instance of <see cref="T:Newtonsoft.Json.Linq.JRaw" /> with the content of the reader's current token.
            </summary>
      <param name="reader">The reader.</param>
      <returns>An instance of <see cref="T:Newtonsoft.Json.Linq.JRaw" /> with the content of the reader's current token.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JTokenEqualityComparer">
      <summary>
            Compares tokens to determine whether they are equal.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenEqualityComparer.Equals(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
      <summary>
            Determines whether the specified objects are equal.
            </summary>
      <param name="x">The first object of type <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</param>
      <param name="y">The second object of type <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</param>
      <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenEqualityComparer.GetHashCode(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Returns a hash code for the specified object.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
      <returns>A hash code for the specified object.</returns>
      <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is null.</exception>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JTokenReader">
      <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.#ctor(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JTokenReader" /> class.
            </summary>
      <param name="token">The token to read from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsBytes">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
            </summary>
      <returns>
            A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsDecimal">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsInt32">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsString">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsDateTime">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsDateTimeOffset">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.Read">
      <summary>
            Reads the next JSON token from the stream.
            </summary>
      <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JTokenReader.Path">
      <summary>
            Gets the path of the current JSON token. 
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JTokenType">
      <summary>
            Specifies the type of token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.None">
      <summary>
            No token type has been set.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Object">
      <summary>
            A JSON object.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Array">
      <summary>
            A JSON array.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Constructor">
      <summary>
            A JSON constructor.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Property">
      <summary>
            A JSON object property.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Comment">
      <summary>
            A comment.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Integer">
      <summary>
            An integer value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Float">
      <summary>
            A float value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.String">
      <summary>
            A string value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Boolean">
      <summary>
            A boolean value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Null">
      <summary>
            A null value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Undefined">
      <summary>
            An undefined value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Date">
      <summary>
            A date value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Raw">
      <summary>
            A raw JSON value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Bytes">
      <summary>
            A collection of bytes value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Guid">
      <summary>
            A Guid value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Uri">
      <summary>
            A Uri value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.TimeSpan">
      <summary>
            A TimeSpan value.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JTokenWriter">
      <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.#ctor(Newtonsoft.Json.Linq.JContainer)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JTokenWriter" /> class writing to the given <see cref="T:Newtonsoft.Json.Linq.JContainer" />.
            </summary>
      <param name="container">The container being written to.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JTokenWriter" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.Flush">
      <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.Close">
      <summary>
            Closes this stream and the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartObject">
      <summary>
            Writes the beginning of a Json object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartArray">
      <summary>
            Writes the beginning of a Json array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartConstructor(System.String)">
      <summary>
            Writes the start of a constructor with the given name.
            </summary>
      <param name="name">The name of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
      <summary>
            Writes the end.
            </summary>
      <param name="token">The token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WritePropertyName(System.String)">
      <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Object)">
      <summary>
            Writes a <see cref="T:System.Object" /> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
      <param name="value">The <see cref="T:System.Object" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteNull">
      <summary>
            Writes a null value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteUndefined">
      <summary>
            Writes an undefined value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteRaw(System.String)">
      <summary>
            Writes raw JSON.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteComment(System.String)">
      <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text.
            </summary>
      <param name="text">Text to place inside the comment.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.String)">
      <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
      <param name="value">The <see cref="T:System.String" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int32)">
      <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt32)">
      <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int64)">
      <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt64)">
      <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Single)">
      <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Single" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Double)">
      <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Double" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Boolean)">
      <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int16)">
      <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt16)">
      <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Char)">
      <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Char" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Byte)">
      <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.SByte)">
      <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Decimal)">
      <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.DateTime)">
      <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.DateTimeOffset)">
      <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Byte[])">
      <summary>
            Writes a <see cref="T:Byte[]" /> value.
            </summary>
      <param name="value">The <see cref="T:Byte[]" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.TimeSpan)">
      <summary>
            Writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
      <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Guid)">
      <summary>
            Writes a <see cref="T:System.Guid" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Uri)">
      <summary>
            Writes a <see cref="T:System.Uri" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Uri" /> value to write.</param>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JTokenWriter.Token">
      <summary>
            Gets the token being writen.
            </summary>
      <value>The token being writen.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.MergeArrayHandling">
      <summary>
            Specifies how JSON arrays are merged together.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.MergeArrayHandling.Concat">
      <summary>Concatenate arrays.</summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.MergeArrayHandling.Union">
      <summary>Union arrays, skipping items that already exist.</summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.MergeArrayHandling.Replace">
      <summary>Replace all array items.</summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.MergeArrayHandling.Merge">
      <summary>Merge array items together, matched by index.</summary>
    </member>
    <member name="T:Newtonsoft.Json.MemberSerialization">
      <summary>
            Specifies the member serialization options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MemberSerialization.OptOut">
      <summary>
            All public members are serialized by default. Members can be excluded using <see cref="T:Newtonsoft.Json.JsonIgnoreAttribute" /> or <see cref="T:System.NonSerializedAttribute" />.
            This is the default member serialization mode.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MemberSerialization.OptIn">
      <summary>
            Only members must be marked with <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" /> or <see cref="T:System.Runtime.Serialization.DataMemberAttribute" /> are serialized.
            This member serialization mode can also be set by marking the class with <see cref="T:System.Runtime.Serialization.DataContractAttribute" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MemberSerialization.Fields">
      <summary>
            All public and private fields are serialized. Members can be excluded using <see cref="T:Newtonsoft.Json.JsonIgnoreAttribute" /> or <see cref="T:System.NonSerializedAttribute" />.
            This member serialization mode can also be set by marking the class with <see cref="T:System.SerializableAttribute" />
            and setting IgnoreSerializableAttribute on <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> to false.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.MetadataPropertyHandling">
      <summary>
            Specifies metadata property handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MetadataPropertyHandling.Default">
      <summary>
            Read metadata properties located at the start of a JSON object.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MetadataPropertyHandling.ReadAhead">
      <summary>
            Read metadata properties located anywhere in a JSON object. Note that this setting will impact performance.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MetadataPropertyHandling.Ignore">
      <summary>
            Do not try to read metadata properties.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.MissingMemberHandling">
      <summary>
            Specifies missing member handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MissingMemberHandling.Ignore">
      <summary>
            Ignore a missing member and do not attempt to deserialize it.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MissingMemberHandling.Error">
      <summary>
            Throw a <see cref="T:Newtonsoft.Json.JsonSerializationException" /> when a missing member is encountered during deserialization.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.NullValueHandling">
      <summary>
            Specifies null value handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingObject" title="NullValueHandling Class" />
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingExample" title="NullValueHandling Ignore Example" />
      </example>
    </member>
    <member name="F:Newtonsoft.Json.NullValueHandling.Include">
      <summary>
            Include null values when serializing and deserializing objects.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.NullValueHandling.Ignore">
      <summary>
            Ignore null values when serializing and deserializing objects.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.ObjectCreationHandling">
      <summary>
            Specifies how object creation is handled by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ObjectCreationHandling.Auto">
      <summary>
            Reuse existing objects, create new objects when needed.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ObjectCreationHandling.Reuse">
      <summary>
            Only reuse existing objects.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ObjectCreationHandling.Replace">
      <summary>
            Always create new objects.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.PreserveReferencesHandling">
      <summary>
            Specifies reference handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            Note that references cannot be preserved when a value is set via a non-default constructor such as types that implement ISerializable.
            </summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="PreservingObjectReferencesOn" title="Preserve Object References" />
      </example>
    </member>
    <member name="F:Newtonsoft.Json.PreserveReferencesHandling.None">
      <summary>
            Do not preserve references when serializing types.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.PreserveReferencesHandling.Objects">
      <summary>
            Preserve references when serializing into a JSON object structure.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.PreserveReferencesHandling.Arrays">
      <summary>
            Preserve references when serializing into a JSON array structure.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.PreserveReferencesHandling.All">
      <summary>
            Preserve references when serializing.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.ReferenceLoopHandling">
      <summary>
            Specifies reference loop handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Error">
      <summary>
            Throw a <see cref="T:Newtonsoft.Json.JsonSerializationException" /> when a loop is encountered.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Ignore">
      <summary>
            Ignore loop references and do not serialize.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Serialize">
      <summary>
            Serialize loop references.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Required">
      <summary>
            Indicating whether a property is required.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Required.Default">
      <summary>
            The property is not required. The default state.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Required.AllowNull">
      <summary>
            The property must be defined in JSON but can be a null value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Required.Always">
      <summary>
            The property must be defined in JSON and cannot be a null value.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Schema.Extensions">
      <summary>
            Contains the JSON schema extension methods.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.Extensions.IsValid(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema)">
      <summary>
            Determines whether the <see cref="T:Newtonsoft.Json.Linq.JToken" /> is valid.
            </summary>
      <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken" /> to test.</param>
      <param name="schema">The schema to test with.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:Newtonsoft.Json.Linq.JToken" /> is valid; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.Extensions.IsValid(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema,System.Collections.Generic.IList{System.String}@)">
      <summary>
            Determines whether the <see cref="T:Newtonsoft.Json.Linq.JToken" /> is valid.
            </summary>
      <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken" /> to test.</param>
      <param name="schema">The schema to test with.</param>
      <param name="errorMessages">When this method returns, contains any error messages generated while validating. </param>
      <returns>
        <c>true</c> if the specified <see cref="T:Newtonsoft.Json.Linq.JToken" /> is valid; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.Extensions.Validate(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema)">
      <summary>
            Validates the specified <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken" /> to test.</param>
      <param name="schema">The schema to test with.</param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.Extensions.Validate(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema,Newtonsoft.Json.Schema.ValidationEventHandler)">
      <summary>
            Validates the specified <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken" /> to test.</param>
      <param name="schema">The schema to test with.</param>
      <param name="validationEventHandler">The validation event handler.</param>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchema">
      <summary>
            An in-memory representation of a JSON Schema.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.Read(Newtonsoft.Json.JsonReader)">
      <summary>
            Reads a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the JSON Schema to read.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> object representing the JSON Schema.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.Read(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Schema.JsonSchemaResolver)">
      <summary>
            Reads a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the JSON Schema to read.</param>
      <param name="resolver">The <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> to use when resolving schema references.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> object representing the JSON Schema.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.Parse(System.String)">
      <summary>
            Load a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from a string that contains schema JSON.
            </summary>
      <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> populated from the string that contains JSON.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.Parse(System.String,Newtonsoft.Json.Schema.JsonSchemaResolver)">
      <summary>
            Parses the specified json.
            </summary>
      <param name="json">The json.</param>
      <param name="resolver">The resolver.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> populated from the string that contains JSON.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.WriteTo(Newtonsoft.Json.JsonWriter)">
      <summary>
            Writes this schema to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.Schema.JsonSchemaResolver)">
      <summary>
            Writes this schema to a <see cref="T:Newtonsoft.Json.JsonWriter" /> using the specified <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="resolver">The resolver used.</param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Id">
      <summary>
            Gets or sets the id.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Title">
      <summary>
            Gets or sets the title.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Required">
      <summary>
            Gets or sets whether the object is required.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.ReadOnly">
      <summary>
            Gets or sets whether the object is read only.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Hidden">
      <summary>
            Gets or sets whether the object is visible to users.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Transient">
      <summary>
            Gets or sets whether the object is transient.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Description">
      <summary>
            Gets or sets the description of the object.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Type">
      <summary>
            Gets or sets the types of values allowed by the object.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Pattern">
      <summary>
            Gets or sets the pattern.
            </summary>
      <value>The pattern.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.MinimumLength">
      <summary>
            Gets or sets the minimum length.
            </summary>
      <value>The minimum length.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.MaximumLength">
      <summary>
            Gets or sets the maximum length.
            </summary>
      <value>The maximum length.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.DivisibleBy">
      <summary>
            Gets or sets a number that the value should be divisble by.
            </summary>
      <value>A number that the value should be divisble by.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Minimum">
      <summary>
            Gets or sets the minimum.
            </summary>
      <value>The minimum.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Maximum">
      <summary>
            Gets or sets the maximum.
            </summary>
      <value>The maximum.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.ExclusiveMinimum">
      <summary>
            Gets or sets a flag indicating whether the value can not equal the number defined by the "minimum" attribute.
            </summary>
      <value>A flag indicating whether the value can not equal the number defined by the "minimum" attribute.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.ExclusiveMaximum">
      <summary>
            Gets or sets a flag indicating whether the value can not equal the number defined by the "maximum" attribute.
            </summary>
      <value>A flag indicating whether the value can not equal the number defined by the "maximum" attribute.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.MinimumItems">
      <summary>
            Gets or sets the minimum number of items.
            </summary>
      <value>The minimum number of items.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.MaximumItems">
      <summary>
            Gets or sets the maximum number of items.
            </summary>
      <value>The maximum number of items.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Items">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of items.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of items.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.PositionalItemsValidation">
      <summary>
            Gets or sets a value indicating whether items in an array are validated using the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> instance at their array position from <see cref="P:Newtonsoft.Json.Schema.JsonSchema.Items" />.
            </summary>
      <value>
        <c>true</c> if items are validated using their array position; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.AdditionalItems">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of additional items.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of additional items.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.AllowAdditionalItems">
      <summary>
            Gets or sets a value indicating whether additional items are allowed.
            </summary>
      <value>
        <c>true</c> if additional items are allowed; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.UniqueItems">
      <summary>
            Gets or sets whether the array items must be unique.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Properties">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of properties.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of properties.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.AdditionalProperties">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of additional properties.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of additional properties.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.PatternProperties">
      <summary>
            Gets or sets the pattern properties.
            </summary>
      <value>The pattern properties.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.AllowAdditionalProperties">
      <summary>
            Gets or sets a value indicating whether additional properties are allowed.
            </summary>
      <value>
        <c>true</c> if additional properties are allowed; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Requires">
      <summary>
            Gets or sets the required property if this property is present.
            </summary>
      <value>The required property if this property is present.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Enum">
      <summary>
            Gets or sets the a collection of valid enum values allowed.
            </summary>
      <value>A collection of valid enum values allowed.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Disallow">
      <summary>
            Gets or sets disallowed types.
            </summary>
      <value>The disallow types.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Default">
      <summary>
            Gets or sets the default value.
            </summary>
      <value>The default value.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Extends">
      <summary>
            Gets or sets the collection of <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> that this schema extends.
            </summary>
      <value>The collection of <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> that this schema extends.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Format">
      <summary>
            Gets or sets the format.
            </summary>
      <value>The format.</value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchemaException">
      <summary>
            Returns detailed information about the schema exception.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class
            with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.LineNumber">
      <summary>
            Gets the line number indicating where the error occurred.
            </summary>
      <value>The line number indicating where the error occurred.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.LinePosition">
      <summary>
            Gets the line position indicating where the error occurred.
            </summary>
      <value>The line position indicating where the error occurred.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.Path">
      <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
      <value>The path to the JSON where the error occurred.</value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchemaGenerator">
      <summary>
            Generates a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from a specified <see cref="T:System.Type" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type)">
      <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
            </summary>
      <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,Newtonsoft.Json.Schema.JsonSchemaResolver)">
      <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
            </summary>
      <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.</param>
      <param name="resolver">The <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> used to resolve schema references.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,System.Boolean)">
      <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
            </summary>
      <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.</param>
      <param name="rootSchemaNullable">Specify whether the generated root <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> will be nullable.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,Newtonsoft.Json.Schema.JsonSchemaResolver,System.Boolean)">
      <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
            </summary>
      <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.</param>
      <param name="resolver">The <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> used to resolve schema references.</param>
      <param name="rootSchemaNullable">Specify whether the generated root <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> will be nullable.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaGenerator.UndefinedSchemaIdHandling">
      <summary>
            Gets or sets how undefined schemas are handled by the serializer.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaGenerator.ContractResolver">
      <summary>
            Gets or sets the contract resolver.
            </summary>
      <value>The contract resolver.</value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchemaResolver">
      <summary>
            Resolves <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from an id.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaResolver.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaResolver.GetSchema(System.String)">
      <summary>
            Gets a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> for the specified reference.
            </summary>
      <param name="reference">The id.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> for the specified reference.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaResolver.LoadedSchemas">
      <summary>
            Gets or sets the loaded schemas.
            </summary>
      <value>The loaded schemas.</value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchemaType">
      <summary>
            The value types allowed by the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.None">
      <summary>
            No type specified.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.String">
      <summary>
            String type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Float">
      <summary>
            Float type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Integer">
      <summary>
            Integer type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Boolean">
      <summary>
            Boolean type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Object">
      <summary>
            Object type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Array">
      <summary>
            Array type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Null">
      <summary>
            Null type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Any">
      <summary>
            Any type.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling">
      <summary>
            Specifies undefined schema Id handling options for the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaGenerator" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.None">
      <summary>
            Do not infer a schema Id.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.UseTypeName">
      <summary>
            Use the .NET type name as the schema Id.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.UseAssemblyQualifiedName">
      <summary>
            Use the assembly qualified .NET type name as the schema Id.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Schema.ValidationEventArgs">
      <summary>
            Returns detailed information related to the <see cref="T:Newtonsoft.Json.Schema.ValidationEventHandler" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Exception">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> associated with the validation error.
            </summary>
      <value>The JsonSchemaException associated with the validation error.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Path">
      <summary>
            Gets the path of the JSON location where the validation error occurred.
            </summary>
      <value>The path of the JSON location where the validation error occurred.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Message">
      <summary>
            Gets the text description corresponding to the validation error.
            </summary>
      <value>The text description.</value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.ValidationEventHandler">
      <summary>
            Represents the callback method that will handle JSON schema validation events and the <see cref="T:Newtonsoft.Json.Schema.ValidationEventArgs" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.IContractResolver">
      <summary>
            Used by <see cref="T:Newtonsoft.Json.JsonSerializer" /> to resolves a <see cref="T:Newtonsoft.Json.Serialization.JsonContract" /> for a given <see cref="T:System.Type" />.
            </summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverObject" title="IContractResolver Class" />
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverExample" title="IContractResolver Example" />
      </example>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IContractResolver.ResolveContract(System.Type)">
      <summary>
            Resolves the contract for a given type.
            </summary>
      <param name="type">The type to resolve a contract for.</param>
      <returns>The contract for a given type.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.DefaultContractResolver">
      <summary>
            Used by <see cref="T:Newtonsoft.Json.JsonSerializer" /> to resolves a <see cref="T:Newtonsoft.Json.Serialization.JsonContract" /> for a given <see cref="T:System.Type" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> class.
            </summary>
      <param name="shareCache">
            If set to <c>true</c> the <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> will use a cached shared with other resolvers of the same type.
            Sharing the cache will significantly improve performance with multiple resolver instances because expensive reflection will only
            happen once. This setting can cause unexpected behavior if different instances of the resolver are suppose to produce different
            results. When set to false it is highly recommended to reuse <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> instances with the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)">
      <summary>
            Resolves the contract for a given type.
            </summary>
      <param name="type">The type to resolve a contract for.</param>
      <returns>The contract for a given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)">
      <summary>
            Gets the serializable members for the type.
            </summary>
      <param name="objectType">The type to get serializable members for.</param>
      <returns>The serializable members for the type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateConstructorParameters(System.Reflection.ConstructorInfo,Newtonsoft.Json.Serialization.JsonPropertyCollection)">
      <summary>
            Creates the constructor parameters.
            </summary>
      <param name="constructor">The constructor to create properties for.</param>
      <param name="memberProperties">The type's member properties.</param>
      <returns>Properties for the given <see cref="T:System.Reflection.ConstructorInfo" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Newtonsoft.Json.Serialization.JsonProperty,System.Reflection.ParameterInfo)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.ParameterInfo" />.
            </summary>
      <param name="matchingMemberProperty">The matching member property.</param>
      <param name="parameterInfo">The constructor parameter.</param>
      <returns>A created <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.ParameterInfo" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContractConverter(System.Type)">
      <summary>
            Resolves the default <see cref="T:Newtonsoft.Json.JsonConverter" /> for the contract.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>The contract's default <see cref="T:Newtonsoft.Json.JsonConverter" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateArrayContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePrimitiveContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateLinqContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateISerializableContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDynamicContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateStringContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)">
      <summary>
            Determines which contract type is created for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type,Newtonsoft.Json.MemberSerialization)">
      <summary>
            Creates properties for the given <see cref="T:Newtonsoft.Json.Serialization.JsonContract" />.
            </summary>
      <param name="type">The type to create properties for.</param>
            /// <param name="memberSerialization">The member serialization mode for the type.</param><returns>Properties for the given <see cref="T:Newtonsoft.Json.Serialization.JsonContract" />.</returns></member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateMemberValueProvider(System.Reflection.MemberInfo)">
      <summary>
            Creates the <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> used by the serializer to get and set values from a member.
            </summary>
      <param name="member">The member.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> used by the serializer to get and set values from a member.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo,Newtonsoft.Json.MemberSerialization)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.MemberInfo" />.
            </summary>
      <param name="memberSerialization">The member's parent <see cref="T:Newtonsoft.Json.MemberSerialization" />.</param>
      <param name="member">The member to create a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for.</param>
      <returns>A created <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.MemberInfo" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(System.String)">
      <summary>
            Resolves the name of the property.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>Name of the property.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetResolvedPropertyName(System.String)">
      <summary>
            Gets the resolved name of the property.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>Name of the property.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.DynamicCodeGeneration">
      <summary>
            Gets a value indicating whether members are being get and set using dynamic code generation.
            This value is determined by the runtime permissions available.
            </summary>
      <value>
        <c>true</c> if using dynamic code generation; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.DefaultMembersSearchFlags">
      <summary>
            Gets or sets the default members search flags.
            </summary>
      <value>The default members search flags.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.SerializeCompilerGeneratedMembers">
      <summary>
            Gets or sets a value indicating whether compiler generated members should be serialized.
            </summary>
      <value>
        <c>true</c> if serialized compiler generated members; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreSerializableInterface">
      <summary>
            Gets or sets a value indicating whether to ignore the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface when serializing and deserializing types.
            </summary>
      <value>
        <c>true</c> if the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface will be ignored when serializing and deserializing types; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreSerializableAttribute">
      <summary>
            Gets or sets a value indicating whether to ignore the <see cref="T:System.SerializableAttribute" /> attribute when serializing and deserializing types.
            </summary>
      <value>
        <c>true</c> if the <see cref="T:System.SerializableAttribute" /> attribute will be ignored when serializing and deserializing types; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver">
      <summary>
            Resolves member mappings for a type, camel casing property names.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.ResolvePropertyName(System.String)">
      <summary>
            Resolves the name of the property.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>The property name camel cased.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.IReferenceResolver">
      <summary>
            Used to resolve references when serializing and deserializing JSON by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.ResolveReference(System.Object,System.String)">
      <summary>
            Resolves a reference to its object.
            </summary>
      <param name="context">The serialization context.</param>
      <param name="reference">The reference to resolve.</param>
      <returns>The object that</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.GetReference(System.Object,System.Object)">
      <summary>
            Gets the reference for the sepecified object.
            </summary>
      <param name="context">The serialization context.</param>
      <param name="value">The object to get a reference for.</param>
      <returns>The reference to the object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.IsReferenced(System.Object,System.Object)">
      <summary>
            Determines whether the specified object is referenced.
            </summary>
      <param name="context">The serialization context.</param>
      <param name="value">The object to test for a reference.</param>
      <returns>
        <c>true</c> if the specified object is referenced; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.AddReference(System.Object,System.String,System.Object)">
      <summary>
            Adds a reference to the specified object.
            </summary>
      <param name="context">The serialization context.</param>
      <param name="reference">The reference.</param>
      <param name="value">The object to reference.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.DefaultSerializationBinder">
      <summary>
            The default serialization binder used when resolving and loading classes from type names.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToType(System.String,System.String)">
      <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
      <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly" /> name of the serialized object.</param>
      <param name="typeName">Specifies the <see cref="T:System.Type" /> name of the serialized object.</param>
      <returns>
            The type of the object the formatter creates a new instance of.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToName(System.Type,System.String@,System.String@)">
      <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
      <param name="serializedType">The type of the object the formatter creates a new instance of.</param>
      <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly" /> name of the serialized object. </param>
      <param name="typeName">Specifies the <see cref="T:System.Type" /> name of the serialized object. </param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ITraceWriter">
      <summary>
            Represents a trace writer.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ITraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
      <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
      <param name="level">The <see cref="T:System.Diagnostics.TraceLevel" /> at which to write this trace.</param>
      <param name="message">The trace message.</param>
      <param name="ex">The trace exception. This parameter is optional.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ITraceWriter.LevelFilter">
      <summary>
            Gets the <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <code>Info</code> will exclude <code>Verbose</code> messages and include <code>Info</code>,
            <code>Warning</code> and <code>Error</code> messages.
            </summary>
      <value>The <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.DiagnosticsTraceWriter">
      <summary>
            Represents a trace writer that writes to the application's <see cref="T:System.Diagnostics.TraceListener" /> instances.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DiagnosticsTraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
      <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
      <param name="level">The <see cref="T:System.Diagnostics.TraceLevel" /> at which to write this trace.</param>
      <param name="message">The trace message.</param>
      <param name="ex">The trace exception. This parameter is optional.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DiagnosticsTraceWriter.LevelFilter">
      <summary>
            Gets the <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <code>Info</code> will exclude <code>Verbose</code> messages and include <code>Info</code>,
            <code>Warning</code> and <code>Error</code> messages.
            </summary>
      <value>
            The <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.IValueProvider">
      <summary>
            Provides methods to get and set values.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IValueProvider.SetValue(System.Object,System.Object)">
      <summary>
            Sets the value.
            </summary>
      <param name="target">The target to set the value on.</param>
      <param name="value">The value to set on the target.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IValueProvider.GetValue(System.Object)">
      <summary>
            Gets the value.
            </summary>
      <param name="target">The target to get the value from.</param>
      <returns>The value.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.DynamicValueProvider">
      <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo" /> using dynamic methods.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.#ctor(System.Reflection.MemberInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.DynamicValueProvider" /> class.
            </summary>
      <param name="memberInfo">The member info.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.SetValue(System.Object,System.Object)">
      <summary>
            Sets the value.
            </summary>
      <param name="target">The target to set the value on.</param>
      <param name="value">The value to set on the target.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.GetValue(System.Object)">
      <summary>
            Gets the value.
            </summary>
      <param name="target">The target to get the value from.</param>
      <returns>The value.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ErrorContext">
      <summary>
            Provides information surrounding an error.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Error">
      <summary>
            Gets the error.
            </summary>
      <value>The error.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.OriginalObject">
      <summary>
            Gets the original object that caused the error.
            </summary>
      <value>The original object that caused the error.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Member">
      <summary>
            Gets the member that caused the error.
            </summary>
      <value>The member that caused the error.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Path">
      <summary>
            Gets the path of the JSON location where the error occurred.
            </summary>
      <value>The path of the JSON location where the error occurred.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Handled">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.ErrorContext" /> is handled.
            </summary>
      <value>
        <c>true</c> if handled; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ErrorEventArgs">
      <summary>
            Provides data for the Error event.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ErrorEventArgs.#ctor(System.Object,Newtonsoft.Json.Serialization.ErrorContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.ErrorEventArgs" /> class.
            </summary>
      <param name="currentObject">The current object.</param>
      <param name="errorContext">The error context.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorEventArgs.CurrentObject">
      <summary>
            Gets the current object the error event is being raised against.
            </summary>
      <value>The current object the error event is being raised against.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorEventArgs.ErrorContext">
      <summary>
            Gets the error context.
            </summary>
      <value>The error context.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ExpressionValueProvider">
      <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo" /> using dynamic methods.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ExpressionValueProvider.#ctor(System.Reflection.MemberInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.ExpressionValueProvider" /> class.
            </summary>
      <param name="memberInfo">The member info.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ExpressionValueProvider.SetValue(System.Object,System.Object)">
      <summary>
            Sets the value.
            </summary>
      <param name="target">The target to set the value on.</param>
      <param name="value">The value to set on the target.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ExpressionValueProvider.GetValue(System.Object)">
      <summary>
            Gets the value.
            </summary>
      <param name="target">The target to get the value from.</param>
      <returns>The value.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.UnderlyingType">
      <summary>
            Gets the underlying type for the contract.
            </summary>
      <value>The underlying type for the contract.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.CreatedType">
      <summary>
            Gets or sets the type created during deserialization.
            </summary>
      <value>The type created during deserialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.IsReference">
      <summary>
            Gets or sets whether this type contract is serialized as a reference.
            </summary>
      <value>Whether this type contract is serialized as a reference.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.Converter">
      <summary>
            Gets or sets the default <see cref="T:Newtonsoft.Json.JsonConverter" /> for this contract.
            </summary>
      <value>The converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserializedCallbacks">
      <summary>
            Gets or sets all methods called immediately after deserialization of the object.
            </summary>
      <value>The methods called immediately after deserialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserializingCallbacks">
      <summary>
            Gets or sets all methods called during deserialization of the object.
            </summary>
      <value>The methods called during deserialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerializedCallbacks">
      <summary>
            Gets or sets all methods called after serialization of the object graph.
            </summary>
      <value>The methods called after serialization of the object graph.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerializingCallbacks">
      <summary>
            Gets or sets all methods called before serialization of the object.
            </summary>
      <value>The methods called before serialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnErrorCallbacks">
      <summary>
            Gets or sets all method called when an error is thrown during the serialization of the object.
            </summary>
      <value>The methods called when an error is thrown during the serialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserialized">
      <summary>
            Gets or sets the method called immediately after deserialization of the object.
            </summary>
      <value>The method called immediately after deserialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserializing">
      <summary>
            Gets or sets the method called during deserialization of the object.
            </summary>
      <value>The method called during deserialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerialized">
      <summary>
            Gets or sets the method called after serialization of the object graph.
            </summary>
      <value>The method called after serialization of the object graph.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerializing">
      <summary>
            Gets or sets the method called before serialization of the object.
            </summary>
      <value>The method called before serialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnError">
      <summary>
            Gets or sets the method called when an error is thrown during the serialization of the object.
            </summary>
      <value>The method called when an error is thrown during the serialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreator">
      <summary>
            Gets or sets the default creator method used to create the object.
            </summary>
      <value>The default creator method used to create the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreatorNonPublic">
      <summary>
            Gets or sets a value indicating whether the default creator is non public.
            </summary>
      <value>
        <c>true</c> if the default object creator is non-public; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonContainerContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonContainerContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonContainerContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemConverter">
      <summary>
            Gets or sets the default collection items <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <value>The converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemIsReference">
      <summary>
            Gets or sets a value indicating whether the collection items preserve object references.
            </summary>
      <value>
        <c>true</c> if collection items preserve object references; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemReferenceLoopHandling">
      <summary>
            Gets or sets the collection item reference loop handling.
            </summary>
      <value>The reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemTypeNameHandling">
      <summary>
            Gets or sets the collection item type name handling.
            </summary>
      <value>The type name handling.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonArrayContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonArrayContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonArrayContract.CollectionItemType">
      <summary>
            Gets the <see cref="T:System.Type" /> of the collection items.
            </summary>
      <value>The <see cref="T:System.Type" /> of the collection items.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonArrayContract.IsMultidimensionalArray">
      <summary>
            Gets a value indicating whether the collection type is a multidimensional array.
            </summary>
      <value>
        <c>true</c> if the collection type is a multidimensional array; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.SerializationCallback">
      <summary>
            Handles <see cref="T:Newtonsoft.Json.JsonSerializer" /> serialization callback events.
            </summary>
      <param name="o">The object that raised the callback event.</param>
      <param name="context">The streaming context.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.SerializationErrorCallback">
      <summary>
            Handles <see cref="T:Newtonsoft.Json.JsonSerializer" /> serialization error callback events.
            </summary>
      <param name="o">The object that raised the callback event.</param>
      <param name="context">The streaming context.</param>
      <param name="errorContext">The error context.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ExtensionDataSetter">
      <summary>
            Sets extension data for an object during deserialization.
            </summary>
      <param name="o">The object to set extension data on.</param>
      <param name="key">The extension data key.</param>
      <param name="value">The extension data value.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ExtensionDataGetter">
      <summary>
            Gets extension data for an object during serialization.
            </summary>
      <param name="o">The object to set extension data on.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonDictionaryContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonDictionaryContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.PropertyNameResolver">
      <summary>
            Gets or sets the property name resolver.
            </summary>
      <value>The property name resolver.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryKeyType">
      <summary>
            Gets the <see cref="T:System.Type" /> of the dictionary keys.
            </summary>
      <value>The <see cref="T:System.Type" /> of the dictionary keys.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryValueType">
      <summary>
            Gets the <see cref="T:System.Type" /> of the dictionary values.
            </summary>
      <value>The <see cref="T:System.Type" /> of the dictionary values.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonDynamicContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonDynamicContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonDynamicContract.Properties">
      <summary>
            Gets the object's properties.
            </summary>
      <value>The object's properties.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonDynamicContract.PropertyNameResolver">
      <summary>
            Gets or sets the property name resolver.
            </summary>
      <value>The property name resolver.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonISerializableContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonISerializableContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonISerializableContract.ISerializableCreator">
      <summary>
            Gets or sets the ISerializable object constructor.
            </summary>
      <value>The ISerializable object constructor.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonLinqContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonLinqContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonObjectContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonObjectContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.MemberSerialization">
      <summary>
            Gets or sets the object member serialization.
            </summary>
      <value>The member object serialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ItemRequired">
      <summary>
            Gets or sets a value that indicates whether the object's properties are required.
            </summary>
      <value>
            	A value indicating whether the object's properties are required.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.Properties">
      <summary>
            Gets the object's properties.
            </summary>
      <value>The object's properties.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ConstructorParameters">
      <summary>
            Gets the constructor parameters required for any non-default constructor
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.CreatorParameters">
      <summary>
            Gets a collection of <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> instances that define the parameters used with <see cref="P:Newtonsoft.Json.Serialization.JsonObjectContract.OverrideCreator" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.OverrideConstructor">
      <summary>
            Gets or sets the override constructor used to create the object.
            This is set when a constructor is marked up using the
            JsonConstructor attribute.
            </summary>
      <value>The override constructor.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ParametrizedConstructor">
      <summary>
            Gets or sets the parametrized constructor used to create the object.
            </summary>
      <value>The parametrized constructor.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.OverrideCreator">
      <summary>
            Gets or sets the function used to create the object. When set this function will override <see cref="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreator" />.
            This function is called with a collection of arguments which are defined by the <see cref="P:Newtonsoft.Json.Serialization.JsonObjectContract.CreatorParameters" /> collection.
            </summary>
      <value>The function used to create the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataSetter">
      <summary>
            Gets or sets the extension data setter.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataGetter">
      <summary>
            Gets or sets the extension data getter.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPrimitiveContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonProperty">
      <summary>
            Maps a JSON property to a .NET member or constructor parameter.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonProperty.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.PropertyName">
      <summary>
            Gets or sets the name of the property.
            </summary>
      <value>The name of the property.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DeclaringType">
      <summary>
            Gets or sets the type that declared this property.
            </summary>
      <value>The type that declared this property.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Order">
      <summary>
            Gets or sets the order of serialization and deserialization of a member.
            </summary>
      <value>The numeric order of serialization or deserialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.UnderlyingName">
      <summary>
            Gets or sets the name of the underlying member or parameter.
            </summary>
      <value>The name of the underlying member or parameter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ValueProvider">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> that will get and set the <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> during serialization.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> that will get and set the <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> during serialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.PropertyType">
      <summary>
            Gets or sets the type of the property.
            </summary>
      <value>The type of the property.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Converter">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.JsonConverter" /> for the property.
            If set this converter takes presidence over the contract converter for the property type.
            </summary>
      <value>The converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.MemberConverter">
      <summary>
            Gets or sets the member converter.
            </summary>
      <value>The member converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Ignored">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is ignored.
            </summary>
      <value>
        <c>true</c> if ignored; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Readable">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is readable.
            </summary>
      <value>
        <c>true</c> if readable; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Writable">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is writable.
            </summary>
      <value>
        <c>true</c> if writable; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.HasMemberAttribute">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> has a member attribute.
            </summary>
      <value>
        <c>true</c> if has a member attribute; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DefaultValue">
      <summary>
            Gets the default value.
            </summary>
      <value>The default value.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Required">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is required.
            </summary>
      <value>A value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is required.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.IsReference">
      <summary>
            Gets or sets a value indicating whether this property preserves object references.
            </summary>
      <value>
        <c>true</c> if this instance is reference; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.NullValueHandling">
      <summary>
            Gets or sets the property null value handling.
            </summary>
      <value>The null value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DefaultValueHandling">
      <summary>
            Gets or sets the property default value handling.
            </summary>
      <value>The default value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ReferenceLoopHandling">
      <summary>
            Gets or sets the property reference loop handling.
            </summary>
      <value>The reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ObjectCreationHandling">
      <summary>
            Gets or sets the property object creation handling.
            </summary>
      <value>The object creation handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.TypeNameHandling">
      <summary>
            Gets or sets or sets the type name handling.
            </summary>
      <value>The type name handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ShouldSerialize">
      <summary>
            Gets or sets a predicate used to determine whether the property should be serialize.
            </summary>
      <value>A predicate used to determine whether the property should be serialize.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.GetIsSpecified">
      <summary>
            Gets or sets a predicate used to determine whether the property should be serialized.
            </summary>
      <value>A predicate used to determine whether the property should be serialized.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.SetIsSpecified">
      <summary>
            Gets or sets an action used to set whether the property has been deserialized.
            </summary>
      <value>An action used to set whether the property has been deserialized.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemConverter">
      <summary>
            Gets or sets the converter used when serializing the property's collection items.
            </summary>
      <value>The collection's items converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemIsReference">
      <summary>
            Gets or sets whether this property's collection items are serialized as a reference.
            </summary>
      <value>Whether this property's collection items are serialized as a reference.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemTypeNameHandling">
      <summary>
            Gets or sets the the type name handling used when serializing the property's collection items.
            </summary>
      <value>The collection's items type name handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemReferenceLoopHandling">
      <summary>
            Gets or sets the the reference loop handling used when serializing the property's collection items.
            </summary>
      <value>The collection's items reference loop handling.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonPropertyCollection">
      <summary>
            A collection of <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> objects.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonPropertyCollection" /> class.
            </summary>
      <param name="type">The type.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetKeyForItem(Newtonsoft.Json.Serialization.JsonProperty)">
      <summary>
            When implemented in a derived class, extracts the key from the specified element.
            </summary>
      <param name="item">The element from which to extract the key.</param>
      <returns>The key for the specified element.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.AddProperty(Newtonsoft.Json.Serialization.JsonProperty)">
      <summary>
            Adds a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> object.
            </summary>
      <param name="property">The property to add to the collection.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetClosestMatchProperty(System.String)">
      <summary>
            Gets the closest matching <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> object.
            First attempts to get an exact case match of propertyName and then
            a case insensitive match.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>A matching property if found.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetProperty(System.String,System.StringComparison)">
      <summary>
            Gets a property by property name.
            </summary>
      <param name="propertyName">The name of the property to get.</param>
      <param name="comparisonType">Type property name string comparison.</param>
      <returns>A matching property if found.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonStringContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonStringContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonTypeReflector.CreateJsonConverterInstance(System.Type,System.Object[])">
      <summary>
            Lookup and create an instance of the JsonConverter type described by the argument.
            </summary>
      <param name="converterType">The JsonConverter type to create.</param>
      <param name="converterArgs">Optional arguments to pass to an initializing constructor of the JsonConverter.
            If null, the default constructor is used.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonTypeReflector.GetJsonConverterCreator(System.Type)">
      <summary>
            Create a factory function that can be used to create instances of a JsonConverter described by the 
            argument type.  The returned function can then be used to either invoke the converter's default ctor, or any 
            parameterized constructors by way of an object array.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.MemoryTraceWriter">
      <summary>
            Represents a trace writer that writes to memory. When the trace message limit is
            reached then old trace messages will be removed as new messages are added.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.MemoryTraceWriter" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
      <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
      <param name="level">The <see cref="T:System.Diagnostics.TraceLevel" /> at which to write this trace.</param>
      <param name="message">The trace message.</param>
      <param name="ex">The trace exception. This parameter is optional.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.GetTraceMessages">
      <summary>
            Returns an enumeration of the most recent trace messages.
            </summary>
      <returns>An enumeration of the most recent trace messages.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> of the most recent trace messages.
            </summary>
      <returns>
            A <see cref="T:System.String" /> of the most recent trace messages.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.MemoryTraceWriter.LevelFilter">
      <summary>
            Gets the <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <code>Info</code> will exclude <code>Verbose</code> messages and include <code>Info</code>,
            <code>Warning</code> and <code>Error</code> messages.
            </summary>
      <value>
            The <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ObjectConstructor`1">
      <summary>
            Represents a method that constructs an object.
            </summary>
      <typeparam name="T">The object type to create.</typeparam>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.OnErrorAttribute">
      <summary>
            When applied to a method, specifies that the method is called when an error occurs serializing an object.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ReflectionValueProvider">
      <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo" /> using reflection.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.#ctor(System.Reflection.MemberInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.ReflectionValueProvider" /> class.
            </summary>
      <param name="memberInfo">The member info.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.SetValue(System.Object,System.Object)">
      <summary>
            Sets the value.
            </summary>
      <param name="target">The target to set the value on.</param>
      <param name="value">The value to set on the target.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.GetValue(System.Object)">
      <summary>
            Gets the value.
            </summary>
      <param name="target">The target to get the value from.</param>
      <returns>The value.</returns>
    </member>
    <member name="T:Newtonsoft.Json.StringEscapeHandling">
      <summary>
            Specifies how strings are escaped when writing JSON text.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.StringEscapeHandling.Default">
      <summary>
            Only control characters (e.g. newline) are escaped.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.StringEscapeHandling.EscapeNonAscii">
      <summary>
            All non-ASCII and control characters (e.g. newline) are escaped.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.StringEscapeHandling.EscapeHtml">
      <summary>
            HTML (&lt;, &gt;, &amp;, ', ") and control characters (e.g. newline) are escaped.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.TypeNameHandling">
      <summary>
            Specifies type name handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.None">
      <summary>
            Do not include the .NET type name when serializing types.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.Objects">
      <summary>
            Include the .NET type name when serializing into a JSON object structure.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.Arrays">
      <summary>
            Include the .NET type name when serializing into a JSON array structure.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.All">
      <summary>
            Always include the .NET type name when serializing.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.Auto">
      <summary>
            Include the .NET type name when the type of the object being serialized is not the same as its declared type.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
      <summary>
            Determines whether the collection is null or empty.
            </summary>
      <param name="collection">The collection.</param>
      <returns>
        <c>true</c> if the collection is null or empty; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Adds the elements of the specified collection to the specified generic IList.
            </summary>
      <param name="initial">The list to add to.</param>
      <param name="collection">The collection of elements to add.</param>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Returns the index of the first occurrence in a sequence by using a specified IEqualityComparer.
            </summary>
      <typeparam name="TSource">The type of the elements of source.</typeparam>
      <param name="list">A sequence in which to locate a value.</param>
      <param name="value">The object to locate in the sequence</param>
      <param name="comparer">An equality comparer to compare values.</param>
      <returns>The zero-based index of the first occurrence of value within the entire sequence, if found; otherwise, –1.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.ConvertOrCast(System.Object,System.Globalization.CultureInfo,System.Type)">
      <summary>
            Converts the value to the specified type. If the value is unable to be converted, the
            value is checked whether it assignable to the specified type.
            </summary>
      <param name="initialValue">The value to convert.</param>
      <param name="culture">The culture to use when converting.</param>
      <param name="targetType">The type to convert or cast the value to.</param>
      <returns>
            The converted type. If conversion was unsuccessful, the initial value
            is returned if assignable to the target type.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodWithResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback,Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
      <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic that returns a result
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodReturnLast(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
      <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic, but uses one of the arguments for
            the result.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodNoResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
      <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic, but uses one of the arguments for
            the result.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.GetRestrictions">
      <summary>
            Returns a Restrictions object which includes our current restrictions merged
            with a restriction limiting our type
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.EnumUtils.GetNamesAndValues``1">
      <summary>
            Gets a dictionary of the names and values of an Enum type.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.EnumUtils.GetNamesAndValues``1(System.Type)">
      <summary>
            Gets a dictionary of the names and values of an Enum type.
            </summary>
      <param name="enumType">The enum type to get names and values for.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetCollectionItemType(System.Type)">
      <summary>
            Gets the type of the typed collection's items.
            </summary>
      <param name="type">The type.</param>
      <returns>The type of the typed collection's items.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)">
      <summary>
            Gets the member's underlying type.
            </summary>
      <param name="member">The member.</param>
      <returns>The underlying type of the member.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.MemberInfo)">
      <summary>
            Determines whether the member is an indexed property.
            </summary>
      <param name="member">The member.</param>
      <returns>
        <c>true</c> if the member is an indexed property; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.PropertyInfo)">
      <summary>
            Determines whether the property is an indexed property.
            </summary>
      <param name="property">The property.</param>
      <returns>
        <c>true</c> if the property is an indexed property; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo,System.Object)">
      <summary>
            Gets the member's value on the object.
            </summary>
      <param name="member">The member.</param>
      <param name="target">The target object.</param>
      <returns>The member's value on the object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.SetMemberValue(System.Reflection.MemberInfo,System.Object,System.Object)">
      <summary>
            Sets the member's value on the target object.
            </summary>
      <param name="member">The member.</param>
      <param name="target">The target.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo,System.Boolean)">
      <summary>
            Determines whether the specified MemberInfo can be read.
            </summary>
      <param name="member">The MemberInfo to determine whether can be read.</param>
            /// <param name="nonPublic">if set to <c>true</c> then allow the member to be gotten non-publicly.</param><returns><c>true</c> if the specified MemberInfo can be read; otherwise, <c>false</c>.
            </returns></member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo,System.Boolean,System.Boolean)">
      <summary>
            Determines whether the specified MemberInfo can be set.
            </summary>
      <param name="member">The MemberInfo to determine whether can be set.</param>
      <param name="nonPublic">if set to <c>true</c> then allow the member to be set non-publicly.</param>
      <param name="canSetReadOnly">if set to <c>true</c> then allow the member to be set if read-only.</param>
      <returns>
        <c>true</c> if the specified MemberInfo can be set; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Utilities.StringBuffer">
      <summary>
            Builds a string. Unlike StringBuilder this class lets you reuse it's internal buffer.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.StringUtils.IsWhiteSpace(System.String)">
      <summary>
            Determines whether the string is all white space. Empty string will return false.
            </summary>
      <param name="s">The string to test whether it is all white space.</param>
      <returns>
        <c>true</c> if the string is all white space; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.StringUtils.NullEmptyString(System.String)">
      <summary>
            Nulls an empty string.
            </summary>
      <param name="s">The string.</param>
      <returns>Null if the string was null, otherwise the string unchanged.</returns>
    </member>
    <member name="T:Newtonsoft.Json.WriteState">
      <summary>
            Specifies the state of the <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Error">
      <summary>
            An exception has been thrown, which has left the <see cref="T:Newtonsoft.Json.JsonWriter" /> in an invalid state.
            You may call the <see cref="M:Newtonsoft.Json.JsonWriter.Close" /> method to put the <see cref="T:Newtonsoft.Json.JsonWriter" /> in the <c>Closed</c> state.
            Any other <see cref="T:Newtonsoft.Json.JsonWriter" /> method calls results in an <see cref="T:System.InvalidOperationException" /> being thrown. 
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Closed">
      <summary>
            The <see cref="M:Newtonsoft.Json.JsonWriter.Close" /> method has been called. 
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Object">
      <summary>
            An object is being written. 
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Array">
      <summary>
            A array is being written.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Constructor">
      <summary>
            A constructor is being written.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Property">
      <summary>
            A property is being written.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Start">
      <summary>
            A write method has not been called.
            </summary>
    </member>
    <member name="T:System.Net.Http.ByteRangeStreamContent">
      <summary>
        <see cref="T:System.Net.Http.HttpContent" /> implementation which provides a byte range view over a stream used to generate HTTP 206 (Partial Content) byte range responses. The <see cref="T:System.Net.Http.ByteRangeStreamContent" /> supports one or more  byte ranges regardless of whether the ranges are consecutive or not. If there is only one range then a  single partial response body containing a Content-Range header is generated. If there are more than one ranges then a multipart/byteranges response is generated where each body part contains a range indicated by the associated Content-Range header field. </summary>
    </member>
    <member name="M:System.Net.Http.ByteRangeStreamContent.#ctor(System.IO.Stream,System.Net.Http.Headers.RangeHeaderValue,System.String)">
      <summary>
        <see cref="T:System.Net.Http.HttpContent" /> implementation which provides a byte range view over a stream used to generate HTTP 206 (Partial Content) byte range responses. If none of the requested ranges overlap with the current extend  of the selected resource represented by the content parameter then an  <see cref="T:System.Net.Http.InvalidByteRangeException" /> is thrown indicating the valid Content-Range of the content.  </summary>
      <param name="content">The stream over which to generate a byte range view.</param>
      <param name="range">The range or ranges, typically obtained from the Range HTTP request header field.</param>
      <param name="mediaType">The media type of the content stream.</param>
    </member>
    <member name="M:System.Net.Http.ByteRangeStreamContent.#ctor(System.IO.Stream,System.Net.Http.Headers.RangeHeaderValue,System.String,System.Int32)">
      <summary>
        <see cref="T:System.Net.Http.HttpContent" /> implementation which provides a byte range view over a stream used to generate HTTP 206 (Partial Content) byte range responses. If none of the requested ranges overlap with the current extend  of the selected resource represented by the content parameter then an  <see cref="T:System.Net.Http.InvalidByteRangeException" /> is thrown indicating the valid Content-Range of the content.  </summary>
      <param name="content">The stream over which to generate a byte range view.</param>
      <param name="range">The range or ranges, typically obtained from the Range HTTP request header field.</param>
      <param name="mediaType">The media type of the content stream.</param>
      <param name="bufferSize">The buffer size used when copying the content stream.</param>
    </member>
    <member name="M:System.Net.Http.ByteRangeStreamContent.#ctor(System.IO.Stream,System.Net.Http.Headers.RangeHeaderValue,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary>
        <see cref="T:System.Net.Http.HttpContent" /> implementation which provides a byte range view over a stream used to generate HTTP 206 (Partial Content) byte range responses. If none of the requested ranges overlap with the current extend  of the selected resource represented by the content parameter then an  <see cref="T:System.Net.Http.InvalidByteRangeException" /> is thrown indicating the valid Content-Range of the content.  </summary>
      <param name="content">The stream over which to generate a byte range view.</param>
      <param name="range">The range or ranges, typically obtained from the Range HTTP request header field.</param>
      <param name="mediaType">The media type of the content stream.</param>
    </member>
    <member name="M:System.Net.Http.ByteRangeStreamContent.#ctor(System.IO.Stream,System.Net.Http.Headers.RangeHeaderValue,System.Net.Http.Headers.MediaTypeHeaderValue,System.Int32)">
      <summary>
        <see cref="T:System.Net.Http.HttpContent" /> implementation which provides a byte range view over a stream used to generate HTTP 206 (Partial Content) byte range responses. If none of the requested ranges overlap with the current extend  of the selected resource represented by the content parameter then an  <see cref="T:System.Net.Http.InvalidByteRangeException" /> is thrown indicating the valid Content-Range of the content.  </summary>
      <param name="content">The stream over which to generate a byte range view.</param>
      <param name="range">The range or ranges, typically obtained from the Range HTTP request header field.</param>
      <param name="mediaType">The media type of the content stream.</param>
      <param name="bufferSize">The buffer size used when copying the content stream.</param>
    </member>
    <member name="M:System.Net.Http.ByteRangeStreamContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
      <summary>Asynchronously serialize and write the byte range to an HTTP content stream.</summary>
      <returns>The task object representing the asynchronous operation.</returns>
      <param name="stream">The target stream.</param>
      <param name="context">Information about the transport.</param>
    </member>
    <member name="M:System.Net.Http.ByteRangeStreamContent.TryComputeLength(System.Int64@)">
      <summary>Determines whether a byte array has a valid length in bytes.</summary>
      <returns>true if length is a valid length; otherwise, false.</returns>
      <param name="length">The length in bytes of the byte array.</param>
    </member>
    <member name="M:System.Net.Http.ByteRangeStreamContent.Dispose(System.Boolean)">
      <summary>Releases the resources used by the current instance of the <see cref="T:System.Net.Http.ByteRangeStreamContent" /> class.</summary>
      <param name="disposing">true to release managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.MediaTypeFormatter">
      <summary> Base class to handle serializing and deserializing strongly-typed objects using <see cref="T:System.Net.Http.ObjectContent" />. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.#ctor(System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> class.</summary>
      <param name="formatter">The <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> instance to copy settings from.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
      <summary>Asynchronously deserializes an object of the specified type.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> whose result will be an object of the given type.</returns>
      <param name="type">The type of the object to deserialize.</param>
      <param name="readStream">The <see cref="T:System.IO.Stream" /> to read.</param>
      <param name="content">The <see cref="T:System.Net.Http.HttpContent" />, if available. It may be null.</param>
      <param name="formatterLogger">The <see cref="T:System.Net.Http.Formatting.IFormatterLogger" /> to log events to.</param>
      <exception cref="T:System.NotSupportedException">Derived types need to support reading.</exception>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger,System.Threading.CancellationToken)">
      <summary>Asynchronously deserializes an object of the specified type.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> whose result will be an object of the given type.</returns>
      <param name="type">The type of the object to deserialize.</param>
      <param name="readStream">The <see cref="T:System.IO.Stream" /> to read.</param>
      <param name="content">The <see cref="T:System.Net.Http.HttpContent" />, if available. It may be null.</param>
      <param name="formatterLogger">The <see cref="T:System.Net.Http.Formatting.IFormatterLogger" /> to log events to.</param>
      <param name="cancellationToken">The token to cancel the operation.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext)">
      <summary>Asynchronously writes an object of the specified type.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that will perform the write.</returns>
      <param name="type">The type of the object to write.</param>
      <param name="value">The object value to write.  It may be null.</param>
      <param name="writeStream">The <see cref="T:System.IO.Stream" /> to which to write.</param>
      <param name="content">The <see cref="T:System.Net.Http.HttpContent" /> if available. It may be null.</param>
      <param name="transportContext">The <see cref="T:System.Net.TransportContext" /> if available. It may be null.</param>
      <exception cref="T:System.NotSupportedException">Derived types need to support writing.</exception>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext,System.Threading.CancellationToken)">
      <summary>Asynchronously writes an object of the specified type.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that will perform the write.</returns>
      <param name="type">The type of the object to write.</param>
      <param name="value">The object value to write.  It may be null.</param>
      <param name="writeStream">The <see cref="T:System.IO.Stream" /> to which to write.</param>
      <param name="content">The <see cref="T:System.Net.Http.HttpContent" /> if available. It may be null.</param>
      <param name="transportContext">The <see cref="T:System.Net.TransportContext" /> if available. It may be null.</param>
      <param name="cancellationToken">The token to cancel the operation.</param>
      <exception cref="T:System.NotSupportedException">Derived types need to support writing.</exception>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.SelectCharacterEncoding(System.Net.Http.Headers.HttpContentHeaders)">
      <summary>Determines the best character encoding for reading or writing an HTTP entity body, given a set of content headers.</summary>
      <returns>The encoding that is the best match.</returns>
      <param name="contentHeaders">The content headers.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.SetDefaultContentHeaders(System.Type,System.Net.Http.Headers.HttpContentHeaders,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Sets the default headers for content that will be formatted using this formatter. This method is called from the <see cref="T:System.Net.Http.ObjectContent" /> constructor. This implementation sets the Content-Type header to the value of mediaType if it is not null. If it is null it sets the Content-Type to the default media type of this formatter. If the Content-Type does not specify a charset it will set it using this formatters configured <see cref="T:System.Text.Encoding" />. </summary>
      <param name="type">The type of the object being serialized. See <see cref="T:System.Net.Http.ObjectContent" />.</param>
      <param name="headers">The content headers that should be configured.</param>
      <param name="mediaType">The authoritative media type. Can be null.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.GetPerRequestFormatterInstance(System.Type,System.Net.Http.HttpRequestMessage,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary>Returns a specialized instance of the <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> that can format a response for the given parameters.</summary>
      <returns>Returns <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />.</returns>
      <param name="type">The type to format.</param>
      <param name="request">The request.</param>
      <param name="mediaType">The media type.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.CanReadType(System.Type)">
      <summary>Queries whether this <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> can deserializean object of the specified type.</summary>
      <returns>true if the <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> can deserialize the type; otherwise, false.</returns>
      <param name="type">The type to deserialize.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.CanWriteType(System.Type)">
      <summary>Queries whether this <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> can serializean object of the specified type.</summary>
      <returns>true if the <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> can serialize the type; otherwise, false.</returns>
      <param name="type">The type to serialize.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatter.GetDefaultValueForType(System.Type)">
      <summary>Gets the default value for the specified type.</summary>
      <returns>The default value.</returns>
      <param name="type">The type for which to get the default value.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatter.MaxHttpCollectionKeys">
      <summary>Gets or sets the maximum number of keys stored in a T: <see cref="System.Collections.Specialized.NameValueCollection" />.</summary>
      <returns>The maximum number of keys.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatter.SupportedMediaTypes">
      <summary>Gets the mutable collection of media types supported bythis <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />.</summary>
      <returns>The collection of <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> objects.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatter.SupportedEncodings">
      <summary>Gets the mutable collection of character encodings supported bythis <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />.</summary>
      <returns>The collection of <see cref="T:System.Text.Encoding" /> objects.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatter.MediaTypeMappings">
      <summary>Gets the mutable collection of <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> objects that match HTTP requests to media types.</summary>
      <returns>The <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> collection.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatter.RequiredMemberSelector">
      <summary>Gets or sets the <see cref="T:System.Net.Http.Formatting.IRequiredMemberSelector" /> instance used to determine required members.</summary>
      <returns>The <see cref="T:System.Net.Http.Formatting.IRequiredMemberSelector" /> instance.</returns>
    </member>
    <member name="T:System.Net.Http.Formatting.BaseJsonMediaTypeFormatter">
      <summary>Abstract media type formatter class to support Bson and Json.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.BaseJsonMediaTypeFormatter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.BaseJsonMediaTypeFormatter" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.BaseJsonMediaTypeFormatter.#ctor(System.Net.Http.Formatting.BaseJsonMediaTypeFormatter)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.BaseJsonMediaTypeFormatter" /> class.</summary>
      <param name="formatter">The <see cref="T:System.Net.Http.Formatting.BaseJsonMediaTypeFormatter" /> instance to copy settings from.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.BaseJsonMediaTypeFormatter.CreateDefaultSerializerSettings">
      <summary>Creates a <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> instance with the default settings used by the <see cref="T:System.Net.Http.Formatting.BaseJsonMediaTypeFormatter" />.</summary>
      <returns>Returns <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.BaseJsonMediaTypeFormatter.CanReadType(System.Type)">
      <summary>Determines whether this formatter can read objects of the specified type.</summary>
      <returns>true if objects of this type can be read, otherwise false.</returns>
      <param name="type">The type of object that will be read.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.BaseJsonMediaTypeFormatter.CanWriteType(System.Type)">
      <summary>Determines whether this formatter can write objects of the specified type.</summary>
      <returns>true if objects of this type can be written, otherwise false.</returns>
      <param name="type">The type of object to write.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.BaseJsonMediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
      <summary>Called during deserialization to read an object of the specified type from the specified stream.</summary>
      <returns>A task whose result will be the object instance that has been read.</returns>
      <param name="type">The type of the object to read.</param>
      <param name="readStream">The stream from which to read.</param>
      <param name="content">The <see cref="T:System.Net.Http.HttpContent" /> for the content being read.</param>
      <param name="formatterLogger">The logger to log events to.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.BaseJsonMediaTypeFormatter.ReadFromStream(System.Type,System.IO.Stream,System.Text.Encoding,System.Net.Http.Formatting.IFormatterLogger)">
      <summary>Called during deserialization to read an object of the specified type from the specified stream.</summary>
      <returns>The object that has been read.</returns>
      <param name="type">The type of the object to read.</param>
      <param name="readStream">The stream from which to read.</param>
      <param name="effectiveEncoding">The encoding to use when reading.</param>
      <param name="formatterLogger">The logger to log events to.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.BaseJsonMediaTypeFormatter.CreateJsonReader(System.Type,System.IO.Stream,System.Text.Encoding)">
      <summary>Called during deserialization to get the <see cref="T:Newtonsoft.Json.JsonReader" />.</summary>
      <returns>The reader to use during deserialization.</returns>
      <param name="type">The type of the object to read.</param>
      <param name="readStream">The stream from which to read.</param>
      <param name="effectiveEncoding">The encoding to use when reading.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.BaseJsonMediaTypeFormatter.CreateJsonSerializer">
      <summary>Called during serialization and deserialization to get the <see cref="T:Newtonsoft.Json.JsonSerializer" />.</summary>
      <returns>The JsonSerializer used during serialization and deserialization.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.BaseJsonMediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext,System.Threading.CancellationToken)">
      <summary>Called during serialization to write an object of the specified type to the specified stream.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="type">The type of the object to write.</param>
      <param name="value">The object to write.</param>
      <param name="writeStream">The stream to write to.</param>
      <param name="content">The <see cref="T:System.Net.Http.HttpContent" /> for the content being written.</param>
      <param name="transportContext">The transport context.</param>
      <param name="cancellationToken">The token to monitor for cancellation.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.BaseJsonMediaTypeFormatter.WriteToStream(System.Type,System.Object,System.IO.Stream,System.Text.Encoding)">
      <summary>Called during serialization to write an object of the specified type to the specified stream.</summary>
      <param name="type">The type of the object to write.</param>
      <param name="value">The object to write.</param>
      <param name="writeStream">The stream to write to.</param>
      <param name="effectiveEncoding">The encoding to use when writing.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.BaseJsonMediaTypeFormatter.CreateJsonWriter(System.Type,System.IO.Stream,System.Text.Encoding)">
      <summary>Called during serialization to get the <see cref="T:Newtonsoft.Json.JsonWriter" />.</summary>
      <returns>The writer to use during serialization.</returns>
      <param name="type">The type of the object to write.</param>
      <param name="writeStream">The stream to write to.</param>
      <param name="effectiveEncoding">The encoding to use when writing.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.BaseJsonMediaTypeFormatter.SerializerSettings">
      <summary>Gets or sets the JsonSerializerSettings used to configure the JsonSerializer.</summary>
      <returns>The JsonSerializerSettings used to configure the JsonSerializer.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.BaseJsonMediaTypeFormatter.MaxDepth">
      <summary>Gets or sets the maximum depth allowed by this formatter.</summary>
      <returns>The maximum depth allowed by this formatter.</returns>
    </member>
    <member name="T:System.Net.Http.Formatting.BsonMediaTypeFormatter">
      <summary>Represents a media type formatter to handle Bson.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.BsonMediaTypeFormatter.#ctor">
      <summary>Initializes a new instance of the<see cref="T:System.Net.Http.Formatting.BsonMediaTypeFormatter" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.BsonMediaTypeFormatter.#ctor(System.Net.Http.Formatting.BsonMediaTypeFormatter)">
      <summary>Initializes a new instance of the<see cref="T:System.Net.Http.Formatting.BsonMediaTypeFormatter" /> class.</summary>
      <param name="formatter">The formatter to copy settings from.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.BsonMediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
      <summary>Called during deserialization to read an object of the specified type from the specified stream.</summary>
      <returns>A task whose result will be the object instance that has been read.</returns>
      <param name="type">The type of the object to read.</param>
      <param name="readStream">The stream from which to read.</param>
      <param name="content">The <see cref="T:System.Net.Http.HttpContent" /> for the content being read.</param>
      <param name="formatterLogger">The logger to log events to.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.BsonMediaTypeFormatter.ReadFromStream(System.Type,System.IO.Stream,System.Text.Encoding,System.Net.Http.Formatting.IFormatterLogger)">
      <summary>Called during deserialization to read an object of the specified type from the specified stream.</summary>
      <returns>The object that has been read.</returns>
      <param name="type">The type of the object to read.</param>
      <param name="readStream">The stream from which to read.</param>
      <param name="effectiveEncoding">The encoding to use when reading.</param>
      <param name="formatterLogger">The logger to log events to.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.BsonMediaTypeFormatter.CreateJsonReader(System.Type,System.IO.Stream,System.Text.Encoding)">
      <summary>Called during deserialization to get the <see cref="T:Newtonsoft.Json.JsonReader" />.</summary>
      <returns>The reader to use during deserialization.</returns>
      <param name="type">The type of the object to read.</param>
      <param name="readStream">The stream from which to read.</param>
      <param name="effectiveEncoding">The encoding to use when reading.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.BsonMediaTypeFormatter.WriteToStream(System.Type,System.Object,System.IO.Stream,System.Text.Encoding)">
      <summary>Called during serialization to write an object of the specified type to the specified stream.</summary>
      <param name="type">The type of the object to write.</param>
      <param name="value">The object to write.</param>
      <param name="writeStream">The stream to write to.</param>
      <param name="effectiveEncoding">The encoding to use when writing.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.BsonMediaTypeFormatter.CreateJsonWriter(System.Type,System.IO.Stream,System.Text.Encoding)">
      <summary>Called during serialization to get the <see cref="T:Newtonsoft.Json.JsonWriter" />.</summary>
      <returns>The writer to use during serialization.</returns>
      <param name="type">The type of the object to write.</param>
      <param name="writeStream">The stream to write to.</param>
      <param name="effectiveEncoding">The encoding to use when writing.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.BsonMediaTypeFormatter.DefaultMediaType">
      <summary>Gets the default media type for Json, namely "application/bson".</summary>
      <returns>The default media type for Json, namely "application/bson".</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.BsonMediaTypeFormatter.MaxDepth">
      <summary>Gets or sets the maximum depth allowed by this formatter.</summary>
      <returns>The maximum depth allowed by this formatter.</returns>
    </member>
    <member name="T:System.Net.Http.HttpContentFormDataExtensions">
      <summary>Extension methods to read HTML form URL-encoded datafrom <see cref="T:System.Net.Http.HttpContent" /> instances.</summary>
    </member>
    <member name="M:System.Net.Http.HttpContentFormDataExtensions.IsFormData(System.Net.Http.HttpContent)">
      <summary>Determines whether the specified content is HTML form URL-encoded data.</summary>
      <returns>true if the specified content is HTML form URL-encoded data; otherwise, false.</returns>
      <param name="content">The content.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentFormDataExtensions.ReadAsFormDataAsync(System.Net.Http.HttpContent)">
      <summary>Asynchronously reads HTML form URL-encoded from an <see cref="T:System.Net.Http.HttpContent" /> instance and stores the results in a <see cref="T:System.Collections.Specialized.NameValueCollection" /> object.</summary>
      <returns>A task object representing the asynchronous operation.</returns>
      <param name="content">The content.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentFormDataExtensions.ReadAsFormDataAsync(System.Net.Http.HttpContent,System.Threading.CancellationToken)">
      <summary>Asynchronously reads HTML form URL-encoded from an <see cref="T:System.Net.Http.HttpContent" /> instance and stores the results in a <see cref="T:System.Collections.Specialized.NameValueCollection" /> object.</summary>
      <returns>A task object representing the asynchronous operation.</returns>
      <param name="content">The content.</param>
      <param name="cancellationToken">The token to cancel the operation.</param>
    </member>
    <member name="T:System.Net.Http.MultipartStreamProvider">
      <summary>Represents a stream provider that examines the headers provided by the MIME multipart parser as part of the MIME multipart extension methods (see <see cref="T:System.Net.Http.HttpContentMultipartExtensions" />) and decides what kind of stream to return for the body part to be written to.</summary>
    </member>
    <member name="M:System.Net.Http.MultipartStreamProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.MultipartStreamProvider" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.MultipartStreamProvider.GetStream(System.Net.Http.HttpContent,System.Net.Http.Headers.HttpContentHeaders)">
      <summary>Gets the stream where to write the body part to. This method is called when a MIME multipart body part has been parsed.</summary>
      <returns>The <see cref="T:System.IO.Stream" /> instance where the message body part is written to.</returns>
      <param name="parent">The content of the HTTP.</param>
      <param name="headers">The header fields describing the body part.</param>
    </member>
    <member name="M:System.Net.Http.MultipartStreamProvider.ExecutePostProcessingAsync">
      <summary>Executes the post processing operation for this <see cref="T:System.Net.Http.MultipartStreamProvider" />.</summary>
      <returns>The asynchronous task for this operation.</returns>
    </member>
    <member name="M:System.Net.Http.MultipartStreamProvider.ExecutePostProcessingAsync(System.Threading.CancellationToken)">
      <summary>Executes the post processing operation for this <see cref="T:System.Net.Http.MultipartStreamProvider" />.</summary>
      <returns>The asynchronous task for this operation.</returns>
      <param name="cancellationToken">The token to cancel the operation.</param>
    </member>
    <member name="P:System.Net.Http.MultipartStreamProvider.Contents">
      <summary>Gets or sets the contents for this <see cref="T:System.Net.Http.MultipartStreamProvider" />.</summary>
      <returns>The contents for this <see cref="T:System.Net.Http.MultipartStreamProvider" />.</returns>
    </member>
    <member name="T:System.Net.Http.MultipartFormDataRemoteStreamProvider">
      <summary>A <see cref="T:System.Net.Http.MultipartStreamProvider" /> implementation suited for use with HTML file uploads for writing file content to a remote storage <see cref="T:System.IO.Stream" />. The stream provider looks at the Content-Disposition header field and determines an output remote <see cref="T:System.IO.Stream" /> based on the presence of a filename parameter. If a filename parameter is present in the Content-Disposition header field, then the body part is written to a remote <see cref="T:System.IO.Stream" /> provided by <see cref="M:System.Net.Http.MultipartFormDataRemoteStreamProvider.GetRemoteStream(System.Net.Http.HttpContent,System.Net.Http.Headers.HttpContentHeaders)" />. Otherwise it is written to a <see cref="T:System.IO.MemoryStream" />.</summary>
    </member>
    <member name="M:System.Net.Http.MultipartFormDataRemoteStreamProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.MultipartFormDataRemoteStreamProvider" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.MultipartFormDataRemoteStreamProvider.GetRemoteStream(System.Net.Http.HttpContent,System.Net.Http.Headers.HttpContentHeaders)">
      <summary>Provides a <see cref="T:System.Net.Http.RemoteStreamInfo" /> for <see cref="M:System.Net.Http.MultipartFormDataRemoteStreamProvider.GetStream(System.Net.Http.HttpContent,System.Net.Http.Headers.HttpContentHeaders)" />. Override this method to provide a remote stream to which the data should be written.</summary>
      <returns>A result specifying a remote stream where the file will be written to and a location where the file can be accessed. It cannot be null and the stream must be writable.</returns>
      <param name="parent">The parent <see cref="T:System.Net.Http.HttpContent" /> MIME multipart instance.</param>
      <param name="headers">The header fields describing the body part's content.</param>
    </member>
    <member name="M:System.Net.Http.MultipartFormDataRemoteStreamProvider.GetStream(System.Net.Http.HttpContent,System.Net.Http.Headers.HttpContentHeaders)" />
    <member name="M:System.Net.Http.MultipartFormDataRemoteStreamProvider.ExecutePostProcessingAsync">
      <summary>Read the non-file contents as form data.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the post processing.</returns>
    </member>
    <member name="M:System.Net.Http.MultipartFormDataRemoteStreamProvider.ExecutePostProcessingAsync(System.Threading.CancellationToken)">
      <summary>Read the non-file contents as form data.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the post processing.</returns>
      <param name="cancellationToken">The token to monitor for cancellation requests.</param>
    </member>
    <member name="P:System.Net.Http.MultipartFormDataRemoteStreamProvider.FileData">
      <summary>Gets a collection of file data passed as part of the multipart form data.</summary>
    </member>
    <member name="P:System.Net.Http.MultipartFormDataRemoteStreamProvider.FormData">
      <summary>Gets a <see cref="T:System.Collections.Specialized.NameValueCollection" /> of form data passed as part of the multipart form data.</summary>
    </member>
    <member name="T:System.Net.Http.MultipartRemoteFileData">
      <summary>Represents a multipart file data for remote storage.</summary>
    </member>
    <member name="M:System.Net.Http.MultipartRemoteFileData.#ctor(System.Net.Http.Headers.HttpContentHeaders,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.MultipartRemoteFileData" /> class.</summary>
      <param name="headers">The headers of the multipart file data.</param>
      <param name="location">The remote file's location.</param>
      <param name="fileName">The remote file's name.</param>
    </member>
    <member name="P:System.Net.Http.MultipartRemoteFileData.FileName">
      <summary>Gets the remote file's name.</summary>
    </member>
    <member name="P:System.Net.Http.MultipartRemoteFileData.Headers">
      <summary>Gets the headers of the multipart file data.</summary>
    </member>
    <member name="P:System.Net.Http.MultipartRemoteFileData.Location">
      <summary>Gets the remote file's location.</summary>
    </member>
    <member name="T:System.Net.Http.RemoteStreamInfo">
      <summary>Represents the result for <see cref="M:System.Net.Http.MultipartFormDataRemoteStreamProvider.GetRemoteStream(System.Net.Http.HttpContent,System.Net.Http.Headers.HttpContentHeaders)" />.</summary>
    </member>
    <member name="M:System.Net.Http.RemoteStreamInfo.#ctor(System.IO.Stream,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.RemoteStreamInfo" /> class.</summary>
      <param name="remoteStream">The remote stream instance where the file will be written to.</param>
      <param name="location">The remote file's location.</param>
      <param name="fileName">The remote file's name.</param>
    </member>
    <member name="P:System.Net.Http.RemoteStreamInfo.FileName">
      <summary>Gets the remote file's location.</summary>
    </member>
    <member name="P:System.Net.Http.RemoteStreamInfo.Location">
      <summary>Gets the remote file's location.</summary>
    </member>
    <member name="P:System.Net.Http.RemoteStreamInfo.RemoteStream">
      <summary>Gets the remote stream instance where the file will be written to.</summary>
    </member>
    <member name="T:System.Net.Http.UnsupportedMediaTypeException">
      <summary> Defines an exception type for signalling that a request's media type was not supported. </summary>
    </member>
    <member name="M:System.Net.Http.UnsupportedMediaTypeException.#ctor(System.String,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Initializes a new instance of the <see cref="T:System.Net.Http.UnsupportedMediaTypeException" /> class. </summary>
      <param name="message">The message that describes the error.</param>
      <param name="mediaType">The unsupported media type.</param>
    </member>
    <member name="P:System.Net.Http.UnsupportedMediaTypeException.MediaType">
      <summary>Gets or sets the media type.</summary>
      <returns>The media type.</returns>
    </member>
    <member name="T:System.Net.Http.InvalidByteRangeException">
      <summary> An exception thrown by <see cref="T:System.Net.Http.ByteRangeStreamContent" /> in case none of the requested ranges  overlap with the current extend of the selected resource. The current extend of the resource is indicated in the ContentRange property. </summary>
    </member>
    <member name="M:System.Net.Http.InvalidByteRangeException.#ctor(System.Net.Http.Headers.ContentRangeHeaderValue)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.InvalidByteRangeException" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.InvalidByteRangeException.#ctor(System.Net.Http.Headers.ContentRangeHeaderValue,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.InvalidByteRangeException" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.InvalidByteRangeException.#ctor(System.Net.Http.Headers.ContentRangeHeaderValue,System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.InvalidByteRangeException" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.InvalidByteRangeException.#ctor(System.Net.Http.Headers.ContentRangeHeaderValue,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.InvalidByteRangeException" /> class.</summary>
    </member>
    <member name="P:System.Net.Http.InvalidByteRangeException.ContentRange">
      <summary> The current extend of the resource indicated in terms of a ContentRange header field. </summary>
    </member>
    <member name="T:System.Net.Http.MultipartRelatedStreamProvider">
      <summary>Represents the provider for the multipart related multistream.</summary>
    </member>
    <member name="M:System.Net.Http.MultipartRelatedStreamProvider.GetStream(System.Net.Http.HttpContent,System.Net.Http.Headers.HttpContentHeaders)">
      <summary>Gets the related stream for the provider.</summary>
      <returns>The content headers.</returns>
      <param name="parent">The parent content.</param>
      <param name="headers">The http content headers.</param>
    </member>
    <member name="M:System.Net.Http.MultipartRelatedStreamProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.MultipartRelatedStreamProvider" /> class.</summary>
    </member>
    <member name="P:System.Net.Http.MultipartRelatedStreamProvider.RootContent">
      <summary>Gets the root content of the <see cref="T:System.Net.Http.MultipartRelatedStreamProvider" />.</summary>
      <returns>The root content of the <see cref="T:System.Net.Http.MultipartRelatedStreamProvider" />.</returns>
    </member>
    <member name="T:System.Net.Http.MultipartFileData">
      <summary>Represents a multipart file data.</summary>
    </member>
    <member name="M:System.Net.Http.MultipartFileData.#ctor(System.Net.Http.Headers.HttpContentHeaders,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.MultipartFileData" /> class.</summary>
      <param name="headers">The headers of the multipart file data.</param>
      <param name="localFileName">The name of the local file for the multipart file data.</param>
    </member>
    <member name="P:System.Net.Http.MultipartFileData.Headers">
      <summary>Gets or sets the headers of the multipart file data.</summary>
      <returns>The headers of the multipart file data.</returns>
    </member>
    <member name="P:System.Net.Http.MultipartFileData.LocalFileName">
      <summary>Gets or sets the name of the local file for the multipart file data.</summary>
      <returns>The name of the local file for the multipart file data.</returns>
    </member>
    <member name="T:System.Net.Http.ObjectContent">
      <summary> Contains a value as well as an associated <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> that will be used to serialize the value when writing this content. </summary>
    </member>
    <member name="M:System.Net.Http.ObjectContent.#ctor(System.Type,System.Object,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.ObjectContent" /> class.</summary>
      <param name="type">The type of object this instance will contain.</param>
      <param name="value">The value of the object this instance will contain.</param>
      <param name="formatter">The formatter to use when serializing the value.</param>
    </member>
    <member name="M:System.Net.Http.ObjectContent.#ctor(System.Type,System.Object,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.ObjectContent" /> class.</summary>
      <param name="type">The type of object this instance will contain.</param>
      <param name="value">The value of the object this instance will contain.</param>
      <param name="formatter">The formatter to use when serializing the value.</param>
      <param name="mediaType">The authoritative value of the Content-Type header.</param>
    </member>
    <member name="M:System.Net.Http.ObjectContent.#ctor(System.Type,System.Object,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Initializes a new instance of the <see cref="T:System.Net.Http.ObjectContent" /> class. </summary>
      <param name="type">The type of object this instance will contain.</param>
      <param name="value">The value of the object this instance will contain.</param>
      <param name="formatter">The formatter to use when serializing the value.</param>
      <param name="mediaType">The authoritative value of the Content-Type header. Can be null, in which case the default content type of the formatter will be used.</param>
    </member>
    <member name="M:System.Net.Http.ObjectContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
      <summary>Asynchronously serializes the object's content to the given stream.</summary>
      <returns>The task object representing the asynchronous operation.</returns>
      <param name="stream">The stream to write to.</param>
      <param name="context">The associated <see cref="T:System.Net.TransportContext" />.</param>
    </member>
    <member name="M:System.Net.Http.ObjectContent.TryComputeLength(System.Int64@)">
      <summary>Computes the length of the stream if possible.</summary>
      <returns>true if the length has been computed; otherwise, false.</returns>
      <param name="length">Receives the computed length of the stream.</param>
    </member>
    <member name="P:System.Net.Http.ObjectContent.ObjectType">
      <summary>Gets the type of object managed by this <see cref="T:System.Net.Http.ObjectContent" /> instance.</summary>
      <returns>The object type.</returns>
    </member>
    <member name="P:System.Net.Http.ObjectContent.Formatter">
      <summary>Gets the media-type formatter associated with this content instance.</summary>
      <returns>The media type formatter associated with this content instance.</returns>
    </member>
    <member name="P:System.Net.Http.ObjectContent.Value">
      <summary>Gets or sets the value of the content.</summary>
      <returns>The content value.</returns>
    </member>
    <member name="T:System.Net.Http.ObjectContent`1">
      <summary> Generic form of <see cref="T:System.Net.Http.ObjectContent" />. </summary>
      <typeparam name="T">The type of object this  class will contain.</typeparam>
    </member>
    <member name="M:System.Net.Http.ObjectContent`1.#ctor(`0,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.ObjectContent`1" /> class.</summary>
      <param name="value">The value of the object this instance will contain.</param>
      <param name="formatter">The formatter to use when serializing the value.</param>
    </member>
    <member name="M:System.Net.Http.ObjectContent`1.#ctor(`0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.ObjectContent`1" /> class.</summary>
      <param name="value">The value of the object this instance will contain.</param>
      <param name="formatter">The formatter to use when serializing the value.</param>
      <param name="mediaType">The authoritative value of the Content-Type header.</param>
    </member>
    <member name="M:System.Net.Http.ObjectContent`1.#ctor(`0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Initializes a new instance of the &lt;see cref="T:System.Net.Http.ObjectContent`1" /&gt; class. </summary>
      <param name="value">The value of the object this instance will contain.</param>
      <param name="formatter">The formatter to use when serializing the value.</param>
      <param name="mediaType">The authoritative value of the Content-Type header. Can be null, in which case the default content type of the formatter will be used.</param>
    </member>
    <member name="T:System.Net.Http.PushStreamContent">
      <summary>Enables scenarios where a data producer wants to write directly (either synchronously or asynchronously) using a stream.</summary>
    </member>
    <member name="M:System.Net.Http.PushStreamContent.#ctor(System.Action{System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext})">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.PushStreamContent" /> class.</summary>
      <param name="onStreamAvailable">An action that is called when an output stream is available, allowing the action to write to it directly. </param>
    </member>
    <member name="M:System.Net.Http.PushStreamContent.#ctor(System.Func{System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext,System.Threading.Tasks.Task})">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.PushStreamContent" /> class.</summary>
      <param name="onStreamAvailable">An action that is called when an output stream is available, allowing the action to write to it directly.</param>
    </member>
    <member name="M:System.Net.Http.PushStreamContent.#ctor(System.Action{System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext},System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.PushStreamContent" /> class.</summary>
      <param name="onStreamAvailable">An action that is called when an output stream is available, allowing the action to write to it directly.</param>
      <param name="mediaType">The media type.</param>
    </member>
    <member name="M:System.Net.Http.PushStreamContent.#ctor(System.Func{System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext,System.Threading.Tasks.Task},System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.PushStreamContent" /> class.</summary>
      <param name="onStreamAvailable">An action that is called when an output stream is available, allowing the action to write to it directly.</param>
      <param name="mediaType">The media type.</param>
    </member>
    <member name="M:System.Net.Http.PushStreamContent.#ctor(System.Action{System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext},System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.PushStreamContent" /> class.</summary>
      <param name="onStreamAvailable">An action that is called when an output stream is available, allowing the action to write to it directly.</param>
      <param name="mediaType">The media type.</param>
    </member>
    <member name="M:System.Net.Http.PushStreamContent.#ctor(System.Func{System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext,System.Threading.Tasks.Task},System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.PushStreamContent" /> class.</summary>
      <param name="onStreamAvailable">An action that is called when an output stream is available, allowing the action to write to it directly.</param>
      <param name="mediaType">The media type.</param>
    </member>
    <member name="M:System.Net.Http.PushStreamContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
      <summary>Asynchronously serializes the push content into stream.</summary>
      <returns>The serialized push content.</returns>
      <param name="stream">The stream where the push content will be serialized.</param>
      <param name="context">The context.</param>
    </member>
    <member name="M:System.Net.Http.PushStreamContent.TryComputeLength(System.Int64@)">
      <summary>Determines whether the stream content has a valid length in bytes.</summary>
      <returns>true if length is a valid length; otherwise, false.</returns>
      <param name="length">The length in bytes of the stream content.</param>
    </member>
    <member name="T:System.Net.Http.HttpClientFactory">
      <summary>Represents the factory for creating new instance of <see cref="T:System.Net.Http.HttpClient" />.</summary>
    </member>
    <member name="M:System.Net.Http.HttpClientFactory.Create(System.Net.Http.DelegatingHandler[])">
      <summary>Creates a new instance of the <see cref="T:System.Net.Http.HttpClient" />.</summary>
      <returns>A new instance of the <see cref="T:System.Net.Http.HttpClient" />.</returns>
      <param name="handlers">The list of HTTP handler that delegates the processing of HTTP response messages to another handler.</param>
    </member>
    <member name="M:System.Net.Http.HttpClientFactory.Create(System.Net.Http.HttpMessageHandler,System.Net.Http.DelegatingHandler[])">
      <summary>Creates a new instance of the <see cref="T:System.Net.Http.HttpClient" />.</summary>
      <returns>A new instance of the <see cref="T:System.Net.Http.HttpClient" />.</returns>
      <param name="innerHandler">The inner handler which is responsible for processing the HTTP response messages.</param>
      <param name="handlers">The list of HTTP handler that delegates the processing of HTTP response messages to another handler.</param>
    </member>
    <member name="M:System.Net.Http.HttpClientFactory.CreatePipeline(System.Net.Http.HttpMessageHandler,System.Collections.Generic.IEnumerable{System.Net.Http.DelegatingHandler})">
      <summary>Creates a new instance of the <see cref="T:System.Net.Http.HttpClient" /> which should be pipelined.</summary>
      <returns>A new instance of the <see cref="T:System.Net.Http.HttpClient" /> which should be pipelined.</returns>
      <param name="innerHandler">The inner handler which is responsible for processing the HTTP response messages.</param>
      <param name="handlers">The list of HTTP handler that delegates the processing of HTTP response messages to another handler.</param>
    </member>
    <member name="T:System.Net.Http.Handlers.HttpProgressEventArgs">
      <summary>Represents the event arguments for the HTTP progress.</summary>
    </member>
    <member name="M:System.Net.Http.Handlers.HttpProgressEventArgs.#ctor(System.Int32,System.Object,System.Int64,System.Nullable{System.Int64})">
      <summary> Initializes a new instance of the <see cref="T:System.Net.Http.Handlers.HttpProgressEventArgs" /> class. </summary>
      <param name="progressPercentage">The percentage of the progress.</param>
      <param name="userToken">The user token.</param>
      <param name="bytesTransferred">The number of bytes transferred.</param>
      <param name="totalBytes">The total number of bytes transferred.</param>
    </member>
    <member name="P:System.Net.Http.Handlers.HttpProgressEventArgs.BytesTransferred" />
    <member name="P:System.Net.Http.Handlers.HttpProgressEventArgs.TotalBytes" />
    <member name="T:System.Net.Http.Handlers.ProgressMessageHandler">
      <summary>Generates progress notification for both request entities being uploaded and response entities being downloaded.</summary>
    </member>
    <member name="M:System.Net.Http.Handlers.ProgressMessageHandler.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Handlers.ProgressMessageHandler" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.Handlers.ProgressMessageHandler.#ctor(System.Net.Http.HttpMessageHandler)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Handlers.ProgressMessageHandler" /> class.</summary>
      <param name="innerHandler">The inner message handler.</param>
    </member>
    <member name="M:System.Net.Http.Handlers.ProgressMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>Sends the specified progress message to an HTTP server for delivery.</summary>
      <returns>The sent progress message.</returns>
      <param name="request">The request.</param>
      <param name="cancellationToken">The cancellation token.</param>
    </member>
    <member name="M:System.Net.Http.Handlers.ProgressMessageHandler.OnHttpRequestProgress(System.Net.Http.HttpRequestMessage,System.Net.Http.Handlers.HttpProgressEventArgs)">
      <summary>Raises the event that handles the request of the progress.</summary>
      <param name="request">The request.</param>
      <param name="e">The event handler for the request.</param>
    </member>
    <member name="M:System.Net.Http.Handlers.ProgressMessageHandler.OnHttpResponseProgress(System.Net.Http.HttpRequestMessage,System.Net.Http.Handlers.HttpProgressEventArgs)">
      <summary>Raises the event that handles the response of the progress.</summary>
      <param name="request">The request.</param>
      <param name="e">The event handler for the request.</param>
    </member>
    <member name="E:System.Net.Http.Handlers.ProgressMessageHandler.HttpSendProgress">
      <summary>Occurs when event entities are being uploaded.</summary>
    </member>
    <member name="E:System.Net.Http.Handlers.ProgressMessageHandler.HttpReceiveProgress">
      <summary>Occurs when event entities are being downloaded.</summary>
    </member>
    <member name="T:System.Net.Http.HttpResponseHeadersExtensions">
      <summary> Provides extension methods for the <see cref="T:System.Net.Http.Headers.HttpResponseHeaders" /> class. </summary>
    </member>
    <member name="M:System.Net.Http.HttpResponseHeadersExtensions.AddCookies(System.Net.Http.Headers.HttpResponseHeaders,System.Collections.Generic.IEnumerable{System.Net.Http.Headers.CookieHeaderValue})">
      <summary> Adds cookies to a response. Each Set-Cookie header is  represented as one <see cref="T:System.Net.Http.Headers.CookieHeaderValue" /> instance. A <see cref="T:System.Net.Http.Headers.CookieHeaderValue" /> contains information about the domain, path, and other cookie information as well as one or more <see cref="T:System.Net.Http.Headers.CookieState" /> instances. Each <see cref="T:System.Net.Http.Headers.CookieState" /> instance contains a cookie name and whatever cookie state is associate with that name. The state is in the form of a  <see cref="T:System.Collections.Specialized.NameValueCollection" /> which on the wire is encoded as HTML Form URL-encoded data.  This representation allows for multiple related "cookies" to be carried within the same Cookie header while still providing separation between each cookie state. A sample Cookie header is shown below. In this example, there are two <see cref="T:System.Net.Http.Headers.CookieState" /> with names state1 and state2 respectively. Further, each cookie state contains two name/value pairs (name1/value1 and name2/value2) and (name3/value3 and name4/value4). &lt;code&gt; Set-Cookie: state1:name1=value1&amp;amp;name2=value2; state2:name3=value3&amp;amp;name4=value4; domain=domain1; path=path1; &lt;/code&gt;</summary>
      <param name="headers">The response headers</param>
      <param name="cookies">The cookie values to add to the response.</param>
    </member>
    <member name="T:System.Net.Http.HttpRequestHeadersExtensions">
      <summary>Provides extension methods for the <see cref="T:System.Net.Http.Headers.HttpRequestHeaders" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.HttpRequestHeadersExtensions.GetCookies(System.Net.Http.Headers.HttpRequestHeaders)">
      <summary>Gets any cookie headers present in the request.</summary>
      <returns>A collection of <see cref="T:System.Net.Http.Headers.CookieHeaderValue" /> instances.</returns>
      <param name="headers">The request headers.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestHeadersExtensions.GetCookies(System.Net.Http.Headers.HttpRequestHeaders,System.String)">
      <summary>Gets any cookie headers present in the request that contain a cookie state whose name that matches the specified value.</summary>
      <returns>A collection of <see cref="T:System.Net.Http.Headers.CookieHeaderValue" /> instances.</returns>
      <param name="headers">The request headers.</param>
      <param name="name">The cookie state name to match.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.FormDataCollection">
      <summary>Represent the collection of form data.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.FormDataCollection.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
      <summary>Initializes a new instance of <see cref="T:System.Net.Http.Formatting.FormDataCollection" /> class.</summary>
      <param name="pairs">The pairs.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.FormDataCollection.#ctor(System.Uri)">
      <summary>Initializes a new instance of <see cref="T:System.Net.Http.Formatting.FormDataCollection" /> class.</summary>
      <param name="uri">The URI</param>
    </member>
    <member name="M:System.Net.Http.Formatting.FormDataCollection.#ctor(System.String)">
      <summary>Initializes a new instance of <see cref="T:System.Net.Http.Formatting.FormDataCollection" /> class.</summary>
      <param name="query">The query.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.FormDataCollection.ReadAsNameValueCollection">
      <summary>Reads the collection of form data as a collection of name value.</summary>
      <returns>The collection of form data as a collection of name value.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.FormDataCollection.Get(System.String)">
      <summary>Gets the collection of form data.</summary>
      <returns>The collection of form data.</returns>
      <param name="key">The key.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.FormDataCollection.GetValues(System.String)">
      <summary>Gets the values of the collection of form data.</summary>
      <returns>The values of the collection of form data.</returns>
      <param name="key">The key.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.FormDataCollection.GetEnumerator">
      <summary>Gets an enumerable that iterates through the collection.</summary>
      <returns>The enumerable that iterates through the collection.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.FormDataCollection.Item(System.String)">
      <summary>Gets values associated with a given key. If there are multiple values, they're concatenated.</summary>
      <returns>Values associated with a given key. If there are multiple values, they're concatenated.</returns>
    </member>
    <member name="T:System.Net.Http.Formatting.ContentNegotiationResult">
      <summary> Represents the result of content negotiation performed using &lt;see cref="M:System.Net.Http.Formatting.IContentNegotiator.Negotiate(System.Type,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})" /&gt;</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.ContentNegotiationResult.#ctor(System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Create the content negotiation result object. </summary>
      <param name="formatter">The formatter.</param>
      <param name="mediaType">The preferred media type. Can be null.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.ContentNegotiationResult.Formatter">
      <summary> The formatter chosen for serialization. </summary>
    </member>
    <member name="P:System.Net.Http.Formatting.ContentNegotiationResult.MediaType">
      <summary> The media type that is associated with the formatter chosen for serialization. Can be null. </summary>
    </member>
    <member name="T:System.Net.Http.Formatting.IFormatterLogger">
      <summary>Specifies a callback interface that a formatter can use to log errors while reading.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.IFormatterLogger.LogError(System.String,System.String)">
      <summary>Logs an error.</summary>
      <param name="errorPath">The path to the member for which the error is being logged.</param>
      <param name="errorMessage">The error message to be logged.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.IFormatterLogger.LogError(System.String,System.Exception)">
      <summary>Logs an error.</summary>
      <param name="errorPath">The path to the member for which the error is being logged.</param>
      <param name="exception">The error message.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.IRequiredMemberSelector">
      <summary>Defines method that determines whether a given member is required on deserialization.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.IRequiredMemberSelector.IsRequiredMember(System.Reflection.MemberInfo)">
      <summary>Determines whether a given member is required on deserialization.</summary>
      <returns>true if <paramref name="member" /> should be treated as a required member; otherwise false.</returns>
      <param name="member">The <see cref="T:System.Reflection.MemberInfo" /> to be deserialized.</param>
    </member>
    <member name="T:System.Net.Http.Headers.CookieHeaderValue">
      <summary>Provides value for the cookie header.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.CookieHeaderValue.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.CookieHeaderValue" /> class.</summary>
      <param name="name">The value of the name.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:System.Net.Http.Headers.CookieHeaderValue.#ctor(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.CookieHeaderValue" /> class.</summary>
      <param name="name">The value of the name.</param>
      <param name="values">The values.</param>
    </member>
    <member name="M:System.Net.Http.Headers.CookieHeaderValue.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.CookieHeaderValue" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.CookieHeaderValue.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.CookieHeaderValue.Clone">
      <summary>Creates a shallow copy of the cookie value.</summary>
      <returns>A shallow copy of the cookie value.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.CookieHeaderValue.TryParse(System.String,System.Net.Http.Headers.CookieHeaderValue@)">
      <summary>Indicates a value whether the string representation will be converted.</summary>
      <returns>true if the string representation will be converted; otherwise, false.</returns>
      <param name="input">The input value.</param>
      <param name="parsedValue">The parsed value to convert.</param>
    </member>
    <member name="P:System.Net.Http.Headers.CookieHeaderValue.Cookies">
      <summary>Gets a collection of cookies sent by the client.</summary>
      <returns>A collection object representing the client’s cookie variables.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieHeaderValue.Expires">
      <summary>Gets or sets the expiration date and time for the cookie.</summary>
      <returns>The time of day (on the client) at which the cookie expires.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieHeaderValue.MaxAge">
      <summary>Gets or sets the maximum age permitted for a resource.</summary>
      <returns>The maximum age permitted for a resource.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieHeaderValue.Domain">
      <summary>Gets or sets the domain to associate the cookie with.</summary>
      <returns>The name of the domain to associate the cookie with.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieHeaderValue.Path">
      <summary>Gets or sets the virtual path to transmit with the current cookie.</summary>
      <returns>The virtual path to transmit with the cookie.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieHeaderValue.Secure">
      <summary>Gets or sets a value indicating whether to transmit the cookie using Secure Sockets Layer (SSL)—that is, over HTTPS only.</summary>
      <returns>true to transmit the cookie over an SSL connection (HTTPS); otherwise, false.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieHeaderValue.HttpOnly">
      <summary>Gets or sets a value that specifies whether a cookie is accessible by client-side script.</summary>
      <returns>true if the cookie has the HttpOnly attribute and cannot be accessed through a client-side script; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieHeaderValue.Item(System.String)">
      <summary>Gets a shortcut to the cookie property.</summary>
      <returns>The cookie value.</returns>
    </member>
    <member name="T:System.Net.Http.Headers.CookieState">
      <summary>Contains cookie name and its associated cookie state.</summary>
    </member>
    <member name="M:System.Net.Http.Headers.CookieState.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.CookieState" /> class.</summary>
      <param name="name">The name of the cookie.</param>
    </member>
    <member name="M:System.Net.Http.Headers.CookieState.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.CookieState" /> class.</summary>
      <param name="name">The name of the cookie.</param>
      <param name="value">The value of the cookie.</param>
    </member>
    <member name="M:System.Net.Http.Headers.CookieState.#ctor(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Headers.CookieState" /> class.</summary>
      <param name="name">The name of the cookie.</param>
      <param name="values">The collection of name-value pair for the cookie.</param>
    </member>
    <member name="M:System.Net.Http.Headers.CookieState.ToString">
      <summary>Returns the string representation the current object.</summary>
      <returns>The string representation the current object.</returns>
    </member>
    <member name="M:System.Net.Http.Headers.CookieState.Clone">
      <summary>Returns a new object that is a copy of the current instance.</summary>
      <returns>A new object that is a copy of the current instance.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieState.Name">
      <summary>Gets or sets the name of the cookie.</summary>
      <returns>The name of the cookie.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieState.Value">
      <summary>Gets or sets the cookie value, if cookie data is a simple string value.</summary>
      <returns>The value of the cookie. </returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieState.Values">
      <summary>Gets or sets the collection of name-value pair, if the cookie data is structured.</summary>
      <returns>The collection of name-value pair for the cookie.</returns>
    </member>
    <member name="P:System.Net.Http.Headers.CookieState.Item(System.String)">
      <summary>Gets or sets the cookie value with the specified cookie name, if the cookie data is structured.</summary>
      <returns>The cookie value with the specified cookie name.</returns>
    </member>
    <member name="T:System.Net.Http.HttpClientExtensions">
      <summary> Extension methods that aid in making formatted requests using <see cref="T:System.Net.Http.HttpClient" />. </summary>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsJsonAsync``1(System.Net.Http.HttpClient,System.String,``0)">
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsJsonAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Threading.CancellationToken)">
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsJsonAsync``1(System.Net.Http.HttpClient,System.Uri,``0)">
      <summary> Sends a POST request as an asynchronous operation to the specified Uri with the given value serialized as JSON. </summary>
      <returns>A task object representing the asynchronous operation.</returns>
      <param name="client">The client used to make the request.</param>
      <param name="requestUri">The Uri the request is sent to.</param>
      <param name="value">The value that will be placed in the request's entity body.</param>
      <typeparam name="T">The type of value.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsJsonAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Threading.CancellationToken)">
      <summary> Sends a POST request as an asynchronous operation to the specified Uri with the given value serialized as JSON. </summary>
      <returns>A task object representing the asynchronous operation.</returns>
      <param name="client">The client used to make the request.</param>
      <param name="requestUri">The Uri the request is sent to.</param>
      <param name="value">The value that will be placed in the request's entity body.</param>
      <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
      <typeparam name="T">The type of value.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsXmlAsync``1(System.Net.Http.HttpClient,System.String,``0)">
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsXmlAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Threading.CancellationToken)">
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsXmlAsync``1(System.Net.Http.HttpClient,System.Uri,``0)">
      <summary> Sends a POST request as an asynchronous operation to the specified Uri with the given value serialized as XML. </summary>
      <returns>A task object representing the asynchronous operation.</returns>
      <param name="client">The client used to make the request.</param>
      <param name="requestUri">The Uri the request is sent to.</param>
      <param name="value">The value that will be placed in the request's entity body.</param>
      <typeparam name="T">The type of value.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsXmlAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Threading.CancellationToken)">
      <summary> Sends a POST request as an asynchronous operation to the specified Uri with the given value serialized as XML. </summary>
      <returns>A task object representing the asynchronous operation.</returns>
      <param name="client">The client used to make the request.</param>
      <param name="requestUri">The Uri the request is sent to.</param>
      <param name="value">The value that will be placed in the request's entity body.</param>
      <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
      <typeparam name="T">The type of value.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter)">
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Threading.CancellationToken)">
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.Threading.CancellationToken)">
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,System.Threading.CancellationToken)">
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary> Sends a POST request as an asynchronous operation to the specified Uri with value serialized using the given formatter. </summary>
      <returns>A task object representing the asynchronous operation.</returns>
      <param name="client">The client used to make the request.</param>
      <param name="requestUri">The Uri the request is sent to.</param>
      <param name="value">The value that will be placed in the request's entity body.</param>
      <param name="formatter">The formatter used to serialize the value.</param>
      <typeparam name="T">The type of value.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Threading.CancellationToken)">
      <summary> Sends a POST request as an asynchronous operation to the specified Uri with value serialized using the given formatter. </summary>
      <returns>A task object representing the asynchronous operation.</returns>
      <param name="client">The client used to make the request.</param>
      <param name="requestUri">The Uri the request is sent to.</param>
      <param name="value">The value that will be placed in the request's entity body.</param>
      <param name="formatter">The formatter used to serialize the value.</param>
      <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
      <typeparam name="T">The type of value.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
      <summary> Sends a POST request as an asynchronous operation to the specified Uri with value serialized using the given formatter. </summary>
      <returns>A task object representing the asynchronous operation.</returns>
      <param name="client">The client used to make the request.</param>
      <param name="requestUri">The Uri the request is sent to.</param>
      <param name="value">The value that will be placed in the request's entity body.</param>
      <param name="formatter">The formatter used to serialize the value.</param>
      <param name="mediaType">The authoritative value of the request's content's Content-Type header. Can be null in which case the &lt;paramref name="formatter"&gt;formatter's&lt;/paramref&gt; default content type will be used.</param>
      <typeparam name="T">The type of value.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.Threading.CancellationToken)">
      <summary> Sends a POST request as an asynchronous operation to the specified Uri with value serialized using the given formatter. </summary>
      <returns>A task object representing the asynchronous operation.</returns>
      <param name="client">The client used to make the request.</param>
      <param name="requestUri">The Uri the request is sent to.</param>
      <param name="value">The value that will be placed in the request's entity body.</param>
      <param name="formatter">The formatter used to serialize the value.</param>
      <param name="mediaType">The authoritative value of the request's content's Content-Type header. Can be null in which case the &lt;paramref name="formatter"&gt;formatter's&lt;/paramref&gt; default content type will be used.</param>
      <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
      <typeparam name="T">The type of value.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PostAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,System.Threading.CancellationToken)">
      <summary> Sends a POST request as an asynchronous operation to the specified Uri with value serialized using the given formatter. </summary>
      <returns>A task object representing the asynchronous operation.</returns>
      <param name="client">The client used to make the request.</param>
      <param name="requestUri">The Uri the request is sent to.</param>
      <param name="value">The value that will be placed in the request's entity body.</param>
      <param name="formatter">The formatter used to serialize the value.</param>
      <param name="mediaType">The authoritative value of the request's content's Content-Type header. Can be null in which case the &lt;paramref name="formatter"&gt;formatter's&lt;/paramref&gt; default content type will be used.</param>
      <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
      <typeparam name="T">The type of value.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsJsonAsync``1(System.Net.Http.HttpClient,System.String,``0)">
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsJsonAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Threading.CancellationToken)">
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsJsonAsync``1(System.Net.Http.HttpClient,System.Uri,``0)">
      <summary> Sends a PUT request as an asynchronous operation to the specified Uri with the given value serialized as JSON. </summary>
      <returns>A task object representing the asynchronous operation.</returns>
      <param name="client">The client used to make the request.</param>
      <param name="requestUri">The Uri the request is sent to.</param>
      <param name="value">The value that will be placed in the request's entity body.</param>
      <typeparam name="T">The type of value.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsJsonAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Threading.CancellationToken)">
      <summary> Sends a PUT request as an asynchronous operation to the specified Uri with the given value serialized as JSON. </summary>
      <returns>A task object representing the asynchronous operation.</returns>
      <param name="client">The client used to make the request.</param>
      <param name="requestUri">The Uri the request is sent to.</param>
      <param name="value">The value that will be placed in the request's entity body.</param>
      <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
      <typeparam name="T">The type of value.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsXmlAsync``1(System.Net.Http.HttpClient,System.String,``0)">
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsXmlAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Threading.CancellationToken)">
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsXmlAsync``1(System.Net.Http.HttpClient,System.Uri,``0)">
      <summary> Sends a PUT request as an asynchronous operation to the specified Uri with the given value serialized as XML. </summary>
      <returns>A task object representing the asynchronous operation.</returns>
      <param name="client">The client used to make the request.</param>
      <param name="requestUri">The Uri the request is sent to.</param>
      <param name="value">The value that will be placed in the request's entity body.</param>
      <typeparam name="T">The type of value.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsXmlAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Threading.CancellationToken)">
      <summary> Sends a PUT request as an asynchronous operation to the specified Uri with the given value serialized as XML. </summary>
      <returns>A task object representing the asynchronous operation.</returns>
      <param name="client">The client used to make the request.</param>
      <param name="requestUri">The Uri the request is sent to.</param>
      <param name="value">The value that will be placed in the request's entity body.</param>
      <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
      <typeparam name="T">The type of value.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter)">
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Threading.CancellationToken)">
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.Threading.CancellationToken)">
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.String,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,System.Threading.CancellationToken)">
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary> Sends a PUT request as an asynchronous operation to the specified Uri with value serialized using the given formatter. </summary>
      <returns>A task object representing the asynchronous operation.</returns>
      <param name="client">The client used to make the request.</param>
      <param name="requestUri">The Uri the request is sent to.</param>
      <param name="value">The value that will be placed in the request's entity body.</param>
      <param name="formatter">The formatter used to serialize the value.</param>
      <typeparam name="T">The type of value.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Threading.CancellationToken)">
      <summary> Sends a PUT request as an asynchronous operation to the specified Uri with value serialized using the given formatter. </summary>
      <returns>A task object representing the asynchronous operation.</returns>
      <param name="client">The client used to make the request.</param>
      <param name="requestUri">The Uri the request is sent to.</param>
      <param name="value">The value that will be placed in the request's entity body.</param>
      <param name="formatter">The formatter used to serialize the value.</param>
      <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
      <typeparam name="T">The type of value.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
      <summary> Sends a PUT request as an asynchronous operation to the specified Uri with value serialized using the given formatter. </summary>
      <returns>A task object representing the asynchronous operation.</returns>
      <param name="client">The client used to make the request.</param>
      <param name="requestUri">The Uri the request is sent to.</param>
      <param name="value">The value that will be placed in the request's entity body.</param>
      <param name="formatter">The formatter used to serialize the value.</param>
      <param name="mediaType">The authoritative value of the request's content's Content-Type header. Can be null in which case the &lt;paramref name="formatter"&gt;formatter's&lt;/paramref&gt; default content type will be used.</param>
      <typeparam name="T">The type of value.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.Threading.CancellationToken)">
      <summary> Sends a PUT request as an asynchronous operation to the specified Uri with value serialized using the given formatter. </summary>
      <returns>A task object representing the asynchronous operation.</returns>
      <param name="client">The client used to make the request.</param>
      <param name="requestUri">The Uri the request is sent to.</param>
      <param name="value">The value that will be placed in the request's entity body.</param>
      <param name="formatter">The formatter used to serialize the value.</param>
      <param name="mediaType">The authoritative value of the request's content's Content-Type header. Can be null in which case the &lt;paramref name="formatter"&gt;formatter's&lt;/paramref&gt; default content type will be used.</param>
      <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
      <typeparam name="T">The type of value.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpClientExtensions.PutAsync``1(System.Net.Http.HttpClient,System.Uri,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,System.Threading.CancellationToken)">
      <summary> Sends a PUT request as an asynchronous operation to the specified Uri with value serialized using the given formatter. </summary>
      <returns>A task object representing the asynchronous operation.</returns>
      <param name="client">The client used to make the request.</param>
      <param name="requestUri">The Uri the request is sent to.</param>
      <param name="value">The value that will be placed in the request's entity body.</param>
      <param name="formatter">The formatter used to serialize the value.</param>
      <param name="mediaType">The authoritative value of the request's content's Content-Type header. Can be null in which case the &lt;paramref name="formatter"&gt;formatter's&lt;/paramref&gt; default content type will be used.</param>
      <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
      <typeparam name="T">The type of value.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode)" />
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse(System.Net.Http.HttpRequestMessage)" />
    <member name="T:System.Net.Http.Formatting.JsonContractResolver">
      <summary>Represents the default <see cref="T:Newtonsoft.Json.Serialization.IContractResolver" /> used by <see cref="T:System.Net.Http.Formatting.JsonMediaTypeFormatter" />. It uses the formatter's <see cref="T:System.Net.Http.Formatting.IRequiredMemberSelector" /> to select required members and recognizes the <see cref="T:System.SerializableAttribute" /> type annotation.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.JsonContractResolver.#ctor(System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.JsonContractResolver" /> class.</summary>
      <param name="formatter">The formatter to use for resolving required members.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.JsonContractResolver.CreateProperty(System.Reflection.MemberInfo,Newtonsoft.Json.MemberSerialization)">
      <summary>Creates a property on the specified class by using the specified parameters.</summary>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> to create on the specified class by using the specified parameters.</returns>
      <param name="member">The member info.</param>
      <param name="memberSerialization">The member serialization.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.BufferedMediaTypeFormatter">
      <summary>Represents a helper class to allow a synchronous formatter on top of the asynchronous formatter infrastructure.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.BufferedMediaTypeFormatter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.BufferedMediaTypeFormatter" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.BufferedMediaTypeFormatter.#ctor(System.Net.Http.Formatting.BufferedMediaTypeFormatter)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.BufferedMediaTypeFormatter" /> class.</summary>
      <param name="formatter">The <see cref="T:System.Net.Http.Formatting.BufferedMediaTypeFormatter" /> instance to copy settings from.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.BufferedMediaTypeFormatter.WriteToStream(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Threading.CancellationToken)">
      <summary>Writes synchronously to the buffered stream.</summary>
      <param name="type">The type of the object to serialize.</param>
      <param name="value">The object value to write. Can be null.</param>
      <param name="writeStream">The stream to which to write.</param>
      <param name="content">The <see cref="T:System.Net.Http.HttpContent" />, if available. Can be null.</param>
      <param name="cancellationToken">The token to cancel the operation.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.BufferedMediaTypeFormatter.WriteToStream(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent)">
      <summary>Writes synchronously to the buffered stream.</summary>
      <param name="type">The type of the object to serialize.</param>
      <param name="value">The object value to write. Can be null.</param>
      <param name="writeStream">The stream to which to write.</param>
      <param name="content">The <see cref="T:System.Net.Http.HttpContent" />, if available. Can be null.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.BufferedMediaTypeFormatter.ReadFromStream(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger,System.Threading.CancellationToken)">
      <summary>Reads synchronously from the buffered stream.</summary>
      <returns>An object of the given <paramref name="type" />.</returns>
      <param name="type">The type of the object to deserialize.</param>
      <param name="readStream">The stream from which to read.</param>
      <param name="content">The <see cref="T:System.Net.Http.HttpContent" />, if available. Can be null.</param>
      <param name="formatterLogger">The <see cref="T:System.Net.Http.Formatting.IFormatterLogger" /> to log events to.</param>
      <param name="cancellationToken">The token to cancel the operation.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.BufferedMediaTypeFormatter.ReadFromStream(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
      <summary>Reads synchronously from the buffered stream.</summary>
      <returns>An object of the given <paramref name="type" />.</returns>
      <param name="type">The type of the object to deserialize.</param>
      <param name="readStream">The stream from which to read.</param>
      <param name="content">The <see cref="T:System.Net.Http.HttpContent" />, if available. Can be null.</param>
      <param name="formatterLogger">The <see cref="T:System.Net.Http.Formatting.IFormatterLogger" /> to log events to.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.BufferedMediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext)">
      <summary>Writes asynchronously to the buffered stream.</summary>
      <returns>A task object representing the asynchronous operation.</returns>
      <param name="type">The type of the object to serialize.</param>
      <param name="value">The object value to write.  It may be null.</param>
      <param name="writeStream">The stream to which to write.</param>
      <param name="content">The <see cref="T:System.Net.Http.HttpContent" />, if available. Can be null.</param>
      <param name="transportContext">The transport context.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.BufferedMediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext,System.Threading.CancellationToken)">
      <summary>Writes asynchronously to the buffered stream.</summary>
      <returns>A task object representing the asynchronous operation.</returns>
      <param name="type">The type of the object to serialize.</param>
      <param name="value">The object value to write.  It may be null.</param>
      <param name="writeStream">The stream to which to write.</param>
      <param name="content">The <see cref="T:System.Net.Http.HttpContent" />, if available. Can be null.</param>
      <param name="transportContext">The transport context.</param>
      <param name="cancellationToken">The token to cancel the operation.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.BufferedMediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
      <summary>Reads asynchronously from the buffered stream.</summary>
      <returns>A task object representing the asynchronous operation.</returns>
      <param name="type">The type of the object to deserialize.</param>
      <param name="readStream">The stream from which to read.</param>
      <param name="content">The <see cref="T:System.Net.Http.HttpContent" />, if available. Can be null.</param>
      <param name="formatterLogger">The <see cref="T:System.Net.Http.Formatting.IFormatterLogger" /> to log events to.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.BufferedMediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger,System.Threading.CancellationToken)">
      <summary>Reads asynchronously from the buffered stream.</summary>
      <returns>A task object representing the asynchronous operation.</returns>
      <param name="type">The type of the object to deserialize.</param>
      <param name="readStream">The stream from which to read.</param>
      <param name="content">The <see cref="T:System.Net.Http.HttpContent" />, if available. Can be null.</param>
      <param name="formatterLogger">The <see cref="T:System.Net.Http.Formatting.IFormatterLogger" /> to log events to.</param>
      <param name="cancellationToken">The token to cancel the operation.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.BufferedMediaTypeFormatter.BufferSize">
      <summary>Gets or sets the suggested size of buffer to use with streams in bytes.</summary>
      <returns>The suggested size of buffer to use with streams in bytes.</returns>
    </member>
    <member name="T:System.Net.Http.Formatting.DelegatingEnumerable`1">
      <summary> Helper class to serialize &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt; types by delegating them through a concrete implementation."/&amp;gt;. </summary>
      <typeparam name="T">The interface implementing  to proxy.</typeparam>
    </member>
    <member name="M:System.Net.Http.Formatting.DelegatingEnumerable`1.#ctor">
      <summary> Initialize a DelegatingEnumerable. This constructor is necessary for <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> to work. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.DelegatingEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary> Initialize a DelegatingEnumerable with an &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;. This is a helper class to proxy &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt; interfaces for <see cref="T:System.Xml.Serialization.XmlSerializer" />. </summary>
      <param name="source">The &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt; instance to get the enumerator from.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DelegatingEnumerable`1.GetEnumerator">
      <summary> Get the enumerator of the associated &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;. </summary>
      <returns>The enumerator of the &lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt; source.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.DelegatingEnumerable`1.Add(System.Object)">
      <summary> This method is not implemented but is required method for serialization to work. Do not use. </summary>
      <param name="item">The item to add. Unused.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.IContentNegotiator">
      <summary> Performs content negotiation.  This is the process of selecting a response writer (formatter) in compliance with header values in the request. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.IContentNegotiator.Negotiate(System.Type,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary> Performs content negotiating by selecting the most appropriate <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> out of the passed in formatters for the given request that can serialize an object of the given type. </summary>
      <returns>The result of the negotiation containing the most appropriate <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> instance, or null if there is no appropriate formatter.</returns>
      <param name="type">The type to be serialized.</param>
      <param name="request">Request message, which contains the header values used to perform negotiation.</param>
      <param name="formatters">The set of <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> objects from which to choose.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.DefaultContentNegotiator">
      <summary> The default implementation of <see cref="T:System.Net.Http.Formatting.IContentNegotiator" />, which is used to select a <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> for an <see cref="T:System.Net.Http.HttpRequestMessage" /> or <see cref="T:System.Net.Http.HttpResponseMessage" />. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.DefaultContentNegotiator" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.DefaultContentNegotiator" /> class.</summary>
      <param name="excludeMatchOnTypeOnly">true to exclude formatters that match only on the object type; otherwise, false.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.Negotiate(System.Type,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>Performs content negotiating by selecting the most appropriate <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> out of the passed in <paramref name="formatters" /> for the given <paramref name="request" /> that can serialize an object of the given <paramref name="type" />.</summary>
      <returns>The result of the negotiation containing the most appropriate <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> instance, or null if there is no appropriate formatter.</returns>
      <param name="type">The type to be serialized.</param>
      <param name="request">The request.</param>
      <param name="formatters">The set of <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> objects from which to choose.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.ComputeFormatterMatches(System.Type,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>Determines how well each formatter matches an HTTP request.</summary>
      <returns>Returns a collection of <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" /> objects that represent all of the matches.</returns>
      <param name="type">The type to be serialized.</param>
      <param name="request">The request.</param>
      <param name="formatters">The set of <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> objects from which to choose.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.SelectResponseMediaTypeFormatter(System.Collections.Generic.ICollection{System.Net.Http.Formatting.MediaTypeFormatterMatch})">
      <summary>Select the best match among the candidate matches found.</summary>
      <returns>Returns the <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" /> object that represents the best match. </returns>
      <param name="matches">The collection of matches.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.SelectResponseCharacterEncoding(System.Net.Http.HttpRequestMessage,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Determines the best character encoding for writing the response.</summary>
      <returns>Returns the <see cref="T:System.Text.Encoding" /> that is the best match.</returns>
      <param name="request">The request.</param>
      <param name="formatter">The selected media formatter.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.MatchMediaTypeMapping(System.Net.Http.HttpRequestMessage,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Matches a request against the <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> objects in a media-type formatter.</summary>
      <returns>Returns a <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" /> object that indicates the quality of the match, or null if there is no match.</returns>
      <param name="request">The request to match.</param>
      <param name="formatter">The media-type formatter.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.MatchAcceptHeader(System.Collections.Generic.IEnumerable{System.Net.Http.Headers.MediaTypeWithQualityHeaderValue},System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Matches a set of Accept header fields against the media types that a formatter supports.</summary>
      <returns>Returns a <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" /> object that indicates the quality of the match, or null if there is no match.</returns>
      <param name="sortedAcceptValues">A list of Accept header values, sorted in descending order of q factor. You can create this list by calling the <see cref="M:System.Net.Http.Formatting.DefaultContentNegotiator.SortStringWithQualityHeaderValuesByQFactor(System.Collections.Generic.ICollection{System.Net.Http.Headers.StringWithQualityHeaderValue})" /> method.</param>
      <param name="formatter">The formatter to match against.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.MatchRequestMediaType(System.Net.Http.HttpRequestMessage,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Match the content type of a request against the media types that a formatter supports.</summary>
      <returns>Returns a <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" /> object that indicates the quality of the match, or null if there is no match.</returns>
      <param name="request">The request to match.</param>
      <param name="formatter">The formatter to match against.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.ShouldMatchOnType(System.Collections.Generic.IEnumerable{System.Net.Http.Headers.MediaTypeWithQualityHeaderValue})">
      <summary> Determine whether to match on type or not. This is used to determine whether to generate a 406 response or use the default media type formatter in case there is no match against anything in the request. If ExcludeMatchOnTypeOnly is true  then we don't match on type unless there are no accept headers. </summary>
      <returns>True if not ExcludeMatchOnTypeOnly and accept headers with a q-factor bigger than 0.0 are present.</returns>
      <param name="sortedAcceptValues">The sorted accept header values to match.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.MatchType(System.Type,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Selects the first supported media type of a formatter.</summary>
      <returns>Returns a <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" /> with <see cref="P:System.Net.Http.Formatting.MediaTypeFormatterMatch.Ranking" /> set to MatchOnCanWriteType, or null if there is no match. A <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" /> indicating the quality of the match or null is no match.</returns>
      <param name="type">The type to match.</param>
      <param name="formatter">The formatter to match against.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.SortMediaTypeWithQualityHeaderValuesByQFactor(System.Collections.Generic.ICollection{System.Net.Http.Headers.MediaTypeWithQualityHeaderValue})">
      <summary>Sorts Accept header values in descending order of q factor.</summary>
      <returns>Returns the sorted list of MediaTypeWithQualityHeaderValue objects.</returns>
      <param name="headerValues">A collection of StringWithQualityHeaderValue objects, representing the header fields.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.SortStringWithQualityHeaderValuesByQFactor(System.Collections.Generic.ICollection{System.Net.Http.Headers.StringWithQualityHeaderValue})">
      <summary>Sorts a list of Accept-Charset, Accept-Encoding, Accept-Language or related header values in descending order or q factor.</summary>
      <returns>Returns the sorted list of StringWithQualityHeaderValue objects.</returns>
      <param name="headerValues">A collection of StringWithQualityHeaderValue objects, representing the header fields.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.DefaultContentNegotiator.UpdateBestMatch(System.Net.Http.Formatting.MediaTypeFormatterMatch,System.Net.Http.Formatting.MediaTypeFormatterMatch)">
      <summary>Evaluates whether a match is better than the current match.</summary>
      <returns>Returns whichever <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" /> object is a better match.</returns>
      <param name="current">The current match.</param>
      <param name="potentialReplacement">The match to evaluate against the current match.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.DefaultContentNegotiator.ExcludeMatchOnTypeOnly">
      <summary>If true, exclude formatters that match only on the object type; otherwise, false.</summary>
      <returns>Returns a <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="T:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter">
      <summary>
        <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> class for handling HTML form URL-ended data, also known as application/x-www-form-urlencoded.  </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.#ctor(System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter" /> class.</summary>
      <param name="formatter">The <see cref="T:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter" /> instance to copy settings from.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.CanReadType(System.Type)">
      <summary>Queries whether the <see cref="T:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter" /> can deserializean object of the specified type.</summary>
      <returns>true if the <see cref="T:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter" /> can deserialize the type; otherwise, false.</returns>
      <param name="type">The type to deserialize.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.CanWriteType(System.Type)">
      <summary>Queries whether the <see cref="T:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter" /> can serializean object of the specified type.</summary>
      <returns>true if the <see cref="T:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter" /> can serialize the type; otherwise, false.</returns>
      <param name="type">The type to serialize.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
      <summary> Asynchronously deserializes an object of the specified type.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> whose result will be the object instance that has been read.</returns>
      <param name="type">The type of object to deserialize.</param>
      <param name="readStream">The <see cref="T:System.IO.Stream" /> to read.</param>
      <param name="content">The <see cref="T:System.Net.Http.HttpContent" /> for the content being read.</param>
      <param name="formatterLogger">The <see cref="T:System.Net.Http.Formatting.IFormatterLogger" /> to log events to.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.DefaultMediaType">
      <summary>Gets the default media type for HTML form-URL-encoded data, which is application/x-www-form-urlencoded.</summary>
      <returns>The default media type for HTML form-URL-encoded data</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.MaxDepth">
      <summary>Gets or sets the maximum depth allowed by this formatter.</summary>
      <returns>The maximum depth.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter.ReadBufferSize">
      <summary>Gets or sets the size of the buffer when reading the incoming stream.</summary>
      <returns>The buffer size.</returns>
    </member>
    <member name="T:System.Net.Http.Formatting.JsonMediaTypeFormatter">
      <summary>Represents the <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> class to handle JSON. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.#ctor">
      <summary> Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.JsonMediaTypeFormatter" /> class. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.#ctor(System.Net.Http.Formatting.JsonMediaTypeFormatter)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.JsonMediaTypeFormatter" /> class.</summary>
      <param name="formatter">The <see cref="T:System.Net.Http.Formatting.JsonMediaTypeFormatter" /> instance to copy settings from.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.CreateJsonReader(System.Type,System.IO.Stream,System.Text.Encoding)">
      <summary>Called during deserialization to get the <see cref="T:Newtonsoft.Json.JsonReader" />.</summary>
      <returns>The reader to use during deserialization.</returns>
      <param name="type">The type of the object to read.</param>
      <param name="readStream">The stream from which to read.</param>
      <param name="effectiveEncoding">The encoding to use when reading.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.CreateJsonWriter(System.Type,System.IO.Stream,System.Text.Encoding)">
      <summary>Called during serialization to get the <see cref="T:Newtonsoft.Json.JsonWriter" />.</summary>
      <returns>The writer to use during serialization.</returns>
      <param name="type">The type of the object to write.</param>
      <param name="writeStream">The stream to write to.</param>
      <param name="effectiveEncoding">The encoding to use when writing.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.CanReadType(System.Type)">
      <summary>Determines whether this <see cref="T:System.Net.Http.Formatting.JsonMediaTypeFormatter" /> can read objects of the specified <paramref name="type" />.</summary>
      <returns>true if objects of this <paramref name="type" /> can be read, otherwise false.</returns>
      <param name="type">The type of object that will be read.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.CanWriteType(System.Type)">
      <summary>Determines whether this <see cref="T:System.Net.Http.Formatting.JsonMediaTypeFormatter" /> can write objects of the specified <paramref name="type" />.</summary>
      <returns>true if objects of this <paramref name="type" /> can be written, otherwise false.</returns>
      <param name="type">The type of object that will be written.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.ReadFromStream(System.Type,System.IO.Stream,System.Text.Encoding,System.Net.Http.Formatting.IFormatterLogger)">
      <summary>Called during deserialization to read an object of the specified type from the specified stream.</summary>
      <returns>The object that has been read.</returns>
      <param name="type">The type of the object to read.</param>
      <param name="readStream">The stream from which to read.</param>
      <param name="effectiveEncoding">The encoding to use when reading.</param>
      <param name="formatterLogger">The logger to log events to.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext,System.Threading.CancellationToken)">
      <summary>Called during serialization to write an object of the specified type to the specified stream.</summary>
      <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.</returns>
      <param name="type">The type of the object to write.</param>
      <param name="value">The object to write.</param>
      <param name="writeStream">The stream to write to.</param>
      <param name="content">The <see cref="T:System.Net.Http.HttpContent" /> for the content being written.</param>
      <param name="transportContext">The transport context.</param>
      <param name="cancellationToken">The token to monitor for cancellation.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.WriteToStream(System.Type,System.Object,System.IO.Stream,System.Text.Encoding)">
      <summary>Called during serialization to write an object of the specified type to the specified stream.</summary>
      <param name="type">The type of the object to write.</param>
      <param name="value">The object to write.</param>
      <param name="writeStream">The stream to write to.</param>
      <param name="effectiveEncoding">The encoding to use when writing.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.JsonMediaTypeFormatter.CreateDataContractSerializer(System.Type)">
      <summary>Called during deserialization to get the <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" />.</summary>
      <returns>The object used for serialization.</returns>
      <param name="type">The type of object that will be serialized or deserialized.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.JsonMediaTypeFormatter.DefaultMediaType">
      <summary>Gets the default media type for JSON, namely "application/json".</summary>
      <returns>The <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> for JSON.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.JsonMediaTypeFormatter.UseDataContractJsonSerializer">
      <summary> Gets or sets a value indicating whether to use <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> by default. </summary>
      <returns>true if to <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> by default; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.JsonMediaTypeFormatter.Indent">
      <summary> Gets or sets a value indicating whether to indent elements when writing data.  </summary>
      <returns>true if to indent elements when writing data; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.JsonMediaTypeFormatter.MaxDepth">
      <summary>Gets or sets the maximum depth allowed by this formatter.</summary>
      <returns>The maximum depth allowed by this formatter.</returns>
    </member>
    <member name="T:System.Net.Http.Formatting.MediaTypeFormatterCollection">
      <summary> Collection class that contains <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> instances. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterCollection" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterCollection.#ctor(System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterCollection" /> class.</summary>
      <param name="formatters">A collection of <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> instances to place in the collection.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterCollection.AddRange(System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>Adds the elements of the specified collection to the end of the <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterCollection" />.</summary>
      <param name="items">The items that should be added to the end of the <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterCollection" />. The items collection itself cannot be <see cref="null" />, but it can contain elements that are <see cref="null" />.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterCollection.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>Inserts the elements of a collection into the <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterCollection" /> at the specified index.</summary>
      <param name="index">The zero-based index at which the new elements should be inserted.</param>
      <param name="items">The items that should be inserted into the <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterCollection" />. The items collection itself cannot be <see cref="null" />, but it can contain elements that are <see cref="null" />.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterCollection.FindReader(System.Type,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary>Helper to search a collection for a formatter that can read the .NET type in the given mediaType.</summary>
      <returns>The formatter that can read the type. Null if no formatter found.</returns>
      <param name="type">The .NET type to read</param>
      <param name="mediaType">The media type to match on.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterCollection.FindWriter(System.Type,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary>Helper to search a collection for a formatter that can write the .NET type in the given mediaType.</summary>
      <returns>The formatter that can write the type. Null if no formatter found.</returns>
      <param name="type">The .NET type to read</param>
      <param name="mediaType">The media type to match on.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterCollection.IsTypeExcludedFromValidation(System.Type)">
      <summary>Returns true if the type is one of those loosely defined types that should be excluded from validation.</summary>
      <returns>true if the type should be excluded; otherwise, false.</returns>
      <param name="type">The .NET <see cref="T:System.Type" /> to validate.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterCollection.ClearItems">
      <summary>Removes all items in the collection.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterCollection.InsertItem(System.Int32,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Inserts the specified item at the specified index in the collection.</summary>
      <param name="index">The index to insert at.</param>
      <param name="item">The item to insert.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterCollection.RemoveItem(System.Int32)">
      <summary>Removes the item at the specified index.</summary>
      <param name="index">The index of the item to remove.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterCollection.SetItem(System.Int32,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>Assigns the item at the specified index in the collection.</summary>
      <param name="index">The index to insert at.</param>
      <param name="item">The item to assign.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatterCollection.XmlFormatter">
      <summary>Gets the <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> to use for XML.</summary>
      <returns>The <see cref="T:System.Net.Http.Formatting.XmlMediaTypeFormatter" />to use for XML.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatterCollection.JsonFormatter">
      <summary>Gets the <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> to use for JSON.</summary>
      <returns>The <see cref="T:System.Net.Http.Formatting.JsonMediaTypeFormatter" /> to use for JSON.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatterCollection.FormUrlEncodedFormatter">
      <summary>Gets the <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> to use for application/x-www-form-urlencoded data.</summary>
      <returns>The <see cref="T:System.Net.Http.Formatting.FormUrlEncodedMediaTypeFormatter" />to use for application/x-www-form-urlencoded data.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddQueryStringMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.String,System.Net.Http.Headers.MediaTypeHeaderValue)" />
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddQueryStringMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.String,System.String)" />
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddRequestHeaderMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.String,System.StringComparison,System.Boolean,System.Net.Http.Headers.MediaTypeHeaderValue)" />
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddRequestHeaderMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.String,System.StringComparison,System.Boolean,System.String)" />
    <member name="T:System.Net.Http.Formatting.MediaTypeMapping">
      <summary> An abstract base class used to create an association between <see cref="T:System.Net.Http.HttpRequestMessage" /> or  <see cref="T:System.Net.Http.HttpResponseMessage" /> instances that have certain characteristics  and a specific <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" />.  </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeMapping.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Initializes a new instance of a <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> with the given mediaType value. </summary>
      <param name="mediaType"> The <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> that is associated with <see cref="T:System.Net.Http.HttpRequestMessage" /> or  <see cref="T:System.Net.Http.HttpResponseMessage" /> instances that have the given characteristics of the  <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" />. </param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeMapping.#ctor(System.String)">
      <summary> Initializes a new instance of a <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> with the given mediaType value. </summary>
      <param name="mediaType"> The <see cref="T:System.String" /> that is associated with <see cref="T:System.Net.Http.HttpRequestMessage" /> or  <see cref="T:System.Net.Http.HttpResponseMessage" /> instances that have the given characteristics of the  <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" />. </param>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeMapping.TryMatchMediaType(System.Net.Http.HttpRequestMessage)">
      <summary> Returns the quality of the match of the <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> associated with request. </summary>
      <returns> The quality of the match. It must be between 0.0 and 1.0. A value of 0.0 signifies no match. A value of 1.0 signifies a complete match. </returns>
      <param name="request"> The <see cref="T:System.Net.Http.HttpRequestMessage" /> to evaluate for the characteristics  associated with the <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> of the <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" />. </param>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeMapping.MediaType">
      <summary> Gets the <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> that is associated with <see cref="T:System.Net.Http.HttpRequestMessage" /> or  <see cref="T:System.Net.Http.HttpResponseMessage" /> instances that have the given characteristics of the  <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" />. </summary>
    </member>
    <member name="T:System.Net.Http.Formatting.QueryStringMapping">
      <summary> Class that provides <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" />s from query strings. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.QueryStringMapping.#ctor(System.String,System.String,System.String)">
      <summary> Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.QueryStringMapping" /> class. </summary>
      <param name="queryStringParameterName">The name of the query string parameter to match, if present.</param>
      <param name="queryStringParameterValue">The value of the query string parameter specified by queryStringParameterName.</param>
      <param name="mediaType">The media type to use if the query parameter specified by queryStringParameterName is present and assigned the value specified by queryStringParameterValue.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.QueryStringMapping.#ctor(System.String,System.String,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.QueryStringMapping" /> class. </summary>
      <param name="queryStringParameterName">The name of the query string parameter to match, if present.</param>
      <param name="queryStringParameterValue">The value of the query string parameter specified by queryStringParameterName.</param>
      <param name="mediaType">The <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> to use if the query parameter specified by queryStringParameterName is present and assigned the value specified by queryStringParameterValue.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.QueryStringMapping.TryMatchMediaType(System.Net.Http.HttpRequestMessage)">
      <summary> Returns a value indicating whether the current <see cref="T:System.Net.Http.Formatting.QueryStringMapping" /> instance can return a <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> from request. </summary>
      <returns>If this instance can produce a <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> from request it returns 1.0 otherwise 0.0.</returns>
      <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage" /> to check.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.QueryStringMapping.QueryStringParameterName">
      <summary> Gets the query string parameter name. </summary>
    </member>
    <member name="P:System.Net.Http.Formatting.QueryStringMapping.QueryStringParameterValue">
      <summary> Gets the query string parameter value. </summary>
    </member>
    <member name="T:System.Net.Http.Formatting.RequestHeaderMapping">
      <summary> This class provides a mapping from an arbitrary HTTP request header field to a <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> used to select <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> instances for handling the entity body of an <see cref="T:System.Net.Http.HttpRequestMessage" /> or <see cref="T:System.Net.Http.HttpResponseMessage" />. &lt;remarks&gt;This class only checks header fields associated with <see cref="M:HttpRequestMessage.Headers" /> for a match. It does not check header fields associated with <see cref="M:HttpResponseMessage.Headers" /> or <see cref="M:HttpContent.Headers" /> instances.&lt;/remarks&gt;</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.RequestHeaderMapping.#ctor(System.String,System.String,System.StringComparison,System.Boolean,System.String)">
      <summary> Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.RequestHeaderMapping" /> class. </summary>
      <param name="headerName">Name of the header to match.</param>
      <param name="headerValue">The header value to match.</param>
      <param name="valueComparison">The value comparison to use when matching headerValue.</param>
      <param name="isValueSubstring">if set to true then headerValue is  considered a match if it matches a substring of the actual header value.</param>
      <param name="mediaType">The media type to use if headerName and headerValue  is considered a match.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.RequestHeaderMapping.#ctor(System.String,System.String,System.StringComparison,System.Boolean,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary> Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.RequestHeaderMapping" /> class. </summary>
      <param name="headerName">Name of the header to match.</param>
      <param name="headerValue">The header value to match.</param>
      <param name="valueComparison">The <see cref="T:System.StringComparison" /> to use when matching headerValue.</param>
      <param name="isValueSubstring">if set to true then headerValue is  considered a match if it matches a substring of the actual header value.</param>
      <param name="mediaType">The <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> to use if headerName and headerValue  is considered a match.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.RequestHeaderMapping.TryMatchMediaType(System.Net.Http.HttpRequestMessage)">
      <summary> Returns a value indicating whether the current <see cref="T:System.Net.Http.Formatting.RequestHeaderMapping" /> instance can return a <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> from request. </summary>
      <returns> The quality of the match. It must be between 0.0 and 1.0. A value of 0.0 signifies no match. A value of 1.0 signifies a complete match. </returns>
      <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage" /> to check.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.RequestHeaderMapping.HeaderName">
      <summary> Gets the name of the header to match. </summary>
    </member>
    <member name="P:System.Net.Http.Formatting.RequestHeaderMapping.HeaderValue">
      <summary> Gets the header value to match. </summary>
    </member>
    <member name="P:System.Net.Http.Formatting.RequestHeaderMapping.HeaderValueComparison">
      <summary> Gets the <see cref="T:System.StringComparison" /> to use when matching <see cref="M:HeaderValue" />. </summary>
    </member>
    <member name="P:System.Net.Http.Formatting.RequestHeaderMapping.IsValueSubstring">
      <summary> Gets a value indicating whether <see cref="M:HeaderValue" /> is  a matched as a substring of the actual header value. this instance is value substring. </summary>
      <returns>true<see cref="P:System.Net.Http.Formatting.RequestHeaderMapping.HeaderValue" />false</returns>
    </member>
    <member name="T:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking">
      <summary> Contains information about the degree to which a <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> matches the   explicit or implicit preferences found in an incoming request. </summary>
    </member>
    <member name="F:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking.None">
      <summary> No match was found </summary>
    </member>
    <member name="F:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking.MatchOnCanWriteType">
      <summary> Matched on a type, meaning that the formatter is able to serialize the type.</summary>
    </member>
    <member name="F:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking.MatchOnRequestAcceptHeaderLiteral">
      <summary>Matched on an explicit literal accept header, such as “application/json”.</summary>
    </member>
    <member name="F:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking.MatchOnRequestAcceptHeaderSubtypeMediaRange">
      <summary>Matched on an explicit subtype range in an Accept header, such as “application/*”.</summary>
    </member>
    <member name="F:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking.MatchOnRequestAcceptHeaderAllMediaRange">
      <summary>Matched on an explicit “*/*” range in the Accept header.</summary>
    </member>
    <member name="F:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking.MatchOnRequestWithMediaTypeMapping">
      <summary> Matched on <see cref="T:System.Net.Http.HttpRequestMessage" /> after having applied the various <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" />s. </summary>
    </member>
    <member name="F:System.Net.Http.Formatting.MediaTypeFormatterMatchRanking.MatchOnRequestMediaType">
      <summary> Matched on the media type of the entity body in the HTTP request message.</summary>
    </member>
    <member name="T:System.Net.Http.Formatting.MediaTypeFormatterMatch">
      <summary> This class describes how well a particular <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> matches a request. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterMatch.#ctor(System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,System.Nullable{System.Double},System.Net.Http.Formatting.MediaTypeFormatterMatchRanking)">
      <summary> Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.MediaTypeFormatterMatch" /> class. </summary>
      <param name="formatter">The matching formatter.</param>
      <param name="mediaType">The media type. Can be null in which case the media type application/octet-stream is used.</param>
      <param name="quality">The quality of the match. Can be null in which case it is considered a full match with a value of 1.0</param>
      <param name="ranking">The kind of match.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatterMatch.Formatter">
      <summary> Gets the media type formatter. </summary>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatterMatch.MediaType">
      <summary> Gets the matched media type. </summary>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatterMatch.Quality">
      <summary> Gets the quality of the match </summary>
    </member>
    <member name="P:System.Net.Http.Formatting.MediaTypeFormatterMatch.Ranking">
      <summary> Gets the kind of match that occurred. </summary>
    </member>
    <member name="T:System.Net.Http.Formatting.XmlHttpRequestHeaderMapping">
      <summary> A <see cref="T:System.Net.Http.Formatting.RequestHeaderMapping" /> that maps the X-Requested-With http header field set by AJAX XmlHttpRequest (XHR) to the media type application/json if no explicit Accept header fields are present in the request. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlHttpRequestHeaderMapping.#ctor">
      <summary> Initializes a new instance of <see cref="T:System.Net.Http.Formatting.XmlHttpRequestHeaderMapping" /> class </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlHttpRequestHeaderMapping.TryMatchMediaType(System.Net.Http.HttpRequestMessage)">
      <summary> Returns a value indicating whether the current <see cref="T:System.Net.Http.Formatting.RequestHeaderMapping" /> instance can return a <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" /> from request. </summary>
      <returns> The quality of the match. A value of 0.0 signifies no match. A value of 1.0 signifies a complete match and that the request was made using XmlHttpRequest without an Accept header. </returns>
      <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage" /> to check.</param>
    </member>
    <member name="T:System.Net.Http.Formatting.XmlMediaTypeFormatter">
      <summary>
        <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> class to handle Xml. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.XmlMediaTypeFormatter" /> class.</summary>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.#ctor(System.Net.Http.Formatting.XmlMediaTypeFormatter)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.Formatting.XmlMediaTypeFormatter" /> class.</summary>
      <param name="formatter">The <see cref="T:System.Net.Http.Formatting.XmlMediaTypeFormatter" /> instance to copy settings from.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.SetSerializer(System.Type,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Registers an <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> to read or write objects of a specified type.</summary>
      <param name="type">The type of object that will be serialized or deserialized with<paramref name="serializer" />.</param>
      <param name="serializer">The <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> instance.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.SetSerializer``1(System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Registers an <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> to read or write objects of a specified type.</summary>
      <param name="serializer">The <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> instance.</param>
      <typeparam name="T">The type of object that will be serialized or deserialized with<paramref name="serializer" />.</typeparam>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.SetSerializer(System.Type,System.Xml.Serialization.XmlSerializer)">
      <summary>Registers an <see cref="T:System.Xml.Serialization.XmlSerializer" /> to read or write objects of a specified type.</summary>
      <param name="type">The type of object that will be serialized or deserialized with<paramref name="serializer" />.</param>
      <param name="serializer">The <see cref="T:System.Xml.Serialization.XmlSerializer" /> instance.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.SetSerializer``1(System.Xml.Serialization.XmlSerializer)">
      <summary>Registers an <see cref="T:System.Xml.Serialization.XmlSerializer" /> to read or write objects of a specified type.</summary>
      <param name="serializer">The <see cref="T:System.Xml.Serialization.XmlSerializer" /> instance.</param>
      <typeparam name="T">The type of object that will be serialized or deserialized with<paramref name="serializer" />.</typeparam>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.RemoveSerializer(System.Type)">
      <summary>Unregisters the serializer currently associated with the given type.</summary>
      <returns>true if a serializer was previously registered for the type; otherwise, false.</returns>
      <param name="type">The type of object whose serializer should be removed.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.CanReadType(System.Type)">
      <summary>Queries whether the <see cref="T:System.Net.Http.Formatting.XmlMediaTypeFormatter" /> can deserializean object of the specified type.</summary>
      <returns>true if the <see cref="T:System.Net.Http.Formatting.XmlMediaTypeFormatter" /> can deserialize the type; otherwise, false.</returns>
      <param name="type">The type to deserialize.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.CanWriteType(System.Type)">
      <summary>Queries whether the  <see cref="T:System.Net.Http.Formatting.XmlMediaTypeFormatter" /> can serializean object of the specified type.</summary>
      <returns>true if the <see cref="T:System.Net.Http.Formatting.XmlMediaTypeFormatter" /> can serialize the type; otherwise, false.</returns>
      <param name="type">The type to serialize.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
      <summary> Called during deserialization to read an object of the specified type from the specified readStream. </summary>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> whose result will be the object instance that has been read.</returns>
      <param name="type">The type of object to read.</param>
      <param name="readStream">The <see cref="T:System.IO.Stream" /> from which to read.</param>
      <param name="content">The <see cref="T:System.Net.Http.HttpContent" /> for the content being read.</param>
      <param name="formatterLogger">The <see cref="T:System.Net.Http.Formatting.IFormatterLogger" /> to log events to.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.GetDeserializer(System.Type,System.Net.Http.HttpContent)">
      <summary>Called during deserialization to get the XML serializer to use for deserializing objects.</summary>
      <returns>An instance of <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> or <see cref="T:System.Xml.Serialization.XmlSerializer" /> to use for deserializing the object.</returns>
      <param name="type">The type of object to deserialize.</param>
      <param name="content">The <see cref="T:System.Net.Http.HttpContent" /> for the content being read.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.CreateXmlReader(System.IO.Stream,System.Net.Http.HttpContent)">
      <summary>Called during deserialization to get the XML reader to use for reading objects from the stream.</summary>
      <returns>The <see cref="T:System.Xml.XmlReader" /> to use for reading objects.</returns>
      <param name="readStream">The <see cref="T:System.IO.Stream" /> to read from.</param>
      <param name="content">The <see cref="T:System.Net.Http.HttpContent" /> for the content being read.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext,System.Threading.CancellationToken)">
      <summary>Called during serialization to write an object of the specified type to the specified writeStream.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that will write the value to the stream.</returns>
      <param name="type">The type of object to write.</param>
      <param name="value">The object to write.</param>
      <param name="writeStream">The <see cref="T:System.IO.Stream" /> to which to write.</param>
      <param name="content">The <see cref="T:System.Net.Http.HttpContent" /> for the content being written.</param>
      <param name="transportContext">The <see cref="T:System.Net.TransportContext" />.</param>
      <param name="cancellationToken">The token to monitor cancellation.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.GetSerializer(System.Type,System.Object,System.Net.Http.HttpContent)">
      <summary>Called during serialization to get the XML serializer to use for serializing objects.</summary>
      <returns>An instance of <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> or <see cref="T:System.Xml.Serialization.XmlSerializer" /> to use for serializing the object.</returns>
      <param name="type">The type of object to serialize.</param>
      <param name="value">The object to serialize.</param>
      <param name="content">The <see cref="T:System.Net.Http.HttpContent" /> for the content being written.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.CreateXmlWriter(System.IO.Stream,System.Net.Http.HttpContent)">
      <summary>Called during serialization to get the XML writer to use for writing objects to the stream.</summary>
      <returns>The <see cref="T:System.Xml.XmlWriter" /> to use for writing objects.</returns>
      <param name="writeStream">The <see cref="T:System.IO.Stream" /> to write to.</param>
      <param name="content">The <see cref="T:System.Net.Http.HttpContent" /> for the content being written.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.CreateXmlSerializer(System.Type)">
      <summary>Called during deserialization to get the XML serializer.</summary>
      <returns>The object used for serialization.</returns>
      <param name="type">The type of object that will be serialized or deserialized.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.CreateDataContractSerializer(System.Type)">
      <summary>Called during deserialization to get the DataContractSerializer serializer.</summary>
      <returns>The object used for serialization.</returns>
      <param name="type">The type of object that will be serialized or deserialized.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.InvokeCreateXmlReader(System.IO.Stream,System.Net.Http.HttpContent)">
      <summary>This method is to support infrastructure and is not intended to be used directly from your code.</summary>
      <returns>Returns <see cref="T:System.Xml.XmlReader" />.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.InvokeCreateXmlWriter(System.IO.Stream,System.Net.Http.HttpContent)">
      <summary>This method is to support infrastructure and is not intended to be used directly from your code.</summary>
      <returns>Returns <see cref="T:System.Xml.XmlWriter" />.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.InvokeGetDeserializer(System.Type,System.Net.Http.HttpContent)">
      <summary>This method is to support infrastructure and is not intended to be used directly from your code.</summary>
      <returns>Returns <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:System.Net.Http.Formatting.XmlMediaTypeFormatter.InvokeGetSerializer(System.Type,System.Object,System.Net.Http.HttpContent)">
      <summary>This method is to support infrastructure and is not intended to be used directly from your code.</summary>
      <returns>Returns <see cref="T:System.Object" />.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.XmlMediaTypeFormatter.DefaultMediaType">
      <summary>Gets the default media type for the XML formatter.</summary>
      <returns>The default media type, which is “application/xml”.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.XmlMediaTypeFormatter.UseXmlSerializer">
      <summary>Gets or sets a value indicating whether the XML formatter uses the <see cref="T:System.Xml.Serialization.XmlSerializer" /> as the default serializer, instead of  using the <see cref="T:System.Runtime.Serialization.DataContractSerializer" />.</summary>
      <returns>If true, the formatter uses the <see cref="T:System.Xml.Serialization.XmlSerializer" /> by default; otherwise, it uses the <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> by default.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.XmlMediaTypeFormatter.Indent">
      <summary>Gets or sets a value indicating whether to indent elements when writing data.</summary>
      <returns>true to indent elements; otherwise, false.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.XmlMediaTypeFormatter.WriterSettings">
      <summary>Gets the settings to be used while writing.</summary>
      <returns>The settings to be used while writing.</returns>
    </member>
    <member name="P:System.Net.Http.Formatting.XmlMediaTypeFormatter.MaxDepth">
      <summary>Gets and sets the maximum nested node depth.</summary>
      <returns>The maximum nested node depth.</returns>
    </member>
    <member name="T:System.Net.Http.HttpContentExtensions">
      <summary>Specifies extension methods to allow strongly typed objects to be read from HttpContent instances.</summary>
    </member>
    <member name="M:System.Net.Http.HttpContentExtensions.ReadAsAsync(System.Net.Http.HttpContent,System.Type)">
      <summary> Returns a Task that will yield an object of the specified type from the content instance. </summary>
      <returns>A Task that will yield an object instance of the specified type.</returns>
      <param name="content">The HttpContent instance from which to read.</param>
      <param name="type">The type of the object to read.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentExtensions.ReadAsAsync(System.Net.Http.HttpContent,System.Type,System.Threading.CancellationToken)">
      <summary>Returns a Task that will yield an object of the specified type from the content instance using one of the provided formatters to deserialize the content.</summary>
      <returns>An object instance of the specified type.</returns>
      <param name="content">The HttpContent instance from which to read.</param>
      <param name="type">The type of the object to read.</param>
      <param name="cancellationToken">The token to cancel the operation.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentExtensions.ReadAsAsync(System.Net.Http.HttpContent,System.Type,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary> Returns a Task that will yield an object of the specified type from the content instance using one of the provided formatters to deserialize the content. </summary>
      <returns>An object instance of the specified type.</returns>
      <param name="content">The HttpContent instance from which to read.</param>
      <param name="type">The type of the object to read.</param>
      <param name="formatters">The collection of MediaTypeFormatter instances to use.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentExtensions.ReadAsAsync(System.Net.Http.HttpContent,System.Type,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Threading.CancellationToken)">
      <summary>Returns a Task that will yield an object of the specified type from the content instance using one of the provided formatters to deserialize the content.</summary>
      <returns>An object instance of the specified type.</returns>
      <param name="content">The HttpContent instance from which to read.</param>
      <param name="type">The type of the object to read.</param>
      <param name="formatters">The collection of MediaTypeFormatter instances to use.</param>
      <param name="cancellationToken">The token to cancel the operation.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentExtensions.ReadAsAsync(System.Net.Http.HttpContent,System.Type,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Net.Http.Formatting.IFormatterLogger)">
      <summary> Returns a Task that will yield an object of the specified type from the content instance using one of the provided formatters to deserialize the content. </summary>
      <returns>An object instance of the specified type.</returns>
      <param name="content">The HttpContent instance from which to read.</param>
      <param name="type">The type of the object to read.</param>
      <param name="formatters">The collection of MediaTypeFormatter instances to use.</param>
      <param name="formatterLogger">The IFormatterLogger to log events to.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentExtensions.ReadAsAsync(System.Net.Http.HttpContent,System.Type,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Net.Http.Formatting.IFormatterLogger,System.Threading.CancellationToken)">
      <summary>Returns a Task that will yield an object of the specified type from the content instance using one of the provided formatters to deserialize the content.</summary>
      <returns>An object instance of the specified type.</returns>
      <param name="content">The HttpContent instance from which to read.</param>
      <param name="type">The type of the object to read.</param>
      <param name="formatters">The collection of MediaTypeFormatter instances to use.</param>
      <param name="formatterLogger">The IFormatterLogger to log events to.</param>
      <param name="cancellationToken">The token to cancel the operation.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentExtensions.ReadAsAsync``1(System.Net.Http.HttpContent)">
      <summary> Returns a Task that will yield an object of the specified type &lt;typeparamref name="T" /&gt; from the content instance. </summary>
      <returns>An object instance of the specified type.</returns>
      <param name="content">The HttpContent instance from which to read.</param>
      <typeparam name="T">The type of the object to read.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpContentExtensions.ReadAsAsync``1(System.Net.Http.HttpContent,System.Threading.CancellationToken)">
      <summary>Returns a Task that will yield an object of the specified type from the content instance.</summary>
      <returns>An object instance of the specified type.</returns>
      <param name="content">The HttpContent instance from which to read.</param>
      <param name="cancellationToken">The token to cancel the operation.</param>
      <typeparam name="T">The type of the object to read.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpContentExtensions.ReadAsAsync``1(System.Net.Http.HttpContent,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary> Returns a Task that will yield an object of the specified type &lt;typeparamref name="T" /&gt; from the content instance. </summary>
      <returns>An object instance of the specified type.</returns>
      <param name="content">The HttpContent instance from which to read.</param>
      <param name="formatters">The collection of MediaTyepFormatter instances to use.</param>
      <typeparam name="T">The type of the object to read.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpContentExtensions.ReadAsAsync``1(System.Net.Http.HttpContent,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Threading.CancellationToken)">
      <summary>Returns a Task that will yield an object of the specified type from the content instance.</summary>
      <returns>An object instance of the specified type.</returns>
      <param name="content">The HttpContent instance from which to read.</param>
      <param name="formatters">The collection of MediaTypeFormatter instances to use.</param>
      <param name="cancellationToken">The token to cancel the operation.</param>
      <typeparam name="T">The type of the object to read.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpContentExtensions.ReadAsAsync``1(System.Net.Http.HttpContent,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Net.Http.Formatting.IFormatterLogger)">
      <summary> Returns a Task that will yield an object of the specified type &lt;typeparamref name="T" /&gt; from the content instance. </summary>
      <returns>An object instance of the specified type.</returns>
      <param name="content">The HttpContent instance from which to read.</param>
      <param name="formatters">The collection of MediaTypeFormatter instances to use.</param>
      <param name="formatterLogger">The IFormatterLogger to log events to.</param>
      <typeparam name="T">The type of the object to read.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpContentExtensions.ReadAsAsync``1(System.Net.Http.HttpContent,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Net.Http.Formatting.IFormatterLogger,System.Threading.CancellationToken)">
      <summary>Returns a Task that will yield an object of the specified type from the content instance.</summary>
      <returns>An object instance of the specified type.</returns>
      <param name="content">The HttpContent instance from which to read.</param>
      <param name="formatters">The collection of MediaTypeFormatter instances to use.</param>
      <param name="formatterLogger">The IFormatterLogger to log events to.</param>
      <param name="cancellationToken">The token to cancel the operation.</param>
      <typeparam name="T">The type of the object to read.</typeparam>
    </member>
    <member name="T:System.Net.Http.HttpContentMessageExtensions">
      <summary>Provides extension methods to read <see cref="T:System.Net.Http.HttpRequestMessage" /> and <see cref="T:System.Net.Http.HttpResponseMessage" /> entities from <see cref="T:System.Net.Http.HttpContent" /> instances. </summary>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.IsHttpRequestMessageContent(System.Net.Http.HttpContent)">
      <summary>Determines whether the specified content is HTTP request message content.</summary>
      <returns>true if the specified content is HTTP message content; otherwise, false.</returns>
      <param name="content">The content to check.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.IsHttpResponseMessageContent(System.Net.Http.HttpContent)">
      <summary>Determines whether the specified content is HTTP response message content.</summary>
      <returns>true if the specified content is HTTP message content; otherwise, false.</returns>
      <param name="content">The content to check.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync(System.Net.Http.HttpContent)">
      <summary> Reads the <see cref="T:System.Net.Http.HttpContent" /> as an <see cref="T:System.Net.Http.HttpRequestMessage" />. </summary>
      <returns>The parsed <see cref="T:System.Net.Http.HttpRequestMessage" /> instance.</returns>
      <param name="content">The content to read.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync(System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync(System.Net.Http.HttpContent,System.String)">
      <summary> Reads the <see cref="T:System.Net.Http.HttpContent" /> as an <see cref="T:System.Net.Http.HttpRequestMessage" />. </summary>
      <returns>The parsed <see cref="T:System.Net.Http.HttpRequestMessage" /> instance.</returns>
      <param name="content">The content to read.</param>
      <param name="uriScheme">The URI scheme to use for the request URI.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync(System.Net.Http.HttpContent,System.String,System.Threading.CancellationToken)" />
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync(System.Net.Http.HttpContent,System.String,System.Int32)">
      <summary> Reads the <see cref="T:System.Net.Http.HttpContent" /> as an <see cref="T:System.Net.Http.HttpRequestMessage" />. </summary>
      <returns>The parsed <see cref="T:System.Net.Http.HttpRequestMessage" /> instance.</returns>
      <param name="content">The content to read.</param>
      <param name="uriScheme">The URI scheme to use for the request URI.</param>
      <param name="bufferSize">The size of the buffer.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync(System.Net.Http.HttpContent,System.String,System.Int32,System.Threading.CancellationToken)" />
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync(System.Net.Http.HttpContent,System.String,System.Int32,System.Int32)">
      <summary>Reads the <see cref="T:System.Net.Http.HttpContent" /> as an <see cref="T:System.Net.Http.HttpRequestMessage" />.</summary>
      <returns>The parsed <see cref="T:System.Net.Http.HttpRequestMessage" /> instance.</returns>
      <param name="content">The content to read.</param>
      <param name="uriScheme">The URI scheme to use for the request URI.</param>
      <param name="bufferSize">The size of the buffer.</param>
      <param name="maxHeaderSize">The maximum length of the HTTP header.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpRequestMessageAsync(System.Net.Http.HttpContent,System.String,System.Int32,System.Int32,System.Threading.CancellationToken)" />
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpResponseMessageAsync(System.Net.Http.HttpContent)">
      <summary> Reads the <see cref="T:System.Net.Http.HttpContent" /> as an <see cref="T:System.Net.Http.HttpResponseMessage" />. </summary>
      <returns>The parsed <see cref="T:System.Net.Http.HttpResponseMessage" /> instance.</returns>
      <param name="content">The content to read.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpResponseMessageAsync(System.Net.Http.HttpContent,System.Threading.CancellationToken)" />
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpResponseMessageAsync(System.Net.Http.HttpContent,System.Int32)">
      <summary>Reads the <see cref="T:System.Net.Http.HttpContent" /> as an <see cref="T:System.Net.Http.HttpResponseMessage" />. </summary>
      <returns>The parsed <see cref="T:System.Net.Http.HttpResponseMessage" /> instance.</returns>
      <param name="content">The content to read.</param>
      <param name="bufferSize">The size of the buffer.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpResponseMessageAsync(System.Net.Http.HttpContent,System.Int32,System.Threading.CancellationToken)" />
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpResponseMessageAsync(System.Net.Http.HttpContent,System.Int32,System.Int32)">
      <summary>Reads the <see cref="T:System.Net.Http.HttpContent" /> as an <see cref="T:System.Net.Http.HttpResponseMessage" />.</summary>
      <returns>The parsed <see cref="T:System.Net.Http.HttpResponseMessage" /> instance.</returns>
      <param name="content">The content to read.</param>
      <param name="bufferSize">The size of the buffer.</param>
      <param name="maxHeaderSize">The maximum length of the HTTP header.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMessageExtensions.ReadAsHttpResponseMessageAsync(System.Net.Http.HttpContent,System.Int32,System.Int32,System.Threading.CancellationToken)" />
    <member name="T:System.Net.Http.HttpContentMultipartExtensions">
      <summary>Extension methods to read MIME multipart entities from <see cref="T:System.Net.Http.HttpContent" /> instances.</summary>
    </member>
    <member name="M:System.Net.Http.HttpContentMultipartExtensions.IsMimeMultipartContent(System.Net.Http.HttpContent)">
      <summary>Determines whether the specified content is MIME multipart content.</summary>
      <returns>true if the specified content is MIME multipart content; otherwise, false.</returns>
      <param name="content">The content.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMultipartExtensions.IsMimeMultipartContent(System.Net.Http.HttpContent,System.String)">
      <summary>Determines whether the specified content is MIME multipart content with the specified subtype.</summary>
      <returns>true if the specified content is MIME multipart content with the specified subtype; otherwise, false.</returns>
      <param name="content">The content.</param>
      <param name="subtype">The MIME multipart subtype to match.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMultipartExtensions.ReadAsMultipartAsync(System.Net.Http.HttpContent)">
      <summary>Reads all body parts within a MIME multipart message and produces a set of <see cref="T:System.Net.Http.HttpContent" /> instances as a result.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the tasks of getting the collection of <see cref="T:System.Net.Http.HttpContent" /> instances where each instance represents a body part.</returns>
      <param name="content">An existing <see cref="T:System.Net.Http.HttpContent" /> instance to use for the object's content.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMultipartExtensions.ReadAsMultipartAsync(System.Net.Http.HttpContent,System.Threading.CancellationToken)">
      <summary>Reads all body parts within a MIME multipart message and produces a set of <see cref="T:System.Net.Http.HttpContent" /> instances as a result.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the tasks of getting the collection of <see cref="T:System.Net.Http.HttpContent" /> instances where each instance represents a body part.</returns>
      <param name="content">An existing <see cref="T:System.Net.Http.HttpContent" /> instance to use for the object's content.</param>
      <param name="cancellationToken">The token to cancel the operation.</param>
    </member>
    <member name="M:System.Net.Http.HttpContentMultipartExtensions.ReadAsMultipartAsync``1(System.Net.Http.HttpContent,``0)">
      <summary>Reads all body parts within a MIME multipart message and produces a set of <see cref="T:System.Net.Http.HttpContent" /> instances as a result using the streamProvider instance to determine where the contents of each body part is written.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the tasks of getting the collection of <see cref="T:System.Net.Http.HttpContent" /> instances where each instance represents a body part.</returns>
      <param name="content">An existing <see cref="T:System.Net.Http.HttpContent" /> instance to use for the object's content.</param>
      <param name="streamProvider">A stream provider providing output streams for where to write body parts as they are parsed.</param>
      <typeparam name="T">The type of the MIME multipart.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpContentMultipartExtensions.ReadAsMultipartAsync``1(System.Net.Http.HttpContent,``0,System.Threading.CancellationToken)">
      <summary>Reads all body parts within a MIME multipart message and produces a set of <see cref="T:System.Net.Http.HttpContent" /> instances as a result using the streamProvider instance to determine where the contents of each body part is written.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the tasks of getting the collection of <see cref="T:System.Net.Http.HttpContent" /> instances where each instance represents a body part.</returns>
      <param name="content">An existing <see cref="T:System.Net.Http.HttpContent" /> instance to use for the object's content.</param>
      <param name="streamProvider">A stream provider providing output streams for where to write body parts as they are parsed.</param>
      <param name="cancellationToken">The token to cancel the operation.</param>
      <typeparam name="T">The type of the MIME multipart.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpContentMultipartExtensions.ReadAsMultipartAsync``1(System.Net.Http.HttpContent,``0,System.Int32)">
      <summary>Reads all body parts within a MIME multipart message and produces a set of <see cref="T:System.Net.Http.HttpContent" /> instances as a result using the streamProvider instance to determine where the contents of each body part is written and bufferSize as read buffer size.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the tasks of getting the collection of <see cref="T:System.Net.Http.HttpContent" /> instances where each instance represents a body part.</returns>
      <param name="content">An existing <see cref="T:System.Net.Http.HttpContent" /> instance to use for the object's content.</param>
      <param name="streamProvider">A stream provider providing output streams for where to write body parts as they are parsed.</param>
      <param name="bufferSize">Size of the buffer used to read the contents.</param>
      <typeparam name="T">The type of the MIME multipart.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpContentMultipartExtensions.ReadAsMultipartAsync``1(System.Net.Http.HttpContent,``0,System.Int32,System.Threading.CancellationToken)">
      <summary>Reads all body parts within a MIME multipart message and produces a set of <see cref="T:System.Net.Http.HttpContent" /> instances as a result using the streamProvider instance to determine where the contents of each body part is written and bufferSize as read buffer size.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the tasks of getting the collection of <see cref="T:System.Net.Http.HttpContent" /> instances where each instance represents a body part.</returns>
      <param name="content">An existing <see cref="T:System.Net.Http.HttpContent" /> instance to use for the object's content.</param>
      <param name="streamProvider">A stream provider providing output streams for where to write body parts as they are parsed.</param>
      <param name="bufferSize">Size of the buffer used to read the contents.</param>
      <param name="cancellationToken">The token to cancel the operation.</param>
      <typeparam name="T">The type of the MIME multipart.</typeparam>
    </member>
    <member name="T:System.Net.Http.HttpMessageContent">
      <summary> Derived <see cref="T:System.Net.Http.HttpContent" /> class which can encapsulate an <see cref="P:System.Net.Http.HttpMessageContent.HttpResponseMessage" /> or an <see cref="P:System.Net.Http.HttpMessageContent.HttpRequestMessage" /> as an entity with media type "application/http". </summary>
    </member>
    <member name="M:System.Net.Http.HttpMessageContent.#ctor(System.Net.Http.HttpRequestMessage)">
      <summary> Initializes a new instance of the <see cref="T:System.Net.Http.HttpMessageContent" /> class encapsulating an <see cref="P:System.Net.Http.HttpMessageContent.HttpRequestMessage" />. </summary>
      <param name="httpRequest">The <see cref="P:System.Net.Http.HttpMessageContent.HttpResponseMessage" /> instance to encapsulate.</param>
    </member>
    <member name="M:System.Net.Http.HttpMessageContent.#ctor(System.Net.Http.HttpResponseMessage)">
      <summary> Initializes a new instance of the <see cref="T:System.Net.Http.HttpMessageContent" /> class encapsulating an <see cref="P:System.Net.Http.HttpMessageContent.HttpResponseMessage" />. </summary>
      <param name="httpResponse">The <see cref="P:System.Net.Http.HttpMessageContent.HttpResponseMessage" /> instance to encapsulate.</param>
    </member>
    <member name="M:System.Net.Http.HttpMessageContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
      <summary> Asynchronously serializes the object's content to the given stream. </summary>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> instance that is asynchronously serializing the object's content.</returns>
      <param name="stream">The <see cref="T:System.IO.Stream" /> to which to write.</param>
      <param name="context">The associated <see cref="T:System.Net.TransportContext" />.</param>
    </member>
    <member name="M:System.Net.Http.HttpMessageContent.TryComputeLength(System.Int64@)">
      <summary> Computes the length of the stream if possible. </summary>
      <returns>true if the length has been computed; otherwise false.</returns>
      <param name="length">The computed length of the stream.</param>
    </member>
    <member name="M:System.Net.Http.HttpMessageContent.Dispose(System.Boolean)">
      <summary> Releases unmanaged and - optionally - managed resources </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Net.Http.HttpMessageContent.HttpRequestMessage">
      <summary> Gets the HTTP request message. </summary>
    </member>
    <member name="P:System.Net.Http.HttpMessageContent.HttpResponseMessage">
      <summary> Gets the HTTP response message. </summary>
    </member>
    <member name="T:System.Net.Http.MultipartFileStreamProvider">
      <summary>Represents an <see cref="T:System.Net.Http.IMultipartStreamProvider" /> suited for writing each MIME body parts of the MIME multipart message to a file using a <see cref="T:System.IO.FileStream" />.</summary>
    </member>
    <member name="M:System.Net.Http.MultipartFileStreamProvider.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.MultipartFileStreamProvider" /> class.</summary>
      <param name="rootPath">The root path where the content of MIME multipart body parts are written to.</param>
    </member>
    <member name="M:System.Net.Http.MultipartFileStreamProvider.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.MultipartFileStreamProvider" /> class.</summary>
      <param name="rootPath">The root path where the content of MIME multipart body parts are written to.</param>
      <param name="bufferSize">The number of bytes buffered for writes to the file.</param>
    </member>
    <member name="M:System.Net.Http.MultipartFileStreamProvider.GetStream(System.Net.Http.HttpContent,System.Net.Http.Headers.HttpContentHeaders)">
      <summary>Gets the stream instance where the message body part is written to.</summary>
      <returns>The <see cref="T:System.IO.Stream" /> instance where the message body part is written to.</returns>
      <param name="parent">The content of HTTP.</param>
      <param name="headers">The header fields describing the body part.</param>
    </member>
    <member name="M:System.Net.Http.MultipartFileStreamProvider.GetLocalFileName(System.Net.Http.Headers.HttpContentHeaders)">
      <summary>Gets the name of the local file which will be combined with the root path to create an absolute file name where the contents of the current MIME body part will be stored.</summary>
      <returns>A relative filename with no path component.</returns>
      <param name="headers">The headers for the current MIME body part.</param>
    </member>
    <member name="P:System.Net.Http.MultipartFileStreamProvider.FileData">
      <summary>Gets or sets the multipart file data.</summary>
      <returns>The multipart file data.</returns>
    </member>
    <member name="P:System.Net.Http.MultipartFileStreamProvider.RootPath">
      <summary>Gets or sets the root path where the content of MIME multipart body parts are written to.</summary>
      <returns>The root path where the content of MIME multipart body parts are written to.</returns>
    </member>
    <member name="P:System.Net.Http.MultipartFileStreamProvider.BufferSize">
      <summary>Gets or sets the number of bytes buffered for writes to the file.</summary>
      <returns>The number of bytes buffered for writes to the file.</returns>
    </member>
    <member name="T:System.Net.Http.MultipartFormDataStreamProvider">
      <summary>Represents an <see cref="T:System.Net.Http.IMultipartStreamProvider" /> suited for use with HTML file uploads for writing file  content to a <see cref="T:System.IO.FileStream" />.</summary>
    </member>
    <member name="M:System.Net.Http.MultipartFormDataStreamProvider.#ctor(System.String)">
      <summary> Initializes a new instance of the <see cref="T:System.Net.Http.MultipartFormDataStreamProvider" /> class. </summary>
      <param name="rootPath">The root path where the content of MIME multipart body parts are written to.</param>
    </member>
    <member name="M:System.Net.Http.MultipartFormDataStreamProvider.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.MultipartFormDataStreamProvider" /> class.</summary>
      <param name="rootPath">The root path where the content of MIME multipart body parts are written to.</param>
      <param name="bufferSize">The number of bytes buffered for writes to the file.</param>
    </member>
    <member name="M:System.Net.Http.MultipartFormDataStreamProvider.GetStream(System.Net.Http.HttpContent,System.Net.Http.Headers.HttpContentHeaders)">
      <summary>Gets the streaming instance where the message body part is written.</summary>
      <returns>The <see cref="T:System.IO.Stream" /> instance where the message body part is written.</returns>
      <param name="parent">The HTTP content that contains this body part.</param>
      <param name="headers">Header fields describing the body part.</param>
    </member>
    <member name="M:System.Net.Http.MultipartFormDataStreamProvider.ExecutePostProcessingAsync">
      <summary>Reads the non-file contents as form data.</summary>
      <returns>A task that represents the asynchronous operation.</returns>
    </member>
    <member name="M:System.Net.Http.MultipartFormDataStreamProvider.ExecutePostProcessingAsync(System.Threading.CancellationToken)" />
    <member name="P:System.Net.Http.MultipartFormDataStreamProvider.FormData">
      <summary>Gets a <see cref="T:System.Collections.Specialized.NameValueCollection" /> of form data passed as part of the multipart form data.</summary>
      <returns>The <see cref="T:System.Collections.Specialized.NameValueCollection" /> of form data.</returns>
    </member>
    <member name="T:System.Net.Http.MultipartMemoryStreamProvider">
      <summary>Represents a multipart memory stream provider.</summary>
    </member>
    <member name="M:System.Net.Http.MultipartMemoryStreamProvider.GetStream(System.Net.Http.HttpContent,System.Net.Http.Headers.HttpContentHeaders)">
      <summary>Returns the <see cref="T:System.IO.Stream" /> for the <see cref="T:System.Net.Http.MultipartMemoryStreamProvider" />.</summary>
      <returns>The <see cref="T:System.IO.Stream" /> for the <see cref="T:System.Net.Http.MultipartMemoryStreamProvider" />.</returns>
      <param name="parent">A <see cref="T:System.Net.Http.HttpContent" /> object.</param>
      <param name="headers">The HTTP content headers.</param>
    </member>
    <member name="M:System.Net.Http.MultipartMemoryStreamProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Net.Http.MultipartMemoryStreamProvider" /> class.</summary>
    </member>
    <member name="T:System.Net.Http.UriExtensions">
      <summary>Contains extension methods to allow strongly typed objects to be read from the query component of <see cref="T:System.Uri" /> instances. </summary>
    </member>
    <member name="M:System.Net.Http.UriExtensions.ParseQueryString(System.Uri)">
      <summary>Parses the query portion of the specified URI.</summary>
      <returns>A  <see cref="T:System.Collections.Specialized.NameValueCollection" /> that contains the query parameters.</returns>
      <param name="address">The URI to parse.</param>
    </member>
    <member name="M:System.Net.Http.UriExtensions.TryReadQueryAsJson(System.Uri,Newtonsoft.Json.Linq.JObject@)">
      <summary>Reads HTML form URL encoded data provided in the <see cref="T:System.Uri" /> query component as a <see cref="T:Newtonsoft.Json.Linq.JObject" /> object.</summary>
      <returns>true if the query component can be read as <see cref="T:Newtonsoft.Json.Linq.JObject" />; otherwise false.</returns>
      <param name="address">The <see cref="T:System.Uri" /> instance from which to read.</param>
      <param name="value">An object to be initialized with this instance or null if the conversion cannot be performed.</param>
    </member>
    <member name="M:System.Net.Http.UriExtensions.TryReadQueryAs(System.Uri,System.Type,System.Object@)">
      <summary>Reads HTML form URL encoded data provided in the URI query string as an object of a specified type.</summary>
      <returns>true if the query component of the URI can be read as the specified type; otherwise, false.</returns>
      <param name="address">The URI to read.</param>
      <param name="type">The type of object to read.</param>
      <param name="value">When this method returns, contains an object that is initialized from the query component of the URI. This parameter is treated as uninitialized.</param>
    </member>
    <member name="M:System.Net.Http.UriExtensions.TryReadQueryAs``1(System.Uri,``0@)">
      <summary>Reads HTML form URL encoded data provided in the URI query string as an object of a specified type.</summary>
      <returns>true if the query component of the URI can be read as the specified type; otherwise, false.</returns>
      <param name="address">The URI to read.</param>
      <param name="value">When this method returns, contains an object that is initialized from the query component of the URI. This parameter is treated as uninitialized.</param>
      <typeparam name="T">The type of object to read.</typeparam>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowBlock">
      <summary>Provides a set of static (Shared in Visual Basic) methods for working with dataflow blocks.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0})">
      <summary>Links the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> to the specified <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</summary>
      <returns>An <see cref="T:System.IDisposable" /> that, upon calling Dispose, will unlink the source from the target.</returns>
      <param name="source">The source from which to link.</param>
      <param name="target">The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> to which to connect the source.</param>
      <typeparam name="TOutput">Specifies the type of data contained in the source.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="source" /> is null.-or-The <paramref name="target" /> is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Predicate{``0})">
      <summary>Links the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> to the specified <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> using the specified filter.</summary>
      <returns>An <see cref="T:System.IDisposable" /> that, upon calling Dispose, will unlink the source from the target.</returns>
      <param name="source">The source from which to link.</param>
      <param name="target">The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> to which to connect the source.</param>
      <param name="predicate">The filter a message must pass in order for it to propagate from the source to the target.</param>
      <typeparam name="TOutput">Specifies the type of data contained in the source.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="source" /> is null.-or-The <paramref name="target" /> is null.-or-The <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Predicate{``0})">
      <summary>Links the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> to the specified <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> using the specified filter.</summary>
      <returns>An <see cref="T:System.IDisposable" /> that, upon calling Dispose, will unlink the source from the target.</returns>
      <param name="source">The source from which to link.</param>
      <param name="target">The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> to which to connect the source.</param>
      <param name="linkOptions">One of the enumeration values that specifies how to configure a link between dataflow blocks.</param>
      <param name="predicate">The filter a message must pass in order for it to propagate from the source to the target.</param>
      <typeparam name="TOutput">Specifies the type of data contained in the source.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="source" /> is null (Nothing in Visual Basic).-or-The <paramref name="target" /> is null (Nothing in Visual Basic).-or-The <paramref name="linkOptions" /> is null (Nothing in Visual Basic).-or-The <paramref name="predicate" /> is null (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Post``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)">
      <summary>Posts an item to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</summary>
      <returns>true if the item was accepted by the target block; otherwise, false.</returns>
      <param name="target">The target block.</param>
      <param name="item">The item being offered to the target.</param>
      <typeparam name="TInput">Specifies the type of data accepted by the target block.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)">
      <summary>Asynchronously offers a message to the target message block, allowing for postponement.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous send. If the target accepts and consumes the offered element during the call to <see cref="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)" />, upon return from the call the resulting <see cref="T:System.Threading.Tasks.Task`1" /> will be completed and its <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will return true. If the target declines the offered element during the call, upon return from the call the resulting <see cref="T:System.Threading.Tasks.Task`1" /> will be completed and its <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will return false. If the target postpones the offered element, the element will be buffered until such time that the target consumes or releases it, at which point the task will complete, with its <see cref="P:System.Threading.Tasks.Task`1.Result" /> indicating whether the message was consumed. If the target never attempts to consume or release the message, the returned task will never complete.</returns>
      <param name="target">The target to which to post the data.</param>
      <param name="item">The item being offered to the target.</param>
      <typeparam name="TInput">Specifies the type of the data to post to the target.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="target" /> is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0,System.Threading.CancellationToken)">
      <summary>Asynchronously offers a message to the target message block, allowing for postponement.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.Task{Boolean}" /> that represents the asynchronous send.  If the target accepts and consumes the offered element during the call to SendAsync, upon return from the call the resulting <see cref="T:System.Threading.Tasks.Task{Boolean}" /> will be completed and its Result property will return true.  If the target declines the offered element during the call, upon return from the call the resulting <see cref="T:System.Threading.Tasks.Task{Boolean}" /> will be completed and its Result property will return false. If the target postpones the offered element, the element will be buffered until such time that the target consumes or releases it, at which point the Task will complete, with its Result indicating whether the message was consumed. If the target never attempts to consume or release the message, the returned task will never complete.If cancellation is requested before the target has successfully consumed the sent data, the returned task will complete in the Canceled state and the data will no longer be available to the target.</returns>
      <param name="target">The target to which to post the data.</param>
      <param name="item">The item being offered to the target.</param>
      <param name="cancellationToken">The cancellation token with which to request cancellation of the send operation.</param>
      <typeparam name="TInput">Specifies the type of the data to post to the target.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="target" /> is null (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.TryReceive``1(System.Threading.Tasks.Dataflow.IReceivableSourceBlock{``0},``0@)">
      <summary>Attempts to synchronously receive an item from the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <returns>true if an item could be received; otherwise, false.</returns>
      <param name="source">The source from which to receive.</param>
      <param name="item">The item received from the source.</param>
      <typeparam name="TOutput">Specifies the type of data contained in the source.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})">
      <summary>Asynchronously receives a value from the specified source.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous receive operation. When an item is successfully received from the source, the returned task will be completed and its <see cref="P:System.Threading.Tasks.Task`1.Result" /> will return the received item. If an item cannot be retrieved, because the source is empty and completed, the returned task will be canceled.</returns>
      <param name="source">The source from which to asynchronously receive.</param>
      <typeparam name="TOutput">Specifies the type of data contained in the source.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)">
      <summary>Asynchronously receives a value from the specified source.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous receive operation. When an item is successfully received from the source, the returned task will be completed and its <see cref="P:System.Threading.Tasks.Task`1.Result" />will return the received item. If an item cannot be retrieved, either because cancellation is requested or the source is empty and completed, the returned task will be canceled.</returns>
      <param name="source">The source from which to asynchronously receive.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> which may be used to cancel the receive operation.</param>
      <typeparam name="TOutput">Specifies the type of data contained in the source.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)">
      <summary>Asynchronously receives a value from the specified source.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous receive operation. When an item is successfully received from the source, the returned task will be completed and its <see cref="P:System.Threading.Tasks.Task`1.Result" /> will return the received item. If an item cannot be retrieved, either because the timeout expires or the source is empty and completed, the returned task will be canceled.</returns>
      <param name="source">The source from which to asynchronously receive.</param>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.</param>
      <typeparam name="TOutput">Specifies the type of data contained in the source.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out-or-<paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)">
      <summary>Asynchronously receives a value from the specified source.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous receive operation. When an item is successfully received from the source, the returned task will be completed and its <see cref="P:System.Threading.Tasks.Task`1.Result" /> will return the received item. If an item cannot be retrieved, either because the timeout expires, cancellation is requested, or the source is empty and completed, the returned task will be canceled.</returns>
      <param name="source">The source from which to asynchronously receive.</param>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> which may be used to cancel the receive operation.</param>
      <typeparam name="TOutput">Specifies the type of data contained in the source.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out-or-<paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})">
      <summary>Synchronously receives an item from the source.</summary>
      <returns>The received item.</returns>
      <param name="source">The source from which to receive.</param>
      <typeparam name="TOutput">Specifies the type of data contained in the source.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">No item could be received from the source.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)">
      <summary>Synchronously receives an item from the source.</summary>
      <returns>The received item.</returns>
      <param name="source">The source from which to receive.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> which may be used to cancel the receive operation.</param>
      <typeparam name="TOutput">Specifies the type of data contained in the source.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">No item could be received from the source.</exception>
      <exception cref="T:System.OperationCanceledException">The operation was canceled before an item was received from the source.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)">
      <summary>Synchronously receives an item from the source.</summary>
      <returns>The received item.</returns>
      <param name="source">The source from which to receive.</param>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.</param>
      <typeparam name="TOutput">Specifies the type of data contained in the source.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out-or-<paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">No item could be received from the source.</exception>
      <exception cref="T:System.TimeoutException">The specified timeout expired before an item was received from the source.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)">
      <summary>Synchronously receives an item from the source.</summary>
      <returns>The received item.</returns>
      <param name="source">The source from which to receive.</param>
      <param name="timeout">A <see cref="T:System.TimeSpan" /> that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.</param>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> which may be used to cancel the receive operation.</param>
      <typeparam name="TOutput">Specifies the type of data contained in the source.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out-or-<paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.InvalidOperationException">No item could be received from the source.</exception>
      <exception cref="T:System.TimeoutException">The specified timeout expired before an item was received from the source.</exception>
      <exception cref="T:System.OperationCanceledException">The operation was canceled before an item was received from the source.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})">
      <summary>Provides a <see cref="T:System.Threading.Tasks.Task`1" /> that asynchronously monitors the source for available output.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that informs of whether and when more output is available. If, when the task completes, its <see cref="P:System.Threading.Tasks.Task`1.Result" /> is true, more output is available in the source (though another consumer of the source may retrieve the data).  If it returns false, more output is not and will never be available, due to the source completing prior to output being available.</returns>
      <param name="source">The source to monitor.</param>
      <typeparam name="TOutput">Specifies the type of data contained in the source.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)">
      <summary>Provides a <see cref="T:System.Threading.Tasks.Task`1" /> that asynchronously monitors the source for available output.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that informs of whether and when more output is available. If, when the task completes, its <see cref="P:System.Threading.Tasks.Task`1.Result" /> is true, more output is available in the source (though another consumer of the source may retrieve the data). If it returns false, more output is not and will never be available, due to the source completing prior to output being available. If it returns false, more output is not and will never be available, due to the source completing prior to output being available.</returns>
      <param name="source">The source to monitor.</param>
      <param name="cancellationToken">The cancellation token with which to cancel the asynchronous operation.</param>
      <typeparam name="TOutput">Specifies the type of data contained in the source.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate``2(System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1})">
      <summary>Encapsulates a target and a source into a single propagator.</summary>
      <returns>The encapsulated target and source.</returns>
      <param name="target">The target to encapsulate.</param>
      <param name="source">The source to encapsulate.</param>
      <typeparam name="TInput">Specifies the type of input expected by the target.</typeparam>
      <typeparam name="TOutput">Specifies the type of output produced by the source.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1})">
      <summary>Monitors two dataflow sources, invoking the provided handler for whichever source makes data available first.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous choice. If both sources are completed prior to the choice completing, the resulting task will be canceled. When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state and will contain the unhandled exception. Otherwise, the task will end with its <see cref="P:System.Threading.Tasks.Task`1.Result" /> set to either 0 or 1 to represent the first or second source, respectively.This method will only consume an element from one of the two data sources, never both.</returns>
      <param name="source1">The first source.</param>
      <param name="action1">The handler to execute on data from the first source.</param>
      <param name="source2">The second source.</param>
      <param name="action2">The handler to execute on data from the second source.</param>
      <typeparam name="T1">Specifies type of data contained in the first source.</typeparam>
      <typeparam name="T2">Specifies type of data contained in the second source.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="source1" /> is null.-or-The <paramref name="action1" /> is null.-or-The <paramref name="source2" /> is null.-or-The <paramref name="action2" /> is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary>Monitors two dataflow sources, invoking the provided handler for whichever source makes data available first.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous choice. If both sources are completed prior to the choice completing, or if the <see cref="T:System.Threading.CancellationToken" /> provided as part of <paramref name="dataflowBlockOptions" /> is canceled prior to the choice completing, the resulting task will be canceled. When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state and will contain the unhandled exception. Otherwise, the task will end with its <see cref="P:System.Threading.Tasks.Task`1.Result" /> set to either 0 or 1 to represent the first or second source, respectively.This method will only consume an element from one of the two data sources, never both. If cancellation is requested after an element has been received, the cancellation request will be ignored, and the relevant handler will be allowed to execute. </returns>
      <param name="source1">The first source.</param>
      <param name="action1">The handler to execute on data from the first source.</param>
      <param name="source2">The second source.</param>
      <param name="action2">The handler to execute on data from the second source.</param>
      <param name="dataflowBlockOptions">The options with which to configure this choice.</param>
      <typeparam name="T1">Specifies type of data contained in the first source.</typeparam>
      <typeparam name="T2">Specifies type of data contained in the second source.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="source1" /> is null.-or-The <paramref name="action1" /> is null.-or-The <paramref name="source2" /> is null.-or-The <paramref name="action2" /> is null.-or-The <paramref name="dataflowBlockOptions" /> is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2})">
      <summary>Monitors three dataflow sources, invoking the provided handler for whichever source makes data available first.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous choice. If all sources are completed prior to the choice completing, the resulting task will be canceled. When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state and will contain the unhandled exception. Otherwise, the task will end with its <see cref="P:System.Threading.Tasks.Task`1.Result" /> set to the 0-based index of the source.This method will only consume an element from one of the data sources, never more than one.</returns>
      <param name="source1">The first source.</param>
      <param name="action1">The handler to execute on data from the first source.</param>
      <param name="source2">The second source.</param>
      <param name="action2">The handler to execute on data from the second source.</param>
      <param name="source3">The third source.</param>
      <param name="action3">The handler to execute on data from the third source.</param>
      <typeparam name="T1">Specifies type of data contained in the first source.</typeparam>
      <typeparam name="T2">Specifies type of data contained in the second source.</typeparam>
      <typeparam name="T3">Specifies type of data contained in the third source.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="source1" /> is null.-or-The <paramref name="action1" /> is null.-or-The <paramref name="source2" /> is null.-or-The <paramref name="action2" /> is null.-or-The <paramref name="source3" /> is null.-or-The <paramref name="action3" /> is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary>Monitors three dataflow sources, invoking the provided handler for whichever source makes data available first.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous choice. If all sources are completed prior to the choice completing, or if the <see cref="T:System.Threading.CancellationToken" /> provided as part of <paramref name="dataflowBlockOptions" /> is canceled prior to the choice completing, the resulting task will be canceled. When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state and will contain the unhandled exception. Otherwise, the task will end with its <see cref="P:System.Threading.Tasks.Task`1.Result" /> set to the 0-based index of the source.This method will only consume an element from one of the data sources, never more than one. If cancellation is requested after an element has been received, the cancellation request will be ignored, and the relevant handler will be allowed to execute. </returns>
      <param name="source1">The first source.</param>
      <param name="action1">The handler to execute on data from the first source.</param>
      <param name="source2">The second source.</param>
      <param name="action2">The handler to execute on data from the second source.</param>
      <param name="source3">The third source.</param>
      <param name="action3">The handler to execute on data from the third source.</param>
      <param name="dataflowBlockOptions">The options with which to configure this choice.</param>
      <typeparam name="T1">Specifies type of data contained in the first source.</typeparam>
      <typeparam name="T2">Specifies type of data contained in the second source.</typeparam>
      <typeparam name="T3">Specifies type of data contained in the third source.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="source1" /> is null.-or-The <paramref name="action1" /> is null.-or-The <paramref name="source2" /> is null.-or-The <paramref name="action2" /> is null.-or-The <paramref name="source3" /> is null.-or-The <paramref name="action3" /> is null.-or-The <paramref name="dataflowBlockOptions" /> is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.AsObservable``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})">
      <summary>Creates a new <see cref="T:System.IObservable`1" /> abstraction over the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <returns>An <see cref="T:System.IObservable`1" /> that enables observers to be subscribed to the source.</returns>
      <param name="source">The source to wrap.</param>
      <typeparam name="TOutput">Specifies the type of data contained in the source.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.AsObserver``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0})">
      <summary>Creates a new <see cref="T:System.IObserver`1" /> abstraction over the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</summary>
      <returns>An observer that wraps the target block.</returns>
      <param name="target">The target to wrap.</param>
      <typeparam name="TInput">Specifies the type of input accepted by the target block.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.NullTarget``1">
      <summary>Gets a target block that synchronously accepts all messages offered to it and drops them.</summary>
      <returns>A <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> that accepts and subsequently drops all offered messages.</returns>
      <typeparam name="TInput">The type of the messages this block can accept.</typeparam>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.IDataflowBlock">
      <summary>Represents a dataflow block.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.IDataflowBlock.Complete">
      <summary>Signals to the <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> that it should not accept nor produce any more messages nor consume any more postponed messages.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.IDataflowBlock.Fault(System.Exception)">
      <summary>Causes the <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> to complete in a <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state.</summary>
      <param name="exception">The <see cref="T:System.Exception" /> that caused the faulting.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="exception" /> is null.</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.IDataflowBlock.Completion">
      <summary>Gets a <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation and completion of the dataflow block.</summary>
      <returns>The task.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.ITargetBlock`1">
      <summary>Represents a dataflow block that is a target for data.</summary>
      <typeparam name="TInput">Specifies the type of data accepted by the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>Offers a message to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, giving the target the opportunity to consume or postpone the message.</summary>
      <returns>The status of the offered message. If the message was accepted by the target, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> is returned, and the source should no longer use the offered message, because it is now owned by the target. If the message was postponed by the target, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> is returned as a notification that the target may later attempt to consume or reserve the message; in the meantime, the source still owns the message and may offer it to other blocks.If the target would have otherwise postponed message, but <paramref name="source" /> was null, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> is instead returned. If the target tried to accept the message but missed it due to the source delivering the message to another target or simply discarding it, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" /> is returned. If the target chose not to accept the message, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> is returned. If the target chose not to accept the message and will never accept another message from this source, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" /> is returned.</returns>
      <param name="messageHeader">A <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> instance that represents the header of the message being offered.</param>
      <param name="messageValue">The value of the message being offered.</param>
      <param name="source">The <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> offering the message. This may be null.</param>
      <param name="consumeToAccept">Set to true to instruct the target to call <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage()" /> synchronously during the call to <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage()" />, prior to returning <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />, in order to consume the message.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="messageHeader" /> is not valid.-or-<paramref name="consumeToAccept" /> may only be true if provided with a non-null <paramref name="source" />.</exception>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.ISourceBlock`1">
      <summary>Represents a dataflow block that is a source of data.</summary>
      <typeparam name="TOutput">Specifies the type of data supplied by the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Links the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> to the specified <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</summary>
      <returns>An IDisposable that, upon calling Dispose, will unlink the source from the target.</returns>
      <param name="target">The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> to which to connect this source.</param>
      <param name="linkOptions">A <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> instance that configures the link.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is null (Nothing in Visual Basic) or <paramref name="linkOptions" /> is null (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
      <summary>Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> to accept and consume a <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> previously offered by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <returns>The value of the consumed message. This may correspond to a different <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> instance than was previously reserved and passed as the <paramref name="messageHeader" /> to <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage()" />. The consuming <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> must use the returned value instead of the value passed as <paramref name="messageValue" /> through <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage()" />.If the message requested is not available, the return value will be null.</returns>
      <param name="messageHeader">The <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> of the message being consumed.</param>
      <param name="target">The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> consuming the message.</param>
      <param name="messageConsumed">true if the message was successfully consumed; otherwise, false.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="messageHeader" /> is not valid.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="target" /> is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> to reserve a previously offered <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <returns>true if the message was successfully reserved; otherwise, false.</returns>
      <param name="messageHeader">The <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> of the message being reserved.</param>
      <param name="target">The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> reserving the message.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="messageHeader" /> is not valid.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="target" /> is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>Called by a linked <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> to release a previously reserved <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> by this <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">The <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> of the reserved message being released.</param>
      <param name="target">The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> releasing the message it previously reserved.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="messageHeader" /> is not valid.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="target" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="target" /> did not have the message reserved.</exception>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.IPropagatorBlock`2">
      <summary>Represents a dataflow block that is both a target for data and a source of data.</summary>
      <typeparam name="TInput">Specifies the type of data accepted by the <see cref="T:System.Threading.Tasks.Dataflow.IPropagatorBlock`2" />.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <typeparam name="TOutput">Specifies the type of data supplied by the <see cref="T:System.Threading.Tasks.Dataflow.IPropagatorBlock`2" />.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1">
      <summary>Represents a dataflow block that supports receiving messages without linking.</summary>
      <typeparam name="TOutput">Specifies the type of data supplied by the <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1.TryReceive(System.Predicate{`0},`0@)">
      <summary>Attempts to synchronously receive an available output item from the<see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <returns>true if an item could be received; otherwise, false.</returns>
      <param name="filter">The predicate value must successfully pass in order for it to be received. <paramref name="filter" /> may be null, in which case all items will pass.</param>
      <param name="item">The item received from the source.</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1.TryReceiveAll(System.Collections.Generic.IList{`0}@)">
      <summary>Attempts to synchronously receive all available items from the <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <returns>true if one or more items could be received; otherwise, false.</returns>
      <param name="items">The items received from the source.</param>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions">
      <summary>Provides options used to configure the processing performed by dataflow blocks.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowBlockOptions.Unbounded">
      <summary>A constant used to specify an unlimited quantity for <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" /> members that provide an upper bound. This field is constant.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockOptions.#ctor">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" />.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.TaskScheduler">
      <summary>Gets or sets the <see cref="T:System.Threading.Tasks.TaskScheduler" /> to use for scheduling tasks.</summary>
      <returns>The task scheduler.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.CancellationToken">
      <summary>Gets or sets the <see cref="T:System.Threading.CancellationToken" /> to monitor for cancellation requests.</summary>
      <returns>The token.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.MaxMessagesPerTask">
      <summary>Gets or sets the maximum number of messages that may be processed per task.</summary>
      <returns>The maximum number of messages.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.BoundedCapacity">
      <summary>Gets or sets the maximum number of messages that may be buffered by the block.</summary>
      <returns>The maximum number of messages.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.NameFormat">
      <summary>Gets or sets the format string to use when a block is queried for its name.</summary>
      <returns>The format string to use when a block is queried for its name.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions">
      <summary>Provides options used to configure the processing performed by dataflow blocks that process each message through the invocation of a user-provided delegate. These are dataflow blocks such as <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> and <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions.#ctor">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" />.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions.MaxDegreeOfParallelism">
      <summary>Gets the maximum number of messages that may be processed by the block concurrently.</summary>
      <returns>The maximum number of messages.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions.SingleProducerConstrained">
      <summary>Gets whether code using the dataflow block is constrained to one producer at a time.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions">
      <summary>Provides options used to configure the processing performed by dataflow blocks that group together multiple messages. These are dataflow blocks such as <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" /> and <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions.#ctor">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions" />.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions.Greedy">
      <summary>Gets or sets the Boolean value to use to determine whether to greedily consume offered messages.</summary>
      <returns>true to greedily consume offered messages; otherwise, false.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions.MaxNumberOfGroups">
      <summary>Gets or sets the maximum number of groups that should be generated by the block.</summary>
      <returns>The maximum number of groups.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions">
      <summary>Provides options used to configure a link between dataflow blocks.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowLinkOptions.#ctor">
      <summary>Initializes the <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" />.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowLinkOptions.PropagateCompletion">
      <summary>Gets or sets whether the linked target will have completion and faulting notification propagated to it automatically.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowLinkOptions.MaxMessages">
      <summary>Gets or sets the maximum number of messages that may be consumed across the link.</summary>
      <returns>Returns <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowLinkOptions.Append">
      <summary>Gets or sets whether the link should be appended to the source’s list of links, or whether it should be prepended.</summary>
      <returns>Returns <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader">
      <summary>Provides a container of data attributes for passing between dataflow blocks.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.#ctor(System.Int64)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> with the specified attributes.</summary>
      <param name="id">The ID of the message. Must be unique within the originating source block. It does not need to be globally unique.</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.Equals(System.Threading.Tasks.Dataflow.DataflowMessageHeader)">
      <summary>Checks two <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> instances for equality by ID without boxing.</summary>
      <returns>true if the instances are equal; otherwise, false.</returns>
      <param name="other">Another <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> instance.</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.Equals(System.Object)">
      <summary>Checks boxed <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> instances for equality by ID.</summary>
      <returns>true if the instances are equal; otherwise, false.</returns>
      <param name="obj">A boxed <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> instance.</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.GetHashCode">
      <summary>Generates a hash code for the <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> instance.</summary>
      <returns>The hash code.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.op_Equality(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.DataflowMessageHeader)">
      <summary>Checks two <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> instances for equality by ID.</summary>
      <returns>true if the instances are equal; otherwise, false.</returns>
      <param name="left">A <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> instance.</param>
      <param name="right">A <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> instance.</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.op_Inequality(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.DataflowMessageHeader)">
      <summary>Checks two <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> instances for non-equality by ID.</summary>
      <returns>true if the instances are not equal; otherwise, false.</returns>
      <param name="left">A <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> instance.</param>
      <param name="right">A <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> instance.</param>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowMessageHeader.IsValid">
      <summary>Gets the validity of the message.</summary>
      <returns>true if the ID of the message is different from 0. false if the ID of the message is 0.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowMessageHeader.Id">
      <summary>Gets the ID of the message within the source.</summary>
      <returns>The ID contained in the <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> instance.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowMessageStatus">
      <summary>Represents the status of a <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> when passed between dataflow blocks.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted">
      <summary>Indicates that the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> accepted the message. Once a target has accepted a message, it is wholly owned by the target.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined">
      <summary>Indicates that the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> declined the message. The <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> still owns the message.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed">
      <summary>Indicates that the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> postponed the message for potential consumption at a later time.  The <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> still owns the message.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable">
      <summary>Indicates that the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> tried to accept the message from the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />, but the message was no longer available.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently">
      <summary>Indicates that the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> declined the message. The <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> still owns the message.  Additionally, the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> will decline all future messages sent by the source.</summary>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.ActionBlock`1">
      <summary>Provides a dataflow block that invokes a provided <see cref="T:System.Action`1" /> delegate for every data element received.</summary>
      <typeparam name="TInput">The type of data that this <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> operates on.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Action{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> class with the specified action.</summary>
      <param name="action">The action to invoke with each data element received.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Action{`0},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> class with the specified action and configuration options.</summary>
      <param name="action">The action to invoke with each data element received.</param>
      <param name="dataflowBlockOptions">The options with which to configure this <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.-or-<paramref name="dataflowBlockOptions" /> is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Func{`0,System.Threading.Tasks.Task})">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> class with the specified action.</summary>
      <param name="action">The action to invoke with each data element received.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Func{`0,System.Threading.Tasks.Task},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary>Initializes a new instance of the <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> class with the specified action and configuration options.</summary>
      <param name="action">The action to invoke with each data element received.</param>
      <param name="dataflowBlockOptions">The options with which to configure this <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is null.-or-<paramref name="dataflowBlockOptions" /> is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.Complete">
      <summary>Signals to the dataflow block that it shouldn't accept or produce any more messages and shouldn't consume any more postponed messages.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.Post(`0)">
      <summary>Posts an item to the target dataflow block.</summary>
      <returns>The number of input items.</returns>
      <param name="item">The item being offered to the target.</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.ToString">
      <summary>Returns a string that represents the formatted name of this <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> instance.</summary>
      <returns>A string that represents the formatted name of this <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> nstance.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.ActionBlock`1.Completion">
      <summary>Gets a <see cref="T:System.Threading.Tasks.Task" /> object that represents the asynchronous operation and completion of the dataflow block.</summary>
      <returns>The completed task.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.ActionBlock`1.InputCount">
      <summary>Gets the number of input items waiting to be processed by this block.</summary>
      <returns>The number of input items waiting to be processed by this block.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BatchBlock`1">
      <summary>Provides a dataflow block that batches inputs into arrays.</summary>
      <typeparam name="T">Specifies the type of data put into batches.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.#ctor(System.Int32)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" /> with the specified batch size.</summary>
      <param name="batchSize">The number of items to group into a batch.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="batchSize" /> must be positive.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.#ctor(System.Int32,System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" /> with the specified batch size, declining option, and block options.</summary>
      <param name="batchSize">The number of items to group into a batch.</param>
      <param name="dataflowBlockOptions">The options with which to configure this <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="batchSize" /> must be positive.-or-The <paramref name="batchSize" /> must be smaller than the value of the <see cref="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.BoundedCapacity" /> option if a non-default value has been set.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="dataflowBlockOptions" /> is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.Complete">
      <summary>Signals to the <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> that it should not accept nor produce any more messages nor consume any more postponed messages.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.TriggerBatch">
      <summary>Triggers the <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" /> to initiate a batching operation even if the number of currently queued or postponed items is less than the <see cref="P:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchSize" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0[]},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Links the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> to the specified <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</summary>
      <returns>An IDisposable that, upon calling Dispose, will unlink the source from the target.</returns>
      <param name="target">The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> to which to connect this source.</param>
      <param name="linkOptions">A <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> instance that configures the link.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is null (Nothing in Visual Basic) or <paramref name="linkOptions" /> is null (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.TryReceive(System.Predicate{`0[]},`0[]@)">
      <summary>Attempts to synchronously receive an available output item from the <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <returns>true if an item could be received; otherwise, false.</returns>
      <param name="filter">The predicate a value must successfully pass in order for it to be received. <paramref name="filter" /> may be null, in which case all items will pass.</param>
      <param name="item">The item received from the source.</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.TryReceiveAll(System.Collections.Generic.IList{`0[]}@)">
      <summary>Attempts to synchronously receive all available items from the <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <returns>true if one or more items could be received; otherwise, false.</returns>
      <param name="items">The items received from the source.</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.ToString">
      <summary>Returns a string that represents the formatted name of this <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> instance.</summary>
      <returns>A string that represents the formatted name of this <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> instance.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.OutputCount">
      <summary>Gets the number of output items available to be received from this block.</summary>
      <returns>The number of output items.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.Completion">
      <summary>Gets a <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation and completion of the dataflow block.</summary>
      <returns>The task.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchSize">
      <summary>Gets the size of the batches generated by this <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" />.</summary>
      <returns>The batch size.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2">
      <summary>Provides a dataflow block that batches a specified number of inputs of potentially differing types provided to one or more of its targets.</summary>
      <typeparam name="T1">Specifies the type of data accepted by the block's first target.</typeparam>
      <typeparam name="T2">Specifies the type of data accepted by the block's second target.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.#ctor(System.Int32)">
      <summary>Initializes a new<see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" /> with the specified configuration.</summary>
      <param name="batchSize">The number of items to group into a batch.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="batchSize" /> must be positive.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.#ctor(System.Int32,System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" /> with the specified configuration.</summary>
      <param name="batchSize">The number of items to group into a batch.</param>
      <param name="dataflowBlockOptions">The options with which to configure this <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="batchSize" /> must be positive.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="dataflowBlockOptions" /> is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Links the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> to the specified <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</summary>
      <returns>An IDisposable that, upon calling Dispose, will unlink the source from the target.</returns>
      <param name="target">The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> to which to connect this source.</param>
      <param name="linkOptions">A <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" />  instance that configures the link.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is null (Nothing in Visual Basic) or <paramref name="linkOptions" /> is null (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.TryReceive(System.Predicate{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}},System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}@)">
      <summary>Attempts to synchronously receive an available output item from the <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <returns>true if an item could be received; otherwise, false.</returns>
      <param name="filter">The predicate a value must successfully pass in order for it to be received. <paramref name="filter" /> may be null, in which case all items will pass.</param>
      <param name="item">The item received from the source.</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}}@)">
      <summary>Attempts to synchronously receive all available items from the <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <returns>true if one or more items could be received; otherwise, false.</returns>
      <param name="items">The items received from the source.</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.Complete">
      <summary>Signals to the <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> that it should not accept nor produce any more messages nor consume any more postponed messages.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.ToString">
      <summary>Returns a string that represents the formatted name of this <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> instance.</summary>
      <returns>A string that represents the formatted name of this <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> instance.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.BatchSize">
      <summary>Gets the size of the batches generated by this <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" />.</summary>
      <returns>The batch size.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.Target1">
      <summary>Gets a target that may be used to offer messages of the first type.</summary>
      <returns>The target.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.Target2">
      <summary>Gets a target that may be used to offer messages of the second type.</summary>
      <returns>The target.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.OutputCount">
      <summary>Gets the number of output items available to be received from this block.</summary>
      <returns>The number of output items.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.Completion">
      <summary>Gets a <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation and completion of the dataflow block.</summary>
      <returns>The task.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3">
      <summary>Provides a dataflow block that batches a specified number of inputs of potentially differing types provided to one or more of its targets.</summary>
      <typeparam name="T1">Specifies the type of data accepted by the block's first target.</typeparam>
      <typeparam name="T2">Specifies the type of data accepted by the block's second target.</typeparam>
      <typeparam name="T3">Specifies the type of data accepted by the block's third target.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.#ctor(System.Int32)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3" /> with the specified configuration.</summary>
      <param name="batchSize">The number of items to group into a batch.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="batchSize" /> must be positive.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.#ctor(System.Int32,System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3" /> with the specified configuration.</summary>
      <param name="batchSize">The number of items to group into a batch.</param>
      <param name="dataflowBlockOptions">The options with which to configure this <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="batchSize" /> must be positive.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="dataflowBlockOptions" /> is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Links the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> to the specified <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</summary>
      <returns>An IDisposable that, upon calling Dispose, will unlink the source from the target.</returns>
      <param name="target">The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> to which to connect this source.</param>
      <param name="linkOptions">true if the source should unlink from the target after successfully propagating a single message; false to remain connected even after a single message has been propagated.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is null (Nothing in Visual Basic) or <paramref name="linkOptions" /> is null (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.TryReceive(System.Predicate{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}},System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}@)">
      <summary>Attempts to synchronously receive an available output item from the <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <returns>true if an item could be received; otherwise, false.</returns>
      <param name="filter">The predicate a value must successfully pass in order for it to be received. <paramref name="filter" /> may be null in which case all items will pass.</param>
      <param name="item">The item received from the source.</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}}@)">
      <summary>Attempts to synchronously receive all available items from the <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <returns>true if one or more items could be received; otherwise, false.</returns>
      <param name="items">The items received from the source.</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Complete">
      <summary>Signals to the <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> that it should not accept nor produce any more messages nor consume any more postponed messages.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.ToString">
      <summary>Returns a string that represents the formatted name of this <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> instance.</summary>
      <returns>A string that represents the formatted name of this <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> instance.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.BatchSize">
      <summary>Gets the size of the batches generated by this <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3" />.</summary>
      <returns>The batch size.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Target1">
      <summary>Gets a target that may be used to offer messages of the first type.</summary>
      <returns>The target.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Target2">
      <summary>Gets a target that may be used to offer messages of the second type.</summary>
      <returns>The target.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Target3">
      <summary>Gets a target that may be used to offer messages of the third type.</summary>
      <returns>The target.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.OutputCount">
      <summary>Gets the number of output items available to be received from this block.</summary>
      <returns>The number of output items.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Completion">
      <summary>Gets a <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation and completion of the dataflow block.</summary>
      <returns>The task.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1">
      <summary>Provides a buffer for storing at most one element at time, overwriting each message with the next as it arrives.  Messages are broadcast to all linked targets, all of which may consume a clone of the message.</summary>
      <typeparam name="T">Specifies the type of the data buffered by this dataflow block.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.#ctor(System.Func{`0,`0})">
      <summary>Initializes the <see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1" /> with the specified cloning function.</summary>
      <param name="cloningFunction">The function to use to clone the data when offered to other blocks.</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.#ctor(System.Func{`0,`0},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary>Initializes the <see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1" /> with the specified cloning function and <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" />.</summary>
      <param name="cloningFunction">The function to use to clone the data when offered to other blocks.</param>
      <param name="dataflowBlockOptions">The options with which to configure this <see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="dataflowBlockOptions" /> is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.Complete">
      <summary>Signals to the <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> that it should not accept nor produce any more messages nor consume any more postponed messages.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Links the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> to the specified <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</summary>
      <returns>An IDisposable that, upon calling Dispose, will unlink the source from the target.</returns>
      <param name="target">The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> to which to connect this source.</param>
      <param name="linkOptions">A <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" />  instance that configures the link.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is null (Nothing in Visual Basic) or <paramref name="linkOptions" /> is null (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.TryReceive(System.Predicate{`0},`0@)">
      <summary>Attempts to synchronously receive an available output item from the <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <returns>true if an item could be received; otherwise, false.</returns>
      <param name="filter">The predicate a value must successfully pass in order for it to be received. <paramref name="filter" /> may be null, in which case all items will pass.</param>
      <param name="item">The item received from the source.</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.ToString">
      <summary>Returns a string that represents the formatted name of this <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> instance.</summary>
      <returns>A string that represents the formatted name of this <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> instance.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BroadcastBlock`1.Completion">
      <summary>Gets a <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation and completion of the dataflow block.</summary>
      <returns>The task.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BufferBlock`1">
      <summary>Provides a buffer for storing data.</summary>
      <typeparam name="T">Specifies the type of the data buffered by this dataflow block.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.#ctor">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Dataflow.BufferBlock`1" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.#ctor(System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Dataflow.BufferBlock`1" /> with the specified <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" />.</summary>
      <param name="dataflowBlockOptions">The options with which to configure this <see cref="T:System.Threading.Tasks.Dataflow.BufferBlock`1" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="dataflowBlockOptions" /> is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.Complete">
      <summary>Signals to the <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> that it should not accept nor produce any more messages nor consume any more postponed messages.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Links the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> to the specified <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</summary>
      <returns>An IDisposable that, upon calling Dispose, will unlink the source from the target.</returns>
      <param name="target">The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> to which to connect this source.</param>
      <param name="linkOptions">A <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" />  instance that configures the link.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is null (Nothing in Visual Basic) or <paramref name="linkOptions" /> is null (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.TryReceive(System.Predicate{`0},`0@)">
      <summary>Attempts to synchronously receive an available output item from the <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <returns>true if an item could be received; otherwise, false.</returns>
      <param name="filter">The predicate value must successfully pass in order for it to be received. <paramref name="filter" /> may be null, in which case all items will pass.</param>
      <param name="item">The item received from the source.</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.TryReceiveAll(System.Collections.Generic.IList{`0}@)">
      <summary>Attempts to synchronously receive all available items from the <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <returns>true if one or more items could be received; otherwise, false.</returns>
      <param name="items">The items received from the source.</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.ToString">
      <summary>Returns a string that represents the formatted name of this <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> instance.</summary>
      <returns>A string that represents the formatted name of this <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> instance.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BufferBlock`1.Count">
      <summary>Gets the number of items currently stored in the buffer.</summary>
      <returns>The number of items.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BufferBlock`1.Completion">
      <summary>Gets a <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation and completion of the dataflow block.</summary>
      <returns>The task.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.JoinBlock`2">
      <summary>Provides a dataflow block that joins across multiple dataflow sources, not necessarily of the same type, waiting for one item to arrive for each type before they’re all released together as a tuple consisting of one item per type.</summary>
      <typeparam name="T1">Specifies the type of data accepted by the block's first target.</typeparam>
      <typeparam name="T2">Specifies the type of data accepted by the block's second target.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.#ctor">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.#ctor(System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" />.</summary>
      <param name="dataflowBlockOptions">The options with which to configure this <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="dataflowBlockOptions" /> is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1}},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Links the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> to the specified <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</summary>
      <returns>An IDisposable that, upon calling Dispose, will unlink the source from the target.</returns>
      <param name="target">The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> to which to connect this source.</param>
      <param name="linkOptions">A <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> instance that configures the link.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is null (Nothing in Visual Basic) or <paramref name="linkOptions" /> is null (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.TryReceive(System.Predicate{System.Tuple{`0,`1}},System.Tuple{`0,`1}@)">
      <summary>Attempts to synchronously receive an available output item from the <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <returns>true if an item could be received; otherwise, false.</returns>
      <param name="filter">The predicate value must successfully pass in order for it to be received. <paramref name="filter" /> may be null, in which case all items will pass.</param>
      <param name="item">The item received from the source.</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{`0,`1}}@)">
      <summary>Attempts to synchronously receive all available items from the <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <returns>true if one or more items could be received; otherwise, false.</returns>
      <param name="items">The items received from the source.</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.Complete">
      <summary>Signals to the <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> that it should not accept nor produce any more messages nor consume any more postponed messages.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.ToString">
      <summary>Returns a string that represents the formatted name of this <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> instance.</summary>
      <returns>A string that represents the formatted name of this <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> instance.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.OutputCount">
      <summary>Gets the number of output items available to be received from this block.</summary>
      <returns>The number of output items.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.Completion">
      <summary>Gets a <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation and completion of the dataflow block.</summary>
      <returns>The task.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.Target1">
      <summary>Gets a target that may be used to offer messages of the first type.</summary>
      <returns>The target.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.Target2">
      <summary>Gets a target that may be used to offer messages of the second type.</summary>
      <returns>The target.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.JoinBlock`3">
      <summary>Provides a dataflow block that joins across multiple dataflow sources, which are not necessarily of the same type, waiting for one item to arrive for each type before they’re all released together as a tuple that contains one item per type.</summary>
      <typeparam name="T1">Specifies the type of data accepted by the block's first target.</typeparam>
      <typeparam name="T2">Specifies the type of data accepted by the block's second target.</typeparam>
      <typeparam name="T3">Specifies the type of data accepted by the block's third target.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.#ctor">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`3" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.#ctor(System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`3" />.</summary>
      <param name="dataflowBlockOptions">The options with which to configure this <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="dataflowBlockOptions" /> is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1,`2}},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Links the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> to the specified <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</summary>
      <returns>An IDisposable that, upon calling Dispose, will unlink the source from the target.</returns>
      <param name="target">The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> to which to connect this source.</param>
      <param name="linkOptions">A <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> instance that configures the link.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is null (Nothing in Visual Basic) or <paramref name="linkOptions" /> is null (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.TryReceive(System.Predicate{System.Tuple{`0,`1,`2}},System.Tuple{`0,`1,`2}@)">
      <summary>Attempts to synchronously receive an available output item from the <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <returns>true if an item could be received; otherwise, false.</returns>
      <param name="filter">The predicate value must successfully pass in order for it to be received. <paramref name="filter" /> may be null, in which case all items will pass.</param>
      <param name="item">The item received from the source.</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{`0,`1,`2}}@)">
      <summary>Attempts to synchronously receive all available items from the <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <returns>true if one or more items could be received; otherwise, false.</returns>
      <param name="items">The items received from the source.</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.Complete">
      <summary>Signals to the <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> that it should not accept nor produce any more messages nor consume any more postponed messages.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.ToString">
      <summary>Returns a string that represents the formatted name of this <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> instance.</summary>
      <returns>A string that represents the formatted name of this <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> instance.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.OutputCount">
      <summary>Gets the number of output items available to be received from this block.</summary>
      <returns>The number of output items.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.Completion">
      <summary>Gets a <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation and completion of the dataflow block.</summary>
      <returns>The task.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.Target1">
      <summary>Gets a target that may be used to offer messages of the first type.</summary>
      <returns>The target.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.Target2">
      <summary>Gets a target that may be used to offer messages of the second type.</summary>
      <returns>The target.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.Target3">
      <summary>Gets a target that may be used to offer messages of the third type.</summary>
      <returns>The target.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.TransformBlock`2">
      <summary>Provides a dataflow block that invokes a provided <see cref="T:System.Func`2" /> delegate for every data element received.</summary>
      <typeparam name="TInput">Specifies the type of data received and operated on by this <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" />.</typeparam>
      <typeparam name="TOutput">Specifies the type of data output by this <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" />.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,`1})">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> with the specified <see cref="T:System.Func`2" />.</summary>
      <param name="transform">The function to invoke with each data element received.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="transform" /> is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,`1},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> with the specified <see cref="T:System.Func`2" /> and <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" />.</summary>
      <param name="transform">The function to invoke with each data element received.</param>
      <param name="dataflowBlockOptions">The options with which to configure this <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="transform" /> is null.-or-The <paramref name="dataflowBlockOptions" /> is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{`1}})">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> with the specified <see cref="T:System.Func`2" />.</summary>
      <param name="transform">The function to invoke with each data element received.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="transform" /> is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{`1}},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> with the specified <see cref="T:System.Func`2" /> and <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" />.</summary>
      <param name="transform">The function to invoke with each data element received.</param>
      <param name="dataflowBlockOptions">The options with which to configure this <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="transform" /> is null.-or-The <paramref name="dataflowBlockOptions" /> is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.Complete">
      <summary>Signals to the <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> that it should not accept nor produce any more messages nor consume any more postponed messages.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Links the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> to the specified <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</summary>
      <returns>An IDisposable that, upon calling Dispose, will unlink the source from the target.</returns>
      <param name="target">The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> to which to connect this source.</param>
      <param name="linkOptions">A <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> instance that configures the link.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is null (Nothing in Visual Basic) or <paramref name="linkOptions" /> is null (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.TryReceive(System.Predicate{`1},`1@)">
      <summary>Attempts to synchronously receive an available output item from the <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <returns>true if an item could be received; otherwise, false.</returns>
      <param name="filter">The predicate value must successfully pass in order for it to be received. <paramref name="filter" /> may be null, in which case all items will pass.</param>
      <param name="item">The item received from the source.</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.TryReceiveAll(System.Collections.Generic.IList{`1}@)">
      <summary>Attempts to synchronously receive all available items from the <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <returns>true if one or more items could be received; otherwise, false.</returns>
      <param name="items">The items received from the source.</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.ToString">
      <summary>Returns a string that represents the formatted name of this <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> instance.</summary>
      <returns>A string that represents the formatted name of this <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> instance.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformBlock`2.Completion">
      <summary>Gets a <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation and completion of the dataflow block.</summary>
      <returns>The task.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformBlock`2.InputCount">
      <summary>Gets the number of input items waiting to be processed by this block.</summary>
      <returns>The number of input items.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformBlock`2.OutputCount">
      <summary>Gets the number of output items available to be received from this block.</summary>
      <returns>The number of output items.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2">
      <summary>Provides a dataflow block that invokes a provided <see cref="T:System.Func`2" /> delegate for every data element received.</summary>
      <typeparam name="TInput">Specifies the type of data received and operated on by this <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</typeparam>
      <typeparam name="TOutput">Specifies the type of data output by this <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Collections.Generic.IEnumerable{`1}})">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> with the specified function.</summary>
      <param name="transform">The function to invoke with each data element received. All of the data from the returned <see cref="T:System.Collections.Generic.IEnumerable`1" /> will be made available as output from this <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="transform" /> is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Collections.Generic.IEnumerable{`1}},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> with the specified function and <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" />.</summary>
      <param name="transform">The function to invoke with each data element received. All of the data from the returned in the <see cref="T:System.Collections.Generic.IEnumerable`1" /> will be made available as output from this <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</param>
      <param name="dataflowBlockOptions">The options with which to configure this <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="transform" /> is null.-or-The <paramref name="dataflowBlockOptions" /> is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`1}}})">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> with the specified function.</summary>
      <param name="transform">The function to invoke with each data element received. All of the data asynchronously returned in the <see cref="T:System.Collections.Generic.IEnumerable`1" /> will be made available as output from this <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="transform" /> is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`1}}},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> with the specified function and <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" />.</summary>
      <param name="transform">The function to invoke with each data element received. All of the data asynchronously returned in the <see cref="T:System.Collections.Generic.IEnumerable`1" /> will be made available as output from this <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</param>
      <param name="dataflowBlockOptions">The options with which to configure this <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="transform" /> is null.-or-The <paramref name="dataflowBlockOptions" /> is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.Complete">
      <summary>Signals to the <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> that it should not accept nor produce any more messages nor consume any more postponed messages.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Links the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> to the specified <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</summary>
      <returns>An IDisposable that, upon calling Dispose, will unlink the source from the target.</returns>
      <param name="target">The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> to which to connect this source.</param>
      <param name="linkOptions">A <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> instance that configures the link.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is null (Nothing in Visual Basic) or <paramref name="linkOptions" /> is null (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.TryReceive(System.Predicate{`1},`1@)">
      <summary>Attempts to synchronously receive an available output item from the <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <returns>true if an item could be received; otherwise, false.</returns>
      <param name="filter">The predicate value must successfully pass in order for it to be received. <paramref name="filter" /> may be null, in which case all items will pass.</param>
      <param name="item">The item received from the source.</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.TryReceiveAll(System.Collections.Generic.IList{`1}@)">
      <summary>Attempts to synchronously receive all available items from the <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <returns>true if one or more items could be received; otherwise, false.</returns>
      <param name="items">The items received from the source.</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.ToString">
      <summary>Returns a string that represents the formatted name of this <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> instance.</summary>
      <returns>A string that represents the formatted name of this <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> instance.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.Completion">
      <summary>Gets a <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation and completion of the dataflow block.</summary>
      <returns>The task.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.InputCount">
      <summary>Gets the number of input items waiting to be processed by this block.</summary>
      <returns>The number of input items.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.OutputCount">
      <summary>Gets the number of output items available to be received from this block.</summary>
      <returns>The number of output items.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1">
      <summary>Provides a buffer for receiving and storing at most one element in a network of dataflow blocks.</summary>
      <typeparam name="T">Specifies the type of the data buffered by this dataflow block.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.#ctor(System.Func{`0,`0})">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1" />.</summary>
      <param name="cloningFunction">The function to use to clone the data when offered to other blocks.</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.#ctor(System.Func{`0,`0},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary>Initializes a new <see cref="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1" /> with the specified <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" />.</summary>
      <param name="cloningFunction">The function to use to clone the data when offered to other blocks.</param>
      <param name="dataflowBlockOptions">The options with which to configure this <see cref="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="dataflowBlockOptions" /> is null.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.Complete">
      <summary>Signals to the <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> that it should not accept nor produce any more messages nor consume any more postponed messages.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.TryReceive(System.Predicate{`0},`0@)">
      <summary>Attempts to synchronously receive an available output item from the <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <returns>true if an item could be received; otherwise, false.</returns>
      <param name="filter">The predicate value must successfully pass in order for it to be received. <paramref name="filter" /> may be null, in which case all items will pass.</param>
      <param name="item">The item received from the source.</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Links the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> to the specified <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</summary>
      <returns>An IDisposable that, upon calling Dispose, will unlink the source from the target.</returns>
      <param name="target">The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> to which to connect this source.</param>
      <param name="linkOptions">A <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> instance that configures the link.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is null (Nothing in Visual Basic) or <paramref name="linkOptions" /> is null (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.ToString">
      <summary>Returns a string that represents the formatted name of this <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> instance.</summary>
      <returns>A string that represents the formatted name of this <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> instance.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.Completion">
      <summary>Gets a <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation and completion of the dataflow block.</summary>
      <returns>The task.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.IConnection.Proxy">
      <summary>
            Gets of sets proxy information for the connection.
            </summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Client.Connection">
      <summary>
            Provides client connections for SignalR services.
            </summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Client.Connection.DebugTextWriter">
      <summary>
            Default text writer
            </summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.Connection.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNet.SignalR.Client.Connection" /> class.
            </summary>
      <param name="url">The url to connect to.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.Connection.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNet.SignalR.Client.Connection" /> class.
            </summary>
      <param name="url">The url to connect to.</param>
      <param name="queryString">The query string data to pass to the server.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.Connection.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNet.SignalR.Client.Connection" /> class.
            </summary>
      <param name="url">The url to connect to.</param>
      <param name="queryString">The query string data to pass to the server.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.Connection.Start">
      <summary>
            Starts the <see cref="T:Microsoft.AspNet.SignalR.Client.Connection" />.
            </summary>
      <returns>A task that represents when the connection has started.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.Connection.Start(Microsoft.AspNet.SignalR.Client.Http.IHttpClient)">
      <summary>
            Starts the <see cref="T:Microsoft.AspNet.SignalR.Client.Connection" />.
            </summary>
      <param name="httpClient">The http client</param>
      <returns>A task that represents when the connection has started.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.Connection.Start(Microsoft.AspNet.SignalR.Client.Transports.IClientTransport)">
      <summary>
            Starts the <see cref="T:Microsoft.AspNet.SignalR.Client.Connection" />.
            </summary>
      <param name="transport">The transport to use.</param>
      <returns>A task that represents when the connection has started.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.Connection.Stop">
      <summary>
            Stops the <see cref="T:Microsoft.AspNet.SignalR.Client.Connection" /> and sends an abort message to the server.
            </summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.Connection.Stop(System.Exception)">
      <summary>
            Stops the <see cref="T:Microsoft.AspNet.SignalR.Client.Connection" /> and sends an abort message to the server.
            <param name="error">The error due to which the connection is being stopped.</param></summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.Connection.Stop(System.Exception,System.TimeSpan)">
      <summary>
            Stops the <see cref="T:Microsoft.AspNet.SignalR.Client.Connection" /> and sends an abort message to the server.
            <param name="error">The error due to which the connection is being stopped.</param><param name="timeout">The timeout</param></summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.Connection.Stop(System.TimeSpan)">
      <summary>
            Stops the <see cref="T:Microsoft.AspNet.SignalR.Client.Connection" /> and sends an abort message to the server.
            <param name="timeout">The timeout</param></summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.Connection.Send(System.String)">
      <summary>
            Sends data asynchronously over the connection.
            </summary>
      <param name="data">The data to send.</param>
      <returns>A task that represents when the data has been sent.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.Connection.Send(System.Object)">
      <summary>
            Sends an object that will be JSON serialized asynchronously over the connection.
            </summary>
      <param name="value">The value to serialize.</param>
      <returns>A task that represents when the data has been sent.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.Connection.AddClientCertificate(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>
            Adds a client certificate to the request
            </summary>
      <param name="certificate">Client Certificate</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.Connection.Dispose">
      <summary>
            Stop the connection, equivalent to calling connection.stop
            </summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.Connection.Dispose(System.Boolean)">
      <summary>
            Stop the connection, equivalent to calling connection.stop
            </summary>
      <param name="disposing">Set this to true to perform the dispose, false to do nothing</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Connection.TransportConnectTimeout">
      <summary>
            The amount of time a transport will wait (while connecting) before failing.
            This value is modified by adding the server's TransportConnectTimeout configuration value.
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Connection.DeadlockErrorTimeout">
      <summary>
            Gets or sets the amount of time a callback registered with "HubProxy.On" or
            "Connection.Received" may run before <see cref="E:Microsoft.AspNet.SignalR.Client.Connection.Error" /> will be called
            warning that a possible deadlock has been detected.
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Connection.LastError">
      <summary>
            Gets the last error encountered by the <see cref="T:Microsoft.AspNet.SignalR.Client.Connection" />.
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Connection.JsonSerializer">
      <summary>
            Gets or sets the serializer used by the connection
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Connection.CookieContainer">
      <summary>
            Gets or sets the cookies associated with the connection.
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Connection.Credentials">
      <summary>
            Gets or sets authentication information for the connection.
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Connection.Headers">
      <summary>
            Gets and sets headers for the requests
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Connection.Proxy">
      <summary>
            Gets of sets proxy information for the connection.
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Connection.Url">
      <summary>
            Gets the url for the connection.
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Connection.MessageId">
      <summary>
            Gets or sets the last message id for the connection.
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Connection.ConnectionId">
      <summary>
            Gets or sets the connection id for the connection.
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Connection.ConnectionToken">
      <summary>
            Gets or sets the connection token for the connection.
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Connection.GroupsToken">
      <summary>
            Gets or sets the groups token for the connection.
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Connection.Items">
      <summary>
            Gets a dictionary for storing state for a the connection.
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Connection.QueryString">
      <summary>
            Gets the querystring specified in the ctor.
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Connection.State">
      <summary>
            Gets the current <see cref="T:Microsoft.AspNet.SignalR.Client.ConnectionState" /> of the connection.
            </summary>
    </member>
    <member name="E:Microsoft.AspNet.SignalR.Client.Connection.Received">
      <summary>
            Occurs when the <see cref="T:Microsoft.AspNet.SignalR.Client.Connection" /> has received data from the server.
            </summary>
    </member>
    <member name="E:Microsoft.AspNet.SignalR.Client.Connection.Error">
      <summary>
            Occurs when the <see cref="T:Microsoft.AspNet.SignalR.Client.Connection" /> has encountered an error.
            </summary>
    </member>
    <member name="E:Microsoft.AspNet.SignalR.Client.Connection.Closed">
      <summary>
            Occurs when the <see cref="T:Microsoft.AspNet.SignalR.Client.Connection" /> is stopped.
            </summary>
    </member>
    <member name="E:Microsoft.AspNet.SignalR.Client.Connection.Reconnecting">
      <summary>
            Occurs when the <see cref="T:Microsoft.AspNet.SignalR.Client.Connection" /> starts reconnecting after an error.
            </summary>
    </member>
    <member name="E:Microsoft.AspNet.SignalR.Client.Connection.Reconnected">
      <summary>
            Occurs when the <see cref="T:Microsoft.AspNet.SignalR.Client.Connection" /> successfully reconnects after a timeout.
            </summary>
    </member>
    <member name="E:Microsoft.AspNet.SignalR.Client.Connection.StateChanged">
      <summary>
            Occurs when the <see cref="T:Microsoft.AspNet.SignalR.Client.Connection" /> state changes.
            </summary>
    </member>
    <member name="E:Microsoft.AspNet.SignalR.Client.Connection.ConnectionSlow">
      <summary>
            Occurs when the <see cref="T:Microsoft.AspNet.SignalR.Client.Connection" /> is about to timeout
            </summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.HeartbeatMonitor.#ctor(Microsoft.AspNet.SignalR.Client.IConnection,System.Object,System.TimeSpan)">
      <summary>
            Initializes a new instance of the HeartBeatMonitor Class 
            </summary>
      <param name="connection">
      </param>
      <param name="connectionStateLock">
      </param>
      <param name="beatInterval">How often to check connection status</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.HeartbeatMonitor.Start">
      <summary>
            Starts the timer that triggers heartbeats  
            </summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.HeartbeatMonitor.Beat">
      <summary>
            Callback function for the timer which determines if we need to notify the user or attempt to reconnect
            </summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.HeartbeatMonitor.Beat(System.TimeSpan)">
      <summary>
            Logic to determine if we need to notify the user or attempt to reconnect
            </summary>
      <param name="timeElapsed">
      </param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.HeartbeatMonitor.Dispose">
      <summary>
            Dispose off the timer
            </summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.HeartbeatMonitor.Dispose(System.Boolean)">
      <summary>
            Dispose off the timer
            </summary>
      <param name="disposing">
      </param>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Client.Http.IHttpClient">
      <summary>
            A client that can make http request.
            </summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.Http.IHttpClient.Initialize(Microsoft.AspNet.SignalR.Client.IConnection)">
      <summary>
            Initializes the Http Clients
            </summary>
      <param name="connection">Connection</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.Http.IHttpClient.Get(System.String,System.Action{Microsoft.AspNet.SignalR.Client.Http.IRequest},System.Boolean)">
      <summary>
            Makes an asynchronous http GET request to the specified url.
            </summary>
      <param name="url">The url to send the request to.</param>
      <param name="prepareRequest">A callback that initializes the request with default values.</param>
      <param name="isLongRunning">Indicates whether it is a long running request</param>
      <returns>A <see cref="T:Task{IResponse}" />.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.Http.IHttpClient.Post(System.String,System.Action{Microsoft.AspNet.SignalR.Client.Http.IRequest},System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)">
      <summary>
            Makes an asynchronous http POST request to the specified url.
            </summary>
      <param name="url">The url to send the request to.</param>
      <param name="prepareRequest">A callback that initializes the request with default values.</param>
      <param name="postData">form url encoded data.</param>
      <param name="isLongRunning">Indicates whether it is a long running request</param>
      <returns>A <see cref="T:Task{IResponse}" />.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Client.Http.IRequest">
      <summary>
            The http request
            </summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.Http.IRequest.Abort">
      <summary>
            Aborts the request.
            </summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.Http.IRequest.SetRequestHeaders(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>
            Set Request Headers
            </summary>
      <param name="headers">request headers</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Http.IRequest.UserAgent">
      <summary>
            The user agent for this request.
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Http.IRequest.Accept">
      <summary>
            The accept header for this request.
            </summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Client.Http.IResponse">
      <summary>
            The http response.
            </summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.Http.IResponse.GetStream">
      <summary>
            Gets the steam that represents the response body.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Client.HubConnection">
      <summary>
            A <see cref="T:Microsoft.AspNet.SignalR.Client.Connection" /> for interacting with Hubs.
            </summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.HubConnection.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNet.SignalR.Client.HubConnection" /> class.
            </summary>
      <param name="url">The url to connect to.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.HubConnection.#ctor(System.String,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNet.SignalR.Client.HubConnection" /> class.
            </summary>
      <param name="url">The url to connect to.</param>
      <param name="useDefaultUrl">Determines if the default "/signalr" path should be appended to the specified url.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.HubConnection.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNet.SignalR.Client.HubConnection" /> class.
            </summary>
      <param name="url">The url to connect to.</param>
      <param name="queryString">The query string data to pass to the server.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.HubConnection.#ctor(System.String,System.String,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNet.SignalR.Client.HubConnection" /> class.
            </summary>
      <param name="url">The url to connect to.</param>
      <param name="queryString">The query string data to pass to the server.</param>
      <param name="useDefaultUrl">Determines if the default "/signalr" path should be appended to the specified url.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.HubConnection.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNet.SignalR.Client.HubConnection" /> class.
            </summary>
      <param name="url">The url to connect to.</param>
      <param name="queryString">The query string data to pass to the server.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.HubConnection.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNet.SignalR.Client.HubConnection" /> class.
            </summary>
      <param name="url">The url to connect to.</param>
      <param name="queryString">The query string data to pass to the server.</param>
      <param name="useDefaultUrl">Determines if the default "/signalr" path should be appended to the specified url.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.HubConnection.CreateHubProxy(System.String)">
      <summary>
            Creates an <see cref="T:Microsoft.AspNet.SignalR.Client.IHubProxy" /> for the hub with the specified name.
            </summary>
      <param name="hubName">The name of the hub.</param>
      <returns>A <see cref="T:Microsoft.AspNet.SignalR.Client.IHubProxy" /></returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Client.HubProxyExtensions">
      <summary>
            Extensions to the <see cref="T:Microsoft.AspNet.SignalR.Client.IHubProxy" />.
            </summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.HubProxyExtensions.GetValue``1(Microsoft.AspNet.SignalR.Client.IHubProxy,System.String)">
      <summary>
            Gets the value of a state variable.
            </summary>
      <typeparam name="T">The type of the state variable</typeparam>
      <param name="proxy">The <see cref="T:Microsoft.AspNet.SignalR.Client.IHubProxy" />.</param>
      <param name="name">The name of the state variable.</param>
      <returns>The value of the state variable.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.HubProxyExtensions.On(Microsoft.AspNet.SignalR.Client.IHubProxy,System.String,System.Action)">
      <summary>
            Registers for an event with the specified name and callback
            </summary>
      <param name="proxy">The <see cref="T:Microsoft.AspNet.SignalR.Client.IHubProxy" />.</param>
      <param name="eventName">The name of the event.</param>
      <param name="onData">The callback</param>
      <returns>An <see cref="T:System.IDisposable" /> that represents this subscription.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.HubProxyExtensions.On``1(Microsoft.AspNet.SignalR.Client.IHubProxy,System.String,System.Action{``0})">
      <summary>
            Registers for an event with the specified name and callback
            </summary>
      <param name="proxy">The <see cref="T:Microsoft.AspNet.SignalR.Client.IHubProxy" />.</param>
      <param name="eventName">The name of the event.</param>
      <param name="onData">The callback</param>
      <returns>An <see cref="T:System.IDisposable" /> that represents this subscription.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.HubProxyExtensions.On``2(Microsoft.AspNet.SignalR.Client.IHubProxy,System.String,System.Action{``0,``1})">
      <summary>
            Registers for an event with the specified name and callback
            </summary>
      <param name="proxy">The <see cref="T:Microsoft.AspNet.SignalR.Client.IHubProxy" />.</param>
      <param name="eventName">The name of the event.</param>
      <param name="onData">The callback</param>
      <returns>An <see cref="T:System.IDisposable" /> that represents this subscription.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.HubProxyExtensions.On``3(Microsoft.AspNet.SignalR.Client.IHubProxy,System.String,System.Action{``0,``1,``2})">
      <summary>
            Registers for an event with the specified name and callback
            </summary>
      <param name="proxy">The <see cref="T:Microsoft.AspNet.SignalR.Client.IHubProxy" />.</param>
      <param name="eventName">The name of the event.</param>
      <param name="onData">The callback</param>
      <returns>An <see cref="T:System.IDisposable" /> that represents this subscription.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.HubProxyExtensions.On``4(Microsoft.AspNet.SignalR.Client.IHubProxy,System.String,System.Action{``0,``1,``2,``3})">
      <summary>
            Registers for an event with the specified name and callback
            </summary>
      <param name="proxy">The <see cref="T:Microsoft.AspNet.SignalR.Client.IHubProxy" />.</param>
      <param name="eventName">The name of the event.</param>
      <param name="onData">The callback</param>
      <returns>An <see cref="T:System.IDisposable" /> that represents this subscription.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.HubProxyExtensions.On(Microsoft.AspNet.SignalR.Client.IHubProxy,System.String,System.Action{System.Object})">
      <summary>
            Registers for an event with the specified name and callback
            </summary>
      <param name="proxy">The <see cref="T:Microsoft.AspNet.SignalR.Client.IHubProxy" />.</param>
      <param name="eventName">The name of the event.</param>
      <param name="onData">The callback</param>
      <returns>An <see cref="T:System.IDisposable" /> that represents this subscription.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.HubProxyExtensions.On``5(Microsoft.AspNet.SignalR.Client.IHubProxy,System.String,System.Action{``0,``1,``2,``3,``4})">
      <summary>
            Registers for an event with the specified name and callback
            </summary>
      <param name="proxy">The <see cref="T:Microsoft.AspNet.SignalR.Client.IHubProxy" />.</param>
      <param name="eventName">The name of the event.</param>
      <param name="onData">The callback</param>
      <returns>An <see cref="T:System.IDisposable" /> that represents this subscription.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.HubProxyExtensions.On``6(Microsoft.AspNet.SignalR.Client.IHubProxy,System.String,System.Action{``0,``1,``2,``3,``4,``5})">
      <summary>
            Registers for an event with the specified name and callback
            </summary>
      <param name="proxy">The <see cref="T:Microsoft.AspNet.SignalR.Client.IHubProxy" />.</param>
      <param name="eventName">The name of the event.</param>
      <param name="onData">The callback</param>
      <returns>An <see cref="T:System.IDisposable" /> that represents this subscription.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.HubProxyExtensions.On``7(Microsoft.AspNet.SignalR.Client.IHubProxy,System.String,System.Action{``0,``1,``2,``3,``4,``5,``6})">
      <summary>
            Registers for an event with the specified name and callback
            </summary>
      <param name="proxy">The <see cref="T:Microsoft.AspNet.SignalR.Client.IHubProxy" />.</param>
      <param name="eventName">The name of the event.</param>
      <param name="onData">The callback</param>
      <returns>An <see cref="T:System.IDisposable" /> that represents this subscription.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.HubProxyExtensions.Observe(Microsoft.AspNet.SignalR.Client.IHubProxy,System.String)">
      <summary>
            Registers a <see cref="T:Microsoft.AspNet.SignalR.Client.IHubProxy" /> event has an <see cref="T:IObservable{T}" />.
            </summary>
      <param name="proxy">The <see cref="T:Microsoft.AspNet.SignalR.Client.IHubProxy" /></param>
      <param name="eventName">The name of the event.</param>
      <returns>An <see cref="T:IObservable{object[]}" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Hubs.HubProgressUpdate.Id">
      <summary>
            The callback identifier
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Hubs.HubProgressUpdate.Data">
      <summary>
            The progress value
            </summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Client.IHubProxy">
      <summary>
             A client side proxy for a server side hub.
            </summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.IHubProxy.Invoke(System.String,System.Object[])">
      <summary>
            Executes a method on the server side hub asynchronously.
            </summary>
      <param name="method">The name of the method.</param>
      <param name="args">The arguments</param>
      <returns>A task that represents when invocation returned.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.IHubProxy.Invoke``1(System.String,System.Object[])">
      <summary>
            Executes a method on the server side hub asynchronously.
            </summary>
      <typeparam name="T">The type of result returned from the hub.</typeparam>
      <param name="method">The name of the method.</param>
      <param name="args">The arguments</param>
      <returns>A task that represents when invocation returned.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.IHubProxy.Invoke``1(System.String,System.Action{``0},System.Object[])">
      <summary>
            Executes a method on the server side hub asynchronously with progress updates.
            </summary>
      <param name="method">The name of the method.</param>
      <param name="onProgress">The callback to invoke when progress updates are received.</param>
      <param name="args">The arguments</param>
      <returns>A task that represents when invocation returned.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.IHubProxy.Invoke``2(System.String,System.Action{``1},System.Object[])">
      <summary>
            Executes a method on the server side hub asynchronously with progress updates.
            </summary>
      <typeparam name="TResult">The type of result returned from the hub.</typeparam>
      <typeparam name="TProgress">The type of progress update value.</typeparam>
      <param name="method">The name of the method.</param>
      <param name="onProgress">The callback to invoke when progress updates are received.</param>
      <param name="args">The arguments</param>
      <returns>A task that represents when invocation returned.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.IHubProxy.Subscribe(System.String)">
      <summary>
            Registers an event for the hub.
            </summary>
      <param name="eventName">The name of the event</param>
      <returns>A <see cref="T:Microsoft.AspNet.SignalR.Client.Hubs.Subscription" />.</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.IHubProxy.Item(System.String)">
      <summary>
            Gets or sets state on the hub.
            </summary>
      <param name="name">The name of the field.</param>
      <returns>The value of the field</returns>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.IHubProxy.JsonSerializer">
      <summary>
            Gets the serializer used by the connection.
            </summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Client.Hubs.HubResult">
      <summary>
            Represents the result of a hub invocation.
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Hubs.HubResult.Id">
      <summary>
            The callback identifier
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Hubs.HubResult.ProgressUpdate">
      <summary>
            The progress update of the invocation
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Hubs.HubResult.Result">
      <summary>
            The return value of the hub
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Hubs.HubResult.IsHubException">
      <summary>
            Indicates whether the Error is a <see cref="T:Microsoft.AspNet.SignalR.Client.HubException" />.
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Hubs.HubResult.Error">
      <summary>
            The error message returned from the hub invocation.
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Hubs.HubResult.ErrorData">
      <summary>
            Extra error data
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Hubs.HubResult.State">
      <summary>
            The caller state from this hub.
            </summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Client.Hubs.Hubservable">
      <summary>
        <see cref="T:System.IObservable{object[]}" /> implementation of a hub event.
            </summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Client.Hubs.Subscription">
      <summary>
            Represents a subscription to a hub method.
            </summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.ErrorExtensions.GetError(System.Exception)">
      <summary>
            Simplifies error recognition by unwrapping complex exceptions.
            </summary>
      <param name="ex">The thrown exception.</param>
      <returns>An unwrapped exception in the form of a SignalRError.</returns>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Client.SignalRError">
      <summary>
            Represents errors that are thrown by the SignalR client
            </summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.SignalRError.#ctor(System.Exception)">
      <summary>
            Create custom SignalR based error.
            </summary>
      <param name="exception">The exception to unwrap</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.SignalRError.ToString">
      <summary>
            Allow a SignalRError to be directly written to an output stream
            </summary>
      <returns>Exception error</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.SignalRError.Dispose">
      <summary>
            Dispose of the response
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.SignalRError.StatusCode">
      <summary>
            The status code of the error (if it was a WebException)
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.SignalRError.ResponseBody">
      <summary>
            The response body of the error, if it was a WebException and the response is readable
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.SignalRError.Exception">
      <summary>
            The unwrapped underlying exception
            </summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.Infrastructure.TaskQueueMonitor.Dispose">
      <summary>
            Dispose off the timer
            </summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.UrlEncoder">
      <summary>
            Helpers for encoding URI query components.
            </summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Client.KeepAliveData">
      <summary>
            Class to store all the Keep Alive properties
            </summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.Transports.AsyncStreamReader.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNet.SignalR.Client.Transports.AsyncStreamReader" /> class.
            </summary>
      <param name="stream">The stream to read asynchronously payloads from.</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.Transports.AsyncStreamReader.Start">
      <summary>
            Starts the reader.
            </summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.Transports.AsyncStreamReader.Close">
      <summary>
            Closes the connection and the underlying stream.
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Transports.AsyncStreamReader.Opened">
      <summary>
            Invoked when the stream is open.
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Transports.AsyncStreamReader.Closed">
      <summary>
            Invoked when the reader is closed while in the Processing state.
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Transports.AsyncStreamReader.Data">
      <summary>
            Invoked when there's a message if received in the stream.
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Transports.ClientTransportBase.Name">
      <summary>
            Gets transport name.
            </summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Infrastructure.Disposer">
      <summary>
            Helper class to manage disposing a resource at an arbirtary time
            </summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Client.Infrastructure.ThreadSafeInvoker">
      <summary>
            Allows for thread safe invocation of a delegate.
            </summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Client.Resources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Resources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Resources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Resources.Error_CertsCanOnlyBeAddedWhenDisconnected">
      <summary>
              Looks up a localized string similar to Client Certificates cannot be added after the connection has started..
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Resources.Error_ClientCallbackArgumentTypeMismatch">
      <summary>
              Looks up a localized string similar to A client callback for event {0} with {1} argument(s) was found, however an error occurred because {2}.
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Resources.Error_ClientCallbackInvalidNumberOfArguments">
      <summary>
              Looks up a localized string similar to A client callback for event {0} with {1} argument(s) could not be found.
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Resources.Error_ConnectionCancelled">
      <summary>
              Looks up a localized string similar to The connection was stopped before it could be started..
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Resources.Error_ConnectionHasNotBeenEstablished">
      <summary>
              Looks up a localized string similar to The connection has not been established..
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Resources.Error_DataCannotBeSentConnectionDisconnected">
      <summary>
              Looks up a localized string similar to Data cannot be sent because the connection is in the disconnected state. Call start before sending any data..
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Resources.Error_DataCannotBeSentDuringWebSocketReconnect">
      <summary>
              Looks up a localized string similar to Data cannot be sent because the WebSocket connection is reconnecting..
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Resources.Error_IncompatibleProtocolVersion">
      <summary>
              Looks up a localized string similar to You are using a version of the client that isn't compatible with the server. Client version {0}, server version {1}..
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Resources.Error_InvalidUriScheme">
      <summary>
              Looks up a localized string similar to Uri scheme '{0}' is not valid. The only valid uri schemes are 'http' and 'https'..
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Resources.Error_PossibleDeadlockDetected">
      <summary>
              Looks up a localized string similar to Possible deadlock detected. A callback registered with "HubProxy.On" or "Connection.Received" has been executing for at least {0} seconds..
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Resources.Error_ProcessResponseBeforeStart">
      <summary>
              Looks up a localized string similar to The ProcessResponse method cannot be called before the transport is started..
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Resources.Error_ProxiesCannotBeAddedConnectionStarted">
      <summary>
              Looks up a localized string similar to A HubProxy cannot be added after the connection has been started..
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Resources.Error_ReconnectTimeout">
      <summary>
              Looks up a localized string similar to Couldn't reconnect within the configured timeout of {0}, disconnecting..
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Resources.Error_ReconnectWindowTimeout">
      <summary>
              Looks up a localized string similar to The client has been inactive since {0} and it has exceeded the inactivity timeout of {1}. Stopping the connection..
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Resources.Error_ServerNegotiationFailed">
      <summary>
              Looks up a localized string similar to Server negotiation failed..
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Resources.Error_StartFailed">
      <summary>
              Looks up a localized string similar to Error during start request. Stopping the connection..
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Resources.Error_TaskCancelledException">
      <summary>
              Looks up a localized string similar to Request failed - task cancelled..
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Resources.Error_TransportCannotBeReused">
      <summary>
              Looks up a localized string similar to The transport instance passed to the Negotiate method has already been used. Use a new transport instance each time you start a new connection..
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Resources.Error_TransportFailedToConnect">
      <summary>
              Looks up a localized string similar to Transport failed trying to connect..
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Resources.Error_TransportTimedOutTryingToConnect">
      <summary>
              Looks up a localized string similar to Transport timed out trying to connect.
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Resources.Error_UrlCantContainQueryStringDirectly">
      <summary>
              Looks up a localized string similar to Url cannot contain query string directly. Pass query string values in using available overload..
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Resources.Message_ConnectionClosed">
      <summary>
              Looks up a localized string similar to Connection was disconnected before invocation result was received..
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Resources.Message_Reconnecting">
      <summary>
              Looks up a localized string similar to Connection started reconnecting before invocation result was received..
            </summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Client.StateChange">
      <summary>
            Represents a change in the connection state.
            </summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.StateChange.#ctor(Microsoft.AspNet.SignalR.Client.ConnectionState,Microsoft.AspNet.SignalR.Client.ConnectionState)">
      <summary>
            Creates a new stance of <see cref="T:Microsoft.AspNet.SignalR.Client.StateChange" />.
            </summary>
      <param name="oldState">The old state of the connection.</param>
      <param name="newState">The new state of the connection.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.StateChange.OldState">
      <summary>
            Gets the old state of the connection.
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.StateChange.NewState">
      <summary>
            Gets the new state of the connection.
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Transports.AutoTransport.SupportsKeepAlive">
      <summary>
            Indicates whether or not the active transport supports keep alive
            </summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.Transports.LongPollingTransport.StartPolling(Microsoft.AspNet.SignalR.Client.IConnection,System.String)">
      <summary>
            Starts the polling loop.
            </summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.Transports.LongPollingTransport.StopPolling">
      <summary>
            Fully stops the polling loop.
            </summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.Transports.LongPollingTransport.LostConnection(Microsoft.AspNet.SignalR.Client.IConnection)">
      <summary>
            Aborts the currently active polling request thereby forcing a reconnect.
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Transports.LongPollingTransport.ReconnectDelay">
      <summary>
            The time to wait after a connection drops to try reconnecting.
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Transports.LongPollingTransport.ErrorDelay">
      <summary>
            The time to wait after an error happens to continue polling.
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Transports.LongPollingTransport.SupportsKeepAlive">
      <summary>
            Indicates whether or not the transport supports keep alive
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Transports.ServerSentEventsTransport.SupportsKeepAlive">
      <summary>
            Indicates whether or not the transport supports keep alive
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Transports.ServerSentEventsTransport.ReconnectDelay">
      <summary>
            The time to wait after a connection drops to try reconnecting.
            </summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Client.Transports.ServerSentEvents.EventSourceStreamReader">
      <summary>
            Event source implementation for .NET. This isn't to the spec but it's enough to support SignalR's
            server.
            </summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.Transports.ServerSentEvents.EventSourceStreamReader.#ctor(Microsoft.AspNet.SignalR.Client.IConnection,System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNet.SignalR.Client.Transports.ServerSentEvents.EventSourceStreamReader" /> class.
            </summary>
      <param name="connection">The connection associated with this event source</param>
      <param name="stream">The stream to read event source payloads from.</param>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Transports.ServerSentEvents.EventSourceStreamReader.Message">
      <summary>
            Invoked when there's a message if received in the stream.
            </summary>
    </member>
    <member name="T:Microsoft.AspNet.SignalR.Client.Http.DefaultHttpClient">
      <summary>
            The default <see cref="T:Microsoft.AspNet.SignalR.Client.Http.IHttpClient" /> implementation.
            </summary>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.Http.DefaultHttpClient.Initialize(Microsoft.AspNet.SignalR.Client.IConnection)">
      <summary>
            Initialize the Http Clients
            </summary>
      <param name="connection">Connection</param>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.Http.DefaultHttpClient.Get(System.String,System.Action{Microsoft.AspNet.SignalR.Client.Http.IRequest},System.Boolean)">
      <summary>
            Makes an asynchronous http GET request to the specified url.
            </summary>
      <param name="url">The url to send the request to.</param>
      <param name="prepareRequest">A callback that initializes the request with default values.</param>
      <param name="isLongRunning">Indicates whether the request is long running</param>
      <returns>A <see cref="T:Task{IResponse}" />.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.Http.DefaultHttpClient.Post(System.String,System.Action{Microsoft.AspNet.SignalR.Client.Http.IRequest},System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)">
      <summary>
            Makes an asynchronous http POST request to the specified url.
            </summary>
      <param name="url">The url to send the request to.</param>
      <param name="prepareRequest">A callback that initializes the request with default values.</param>
      <param name="postData">form url encoded data.</param>
      <param name="isLongRunning">Indicates whether the request is long running</param>
      <returns>A <see cref="T:Task{IResponse}" />.</returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.Http.DefaultHttpClient.GetHttpClient(System.Boolean)">
      <summary>
            Returns the appropriate client based on whether it is a long running request
            </summary>
      <param name="isLongRunning">Indicates whether the request is long running</param>
      <returns>
      </returns>
    </member>
    <member name="M:Microsoft.AspNet.SignalR.Client.Transports.WebSocketWrapperRequest.PrepareRequest">
      <summary>
            Adds certificates, credentials, proxies and cookies to the request
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Transports.WebSocketTransport.ReconnectDelay">
      <summary>
            The time to wait after a connection drops to try reconnecting.
            </summary>
    </member>
    <member name="P:Microsoft.AspNet.SignalR.Client.Transports.WebSocketTransport.SupportsKeepAlive">
      <summary>
            Indicates whether or not the transport supports keep alive
            </summary>
    </member>
    <member name="T:Nito.AsyncEx.AsyncAutoResetEvent">
      <summary>
            An async-compatible auto-reset event.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncAutoResetEvent._queue">
      <summary>
            The queue of TCSs that other tasks are awaiting.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncAutoResetEvent._set">
      <summary>
            The current state of the event.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncAutoResetEvent._id">
      <summary>
            The semi-unique identifier for this instance. This is 0 if the id has not yet been created.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncAutoResetEvent._mutex">
      <summary>
            The object used for mutual exclusion.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncAutoResetEvent.#ctor(System.Boolean,Nito.AsyncEx.IAsyncWaitQueue{System.Object})">
      <summary>
            Creates an async-compatible auto-reset event.
            </summary>
      <param name="set">Whether the auto-reset event is initially set or unset.</param>
      <param name="queue">The wait queue used to manage waiters.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncAutoResetEvent.#ctor(System.Boolean)">
      <summary>
            Creates an async-compatible auto-reset event.
            </summary>
      <param name="set">Whether the auto-reset event is initially set or unset.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncAutoResetEvent.#ctor">
      <summary>
            Creates an async-compatible auto-reset event that is initially unset.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncAutoResetEvent.WaitAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously waits for this event to be set. If the event is set, this method will auto-reset it and return immediately, even if the cancellation token is already signalled. If the wait is canceled, then it will not auto-reset this event.
            </summary>
      <param name="cancellationToken">The cancellation token used to cancel this wait.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncAutoResetEvent.Wait(System.Threading.CancellationToken)">
      <summary>
            Synchronously waits for this event to be set. If the event is set, this method will auto-reset it and return immediately, even if the cancellation token is already signalled. If the wait is canceled, then it will not auto-reset this event. This method may block the calling thread.
            </summary>
      <param name="cancellationToken">The cancellation token used to cancel this wait.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncAutoResetEvent.WaitAsync">
      <summary>
            Asynchronously waits for this event to be set. If the event is set, this method will auto-reset it and return immediately.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncAutoResetEvent.Wait">
      <summary>
            Synchronously waits for this event to be set. If the event is set, this method will auto-reset it and return immediately. This method may block the calling thread.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncAutoResetEvent.Set">
      <summary>
            Sets the event, atomically completing a task returned by <see cref="o:WaitAsync" />. If the event is already set, this method does nothing.
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.AsyncAutoResetEvent.Id">
      <summary>
            Gets a semi-unique identifier for this asynchronous auto-reset event.
            </summary>
    </member>
    <member name="T:Nito.AsyncEx.AsyncBarrier">
      <summary>
            An async-compatible barrier.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncBarrier._sync">
      <summary>
            Mutex used to control access to other fields.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncBarrier._tcs">
      <summary>
            The TCS used to signal the current phase.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncBarrier._phase">
      <summary>
            The current phase.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncBarrier._count">
      <summary>
            The remaining count on this event.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncBarrier._participants">
      <summary>
            The total number of participants.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncBarrier._id">
      <summary>
            The semi-unique identifier for this instance. This is 0 if the id has not yet been created.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncBarrier._asyncPostPhaseAction">
      <summary>
            The asynchronous post-phase action, if any. Either this member or <see cref="F:Nito.AsyncEx.AsyncBarrier._syncPostPhaseAction" /> may be non-<c>null</c>, but not both.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncBarrier._syncPostPhaseAction">
      <summary>
            The synchonous post-phase action, if any. Either this member or <see cref="F:Nito.AsyncEx.AsyncBarrier._asyncPostPhaseAction" /> may be non-<c>null</c>, but not both.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncBarrier.#ctor(System.Int32)">
      <summary>
            Creates an async-compatible barrier.
            </summary>
      <param name="participants">The number of participants.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncBarrier.#ctor(System.Int32,System.Action{Nito.AsyncEx.AsyncBarrier})">
      <summary>
            Creates an async-compatible barrier.
            </summary>
      <param name="participants">The number of participants.</param>
      <param name="postPhaseAction">The post-phase action to execute at the end of every phase.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncBarrier.#ctor(System.Int32,System.Func{Nito.AsyncEx.AsyncBarrier,System.Threading.Tasks.Task})">
      <summary>
            Creates an async-compatible barrier.
            </summary>
      <param name="participants">The number of participants.</param>
      <param name="postPhaseAction">The post-phase action to execute at the end of every phase.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncBarrier.RunPostPhaseActionAsync">
      <summary>
            Starts executing the post-phase action and returns a <see cref="T:System.Threading.Tasks.Task" /> representing the action.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncBarrier.SignalAsync(System.Int32,System.Boolean)">
      <summary>
            Signals completions to this barrier. Returns the task for the current phase, which may already be completed. Returns <c>null</c> if the signal count is greater than the remaining participant count.
            </summary>
      <param name="signalCount">The number of completions to signal.</param>
      <param name="removeParticipants">Whether the participants should be removed permanently.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncBarrier.SignalAndWaitAsync(System.Int32)">
      <summary>
            Signals the specified number of completions to this barrier and asynchronously waits for the phase to complete. This method may not be called during the post-phase action.
            </summary>
      <param name="count">The number of completion signals to send to this barrier.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncBarrier.SignalAndWait(System.Int32)">
      <summary>
            Signals the specified number of completions to this barrier and synchronously waits for the phase to complete. This method may not be called during the post-phase action. This method may block the calling thread.
            </summary>
      <param name="count">The number of completion signals to send to this barrier.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncBarrier.SignalAndWait(System.Int32,System.Threading.CancellationToken)">
      <summary>
            Signals the specified number of completions to this barrier and synchronously waits for the phase to complete. This method may not be called during the post-phase action. This method may block the calling thread.
            </summary>
      <param name="count">The number of completion signals to send to this barrier.</param>
      <param name="cancellationToken">The cancellation token used to cancel the wait. If this signal completes the phase and there is no post-phase action, then this token is ignored.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncBarrier.SignalAndWaitAsync">
      <summary>
            Signals a completion to this barrier and asynchronously waits for the phase to complete. This method may not be called during the post-phase action.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncBarrier.SignalAndWait">
      <summary>
            Signals a completion to this barrier and asynchronously waits for the phase to complete. This method may not be called during the post-phase action. This method may block the calling thread.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncBarrier.SignalAndWait(System.Threading.CancellationToken)">
      <summary>
            Signals a completion to this barrier and asynchronously waits for the phase to complete. This method may not be called during the post-phase action. This method may block the calling thread.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncBarrier.AddParticipants(System.Int32)">
      <summary>
            Adds the specified number of participants to the barrier. Returns the current phase. This method may not be called during the post-phase action.
            </summary>
      <param name="count">The number of participants to add.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncBarrier.AddParticipants">
      <summary>
            Adds a participant to the barrier. Returns the current phase. This method may not be called during the post-phase action.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncBarrier.RemoveParticipantsAsync(System.Int32)">
      <summary>
            Removes the specified number of participants from the barrier. These participants must not have signalled the barrier for this phase yet. This method may not be called during the post-phase action.
            </summary>
      <param name="count">The number of participants to remove.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncBarrier.RemoveParticipantsAndWaitAsync(System.Int32)">
      <summary>
            Removes the specified number of participants from the barrier and asynchronously waits for the phase to complete. These participants must not have signalled the barrier for this phase yet. This method may not be called during the post-phase action.
            </summary>
      <param name="count">The number of participants to remove.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncBarrier.RemoveParticipantsAndWait(System.Int32)">
      <summary>
            Removes the specified number of participants from the barrier and synchronously waits for the phase to complete. These participants must not have signalled the barrier for this phase yet. This method may not be called during the post-phase action. This method may block the calling thread.
            </summary>
      <param name="count">The number of participants to remove.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncBarrier.RemoveParticipantsAndWait(System.Int32,System.Threading.CancellationToken)">
      <summary>
            Removes the specified number of participants from the barrier and synchronously waits for the phase to complete. These participants must not have signalled the barrier for this phase yet. This method may not be called during the post-phase action. This method may block the calling thread.
            </summary>
      <param name="count">The number of participants to remove.</param>
      <param name="cancellationToken">The cancellation token used to cancel the wait. If this removal completes the phase and there is no post-phase action, then this token is ignored.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncBarrier.RemoveParticipants(System.Int32)">
      <summary>
            Removes the specified number of participants from the barrier. These participants must not have signalled the barrier for this phase yet. This method may not be called during the post-phase action.
            </summary>
      <param name="count">The number of participants to remove.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncBarrier.RemoveParticipantsAsync">
      <summary>
            Removes one participant from the barrier. This participant must not have signalled the barrier for this phase yet. This method may not be called during the post-phase action.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncBarrier.RemoveParticipantsAndWaitAsync">
      <summary>
            Removes one participant from the barrier and asynchronously waits for the phase to complete. This participant must not have signalled the barrier for this phase yet. This method may not be called during the post-phase action.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncBarrier.RemoveParticipantsAndWait">
      <summary>
            Removes one participant from the barrier and synchronously waits for the phase to complete. This participant must not have signalled the barrier for this phase yet. This method may not be called during the post-phase action. This method may block the calling thread.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncBarrier.RemoveParticipantsAndWait(System.Threading.CancellationToken)">
      <summary>
            Removes one participant from the barrier and synchronously waits for the phase to complete. This participant must not have signalled the barrier for this phase yet. This method may not be called during the post-phase action. This method may block the calling thread.
            </summary>
      <param name="cancellationToken">The cancellation token used to cancel the wait. If this removal completes the phase and there is no post-phase action, then this token is ignored.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncBarrier.RemoveParticipants">
      <summary>
            Removes one participant from the barrier. This participant must not have signalled the barrier for this phase yet. This method may not be called during the post-phase action.
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.AsyncBarrier.Id">
      <summary>
            Gets a semi-unique identifier for this asynchronous barrier.
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.AsyncBarrier.CurrentPhaseNumber">
      <summary>
            Gets the current phase of the barrier.
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.AsyncBarrier.ParticipantCount">
      <summary>
            Gets the number of participants in this barrier.
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.AsyncBarrier.ParticipantsRemaining">
      <summary>
            Gets the number of participants for this phase that have not yet signalled.
            </summary>
    </member>
    <member name="T:Nito.AsyncEx.AsyncConditionVariable">
      <summary>
            An async-compatible condition variable. This type uses Mesa-style semantics (the notifying tasks do not yield).
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncConditionVariable._asyncLock">
      <summary>
            The lock associated with this condition variable.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncConditionVariable._queue">
      <summary>
            The queue of waiting tasks.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncConditionVariable._id">
      <summary>
            The semi-unique identifier for this instance. This is 0 if the id has not yet been created.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncConditionVariable._mutex">
      <summary>
            The object used for mutual exclusion.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncConditionVariable.#ctor(Nito.AsyncEx.AsyncLock,Nito.AsyncEx.IAsyncWaitQueue{System.Object})">
      <summary>
            Creates an async-compatible condition variable associated with an async-compatible lock.
            </summary>
      <param name="asyncLock">The lock associated with this condition variable.</param>
      <param name="queue">The wait queue used to manage waiters.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncConditionVariable.#ctor(Nito.AsyncEx.AsyncLock)">
      <summary>
            Creates an async-compatible condition variable associated with an async-compatible lock.
            </summary>
      <param name="asyncLock">The lock associated with this condition variable.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncConditionVariable.Notify">
      <summary>
            Sends a signal to a single task waiting on this condition variable. The associated lock MUST be held when calling this method, and it will still be held when this method returns.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncConditionVariable.NotifyAll">
      <summary>
            Sends a signal to all tasks waiting on this condition variable. The associated lock MUST be held when calling this method, and it will still be held when this method returns.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncConditionVariable.WaitAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously waits for a signal on this condition variable. The associated lock MUST be held when calling this method, and it will still be held when this method returns, even if the method is cancelled.
            </summary>
      <param name="cancellationToken">The cancellation signal used to cancel this wait.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncConditionVariable.Wait(System.Threading.CancellationToken)">
      <summary>
            Synchronously waits for a signal on this condition variable. This method may block the calling thread. The associated lock MUST be held when calling this method, and it will still be held when this method returns, even if the method is cancelled.
            </summary>
      <param name="cancellationToken">The cancellation signal used to cancel this wait.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncConditionVariable.WaitAsync">
      <summary>
            Asynchronously waits for a signal on this condition variable. The associated lock MUST be held when calling this method, and it will still be held when this method returns.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncConditionVariable.Wait">
      <summary>
            Synchronously waits for a signal on this condition variable. This method may block the calling thread. The associated lock MUST be held when calling this method, and it will still be held when this method returns.
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.AsyncConditionVariable.Id">
      <summary>
            Gets a semi-unique identifier for this asynchronous condition variable.
            </summary>
    </member>
    <member name="T:Nito.AsyncEx.AsyncContext">
      <summary>
            Provides a context for asynchronous operations. This class is threadsafe.
            </summary>
      <remarks>
        <para>
          <see cref="M:Nito.AsyncEx.AsyncContext.Execute" /> may only be called once. After <see cref="M:Nito.AsyncEx.AsyncContext.Execute" /> returns, the async context should be disposed.</para>
      </remarks>
    </member>
    <member name="T:Nito.AsyncEx.AsyncContext.AsyncContextSynchronizationContext">
      <summary>
            The <see cref="P:Nito.AsyncEx.AsyncContext.SynchronizationContext" /> implementation used by <see cref="T:Nito.AsyncEx.AsyncContext" />.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncContext.AsyncContextSynchronizationContext.#ctor(Nito.AsyncEx.AsyncContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.AsyncEx.AsyncContext.AsyncContextSynchronizationContext" /> class.
            </summary>
      <param name="context">The async context.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncContext.AsyncContextSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
      <summary>
            Dispatches an asynchronous message to the async context. If all tasks have been completed and the outstanding asynchronous operation count is zero, then this method has undefined behavior.
            </summary>
      <param name="d">The <see cref="T:System.Threading.SendOrPostCallback" /> delegate to call. May not be <c>null</c>.</param>
      <param name="state">The object passed to the delegate.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncContext.AsyncContextSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
      <summary>
            Dispatches an asynchronous message to the async context, and waits for it to complete.
            </summary>
      <param name="d">The <see cref="T:System.Threading.SendOrPostCallback" /> delegate to call. May not be <c>null</c>.</param>
      <param name="state">The object passed to the delegate.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncContext.AsyncContextSynchronizationContext.OperationStarted">
      <summary>
            Responds to the notification that an operation has started by incrementing the outstanding asynchronous operation count.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncContext.AsyncContextSynchronizationContext.OperationCompleted">
      <summary>
            Responds to the notification that an operation has completed by decrementing the outstanding asynchronous operation count.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncContext.AsyncContextSynchronizationContext.CreateCopy">
      <summary>
            Creates a copy of the synchronization context.
            </summary>
      <returns>A new <see cref="T:System.Threading.SynchronizationContext" /> object.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncContext.AsyncContextSynchronizationContext.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncContext.AsyncContextSynchronizationContext.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance. It is considered equal if it refers to the same underlying async context as this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
    </member>
    <member name="P:Nito.AsyncEx.AsyncContext.AsyncContextSynchronizationContext.Context">
      <summary>
            Gets the async context.
            </summary>
    </member>
    <member name="T:Nito.AsyncEx.AsyncContext.TaskQueue">
      <summary>
            A blocking queue.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncContext.TaskQueue.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.AsyncEx.AsyncContext.TaskQueue" /> class.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncContext.TaskQueue.GetConsumingEnumerable">
      <summary>
            Gets a blocking enumerable that removes items from the queue. This enumerable only completes after <see cref="M:Nito.AsyncEx.AsyncContext.TaskQueue.CompleteAdding" /> has been called.
            </summary>
      <returns>A blocking enumerable that removes items from the queue.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncContext.TaskQueue.GetScheduledTasks">
      <summary>
            Generates an enumerable of <see cref="T:System.Threading.Tasks.Task" /> instances currently queued to the scheduler waiting to be executed.
            </summary>
      <returns>An enumerable that allows traversal of tasks currently queued to this scheduler.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncContext.TaskQueue.TryAdd(System.Threading.Tasks.Task,System.Boolean)">
      <summary>
            Attempts to add the item to the queue. If the queue has been marked as complete for adding, this method returns <c>false</c>.
            </summary>
      <param name="item">The item to enqueue.</param>
      <param name="propagateExceptions">A value indicating whether exceptions on this task should be propagated out of the main loop.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncContext.TaskQueue.CompleteAdding">
      <summary>
            Marks the queue as complete for adding, allowing the enumerator returned from <see cref="M:Nito.AsyncEx.AsyncContext.TaskQueue.GetConsumingEnumerable" /> to eventually complete. This method may be called several times.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncContext.TaskQueue.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="T:Nito.AsyncEx.AsyncContext.AsyncContextTaskScheduler">
      <summary>
            A task scheduler which schedules tasks to an async context.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncContext.AsyncContextTaskScheduler.#ctor(Nito.AsyncEx.AsyncContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.AsyncEx.AsyncContext.AsyncContextTaskScheduler" /> class.
            </summary>
      <param name="context">The async context for this task scheduler. May not be <c>null</c>.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncContext.AsyncContextTaskScheduler.GetScheduledTasks">
      <summary>
            Generates an enumerable of <see cref="T:System.Threading.Tasks.Task" /> instances currently queued to the scheduler waiting to be executed.
            </summary>
      <returns>An enumerable that allows traversal of tasks currently queued to this scheduler.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncContext.AsyncContextTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
      <summary>
            Queues a <see cref="T:System.Threading.Tasks.Task" /> to the scheduler. If all tasks have been completed and the outstanding asynchronous operation count is zero, then this method has undefined behavior.
            </summary>
      <param name="task">The <see cref="T:System.Threading.Tasks.Task" /> to be queued.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncContext.AsyncContextTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
      <summary>
            Determines whether the provided <see cref="T:System.Threading.Tasks.Task" /> can be executed synchronously in this call, and if it can, executes it.
            </summary>
      <param name="task">The <see cref="T:System.Threading.Tasks.Task" /> to be executed.</param>
      <param name="taskWasPreviouslyQueued">A Boolean denoting whether or not task has previously been queued. If this parameter is True, then the task may have been previously queued (scheduled); if False, then the task is known not to have been queued, and this call is being made in order to execute the task inline without queuing it.</param>
      <returns>A Boolean value indicating whether the task was executed inline.</returns>
      <exception cref="T:System.InvalidOperationException">The <paramref name="task" /> was already executed.</exception>
    </member>
    <member name="M:Nito.AsyncEx.AsyncContext.AsyncContextTaskScheduler.DoTryExecuteTask(System.Threading.Tasks.Task)">
      <summary>
            Exposes the base <see cref="M:System.Threading.Tasks.TaskScheduler.TryExecuteTask(System.Threading.Tasks.Task)" /> method.
            </summary>
      <param name="task">The task to attempt to execute.</param>
    </member>
    <member name="P:Nito.AsyncEx.AsyncContext.AsyncContextTaskScheduler.MaximumConcurrencyLevel">
      <summary>
            Indicates the maximum concurrency level this <see cref="T:System.Threading.Tasks.TaskScheduler" /> is able to support.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncContext._queue">
      <summary>
            The queue holding the actions to run.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncContext._synchronizationContext">
      <summary>
            The <see cref="P:Nito.AsyncEx.AsyncContext.SynchronizationContext" /> for this <see cref="T:Nito.AsyncEx.AsyncContext" />.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncContext._taskScheduler">
      <summary>
            The <see cref="T:System.Threading.Tasks.TaskScheduler" /> for this <see cref="T:Nito.AsyncEx.AsyncContext" />.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncContext._taskFactory">
      <summary>
            The <see cref="T:System.Threading.Tasks.TaskFactory" /> for this <see cref="T:Nito.AsyncEx.AsyncContext" />.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncContext._outstandingOperations">
      <summary>
            The number of outstanding operations, including actions in the queue.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncContext.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.AsyncEx.AsyncContext" /> class. This is an advanced operation; most people should use one of the static <c>Run</c> methods instead.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncContext.OperationStarted">
      <summary>
            Increments the outstanding asynchronous operation count.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncContext.OperationCompleted">
      <summary>
            Decrements the outstanding asynchronous operation count.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncContext.Enqueue(System.Threading.Tasks.Task,System.Boolean)">
      <summary>
            Queues a task for execution by <see cref="M:Nito.AsyncEx.AsyncContext.Execute" />. If all tasks have been completed and the outstanding asynchronous operation count is zero, then this method has undefined behavior.
            </summary>
      <param name="task">The task to queue. May not be <c>null</c>.</param>
      <param name="propagateExceptions">A value indicating whether exceptions on this task should be propagated out of the main loop.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncContext.Dispose">
      <summary>
            Disposes all resources used by this class. This method should NOT be called while <see cref="M:Nito.AsyncEx.AsyncContext.Execute" /> is executing.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncContext.Execute">
      <summary>
            Executes all queued actions. This method returns when all tasks have been completed and the outstanding asynchronous operation count is zero. This method will unwrap and propagate errors from tasks that are supposed to propagate errors.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncContext.Run(System.Action)">
      <summary>
            Queues a task for execution, and begins executing all tasks in the queue. This method returns when all tasks have been completed and the outstanding asynchronous operation count is zero. This method will unwrap and propagate errors from the task.
            </summary>
      <param name="action">The action to execute. May not be <c>null</c>.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncContext.Run``1(System.Func{``0})">
      <summary>
            Queues a task for execution, and begins executing all tasks in the queue. This method returns when all tasks have been completed and the outstanding asynchronous operation count is zero. Returns the result of the task. This method will unwrap and propagate errors from the task.
            </summary>
      <typeparam name="TResult">The result type of the task.</typeparam>
      <param name="action">The action to execute. May not be <c>null</c>.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncContext.Run(System.Func{System.Threading.Tasks.Task})">
      <summary>
            Queues a task for execution, and begins executing all tasks in the queue. This method returns when all tasks have been completed and the outstanding asynchronous operation count is zero. This method will unwrap and propagate errors from the task proxy.
            </summary>
      <param name="action">The action to execute. May not be <c>null</c>.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncContext.Run``1(System.Func{System.Threading.Tasks.Task{``0}})">
      <summary>
            Queues a task for execution, and begins executing all tasks in the queue. This method returns when all tasks have been completed and the outstanding asynchronous operation count is zero. Returns the result of the task proxy. This method will unwrap and propagate errors from the task proxy.
            </summary>
      <typeparam name="TResult">The result type of the task.</typeparam>
      <param name="action">The action to execute. May not be <c>null</c>.</param>
    </member>
    <member name="P:Nito.AsyncEx.AsyncContext.Id">
      <summary>
            Gets a semi-unique identifier for this asynchronous context. This is the same identifier as the context's <see cref="T:System.Threading.Tasks.TaskScheduler" />.
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.AsyncContext.Current">
      <summary>
            Gets the current <see cref="T:Nito.AsyncEx.AsyncContext" /> for this thread, or <c>null</c> if this thread is not currently running in an <see cref="T:Nito.AsyncEx.AsyncContext" />.
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.AsyncContext.SynchronizationContext">
      <summary>
            Gets the <see cref="P:Nito.AsyncEx.AsyncContext.SynchronizationContext" /> for this <see cref="T:Nito.AsyncEx.AsyncContext" />. From inside <see cref="M:Nito.AsyncEx.AsyncContext.Execute" />, this value is always equal to <see cref="P:System.Threading.SynchronizationContext.Current" />.
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.AsyncContext.Scheduler">
      <summary>
            Gets the <see cref="T:System.Threading.Tasks.TaskScheduler" /> for this <see cref="T:Nito.AsyncEx.AsyncContext" />. From inside <see cref="M:Nito.AsyncEx.AsyncContext.Execute" />, this value is always equal to <see cref="P:System.Threading.Tasks.TaskScheduler.Current" />.
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.AsyncContext.Factory">
      <summary>
            Gets the <see cref="T:System.Threading.Tasks.TaskFactory" /> for this <see cref="T:Nito.AsyncEx.AsyncContext" />. Be careful with async delegates; you may need to call <see cref="M:System.Threading.SynchronizationContext.OperationStarted" /> and <see cref="M:System.Threading.SynchronizationContext.OperationCompleted" /> to prevent early termination of this <see cref="T:Nito.AsyncEx.AsyncContext" />.
            </summary>
    </member>
    <member name="T:Nito.AsyncEx.AsyncContextThread">
      <summary>
            A thread that executes actions within an <see cref="T:Nito.AsyncEx.AsyncContext" />.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncContextThread._thread">
      <summary>
            The child thread.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncContextThread._context">
      <summary>
            The asynchronous context executed by the child thread.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncContextThread._stoppingFlag">
      <summary>
            A flag used to ensure we only call <see cref="M:Nito.AsyncEx.AsyncContext.OperationCompleted" /> once during complex join/dispose operations.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncContextThread.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.AsyncEx.AsyncContextThread" /> class, creating a child thread waiting for commands.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncContextThread.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.AsyncEx.AsyncContextThread" /> class, creating a child thread waiting for commands. If <paramref name="sta" /> is <c>true</c>, then the child thread is an STA thread (throwing <see cref="T:System.NotSupportedException" /> if the platform does not support STA threads).
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncContextThread.AllowThreadToExit">
      <summary>
            Permits the thread to exit, if we have not already done so.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncContextThread.JoinAsync">
      <summary>
            Requests the thread to exit and returns a task representing the exit of the thread. The thread will exit when all outstanding asynchronous operations complete.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncContextThread.Dispose">
      <summary>
            Requests the thread to exit.
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.AsyncContextThread.Context">
      <summary>
            Gets the <see cref="T:Nito.AsyncEx.AsyncContext" /> executed by this thread.
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.AsyncContextThread.Factory">
      <summary>
            Gets the <see cref="T:System.Threading.Tasks.TaskFactory" /> for this thread, which can be used to schedule work to this thread.
            </summary>
    </member>
    <member name="T:Nito.AsyncEx.AsyncCountdownEvent">
      <summary>
            An async-compatible countdown event.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncCountdownEvent._tcs">
      <summary>
            The TCS used to signal this event.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncCountdownEvent._count">
      <summary>
            The remaining count on this event.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncCountdownEvent.#ctor(System.Int32)">
      <summary>
            Creates an async-compatible countdown event.
            </summary>
      <param name="count">The number of signals this event will need before it becomes set. Must be greater than zero.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncCountdownEvent.WaitAsync">
      <summary>
            Asynchronously waits for this event to be set.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncCountdownEvent.Wait">
      <summary>
            Synchronously waits for this event to be set. This method may block the calling thread.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncCountdownEvent.Wait(System.Threading.CancellationToken)">
      <summary>
            Synchronously waits for this event to be set. This method may block the calling thread.
            </summary>
      <param name="cancellationToken">The cancellation token used to cancel the wait. If this token is already canceled, this method will first check whether the event is set.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncCountdownEvent.ModifyCount(System.Int32)">
      <summary>
            Attempts to modify the current count by the specified amount. This method returns <c>false</c> if the new current count value would be invalid, or if the count has already reached zero.
            </summary>
      <param name="signalCount">The amount to change the current count. This may be positive or negative, but not zero.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncCountdownEvent.TryAddCount(System.Int32)">
      <summary>
            Attempts to add the specified value to the current count. This method returns <c>false</c> if the count is already at zero or if the new count would be greater than <see cref="F:System.Int32.MaxValue" />.
            </summary>
      <param name="signalCount">The amount to change the current count. This must be greater than zero.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncCountdownEvent.TryAddCount">
      <summary>
            Attempts to add one to the current count. This method returns <c>false</c> if the count is already at zero or if the new count would be greater than <see cref="F:System.Int32.MaxValue" />.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncCountdownEvent.TrySignal(System.Int32)">
      <summary>
            Attempts to subtract the specified value from the current count. This method returns <c>false</c> if the count is already at zero or if the new count would be less than zero.
            </summary>
      <param name="signalCount">The amount to change the current count. This must be greater than zero.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncCountdownEvent.TrySignal">
      <summary>
            Attempts to subtract one from the current count. This method returns <c>false</c> if the count is already at zero or if the new count would be less than zero.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncCountdownEvent.AddCount(System.Int32)">
      <summary>
            Attempts to add the specified value to the current count. This method throws <see cref="T:System.InvalidOperationException" /> if the count is already at zero or if the new count would be greater than <see cref="F:System.Int32.MaxValue" />.
            </summary>
      <param name="signalCount">The amount to change the current count. This must be greater than zero.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncCountdownEvent.AddCount">
      <summary>
            Attempts to add one to the current count. This method throws <see cref="T:System.InvalidOperationException" /> if the count is already at zero or if the new count would be greater than <see cref="F:System.Int32.MaxValue" />.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncCountdownEvent.Signal(System.Int32)">
      <summary>
            Attempts to subtract the specified value from the current count. This method throws <see cref="T:System.InvalidOperationException" /> if the count is already at zero or if the new count would be less than zero.
            </summary>
      <param name="signalCount">The amount to change the current count. This must be greater than zero.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncCountdownEvent.Signal">
      <summary>
            Attempts to subtract one from the current count. This method throws <see cref="T:System.InvalidOperationException" /> if the count is already at zero or if the new count would be less than zero.
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.AsyncCountdownEvent.Id">
      <summary>
            Gets a semi-unique identifier for this asynchronous countdown event.
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.AsyncCountdownEvent.CurrentCount">
      <summary>
            Gets the current number of remaining signals before this event becomes set.
            </summary>
    </member>
    <member name="T:Nito.AsyncEx.AsyncFactory`1">
      <summary>
            Provides asynchronous wrappers.
            </summary>
      <typeparam name="TResult">The type of the result of the asychronous operation.</typeparam>
    </member>
    <member name="T:Nito.AsyncEx.AsyncFactory`1.EventArgsTask`1">
      <summary>
            Manages the subscription to an event on a target object, triggering a task (and unsubscribing) when the event is raised.
            </summary>
      <typeparam name="TEventArgs">The type of event arguments passed to the event.</typeparam>
    </member>
    <member name="M:Nito.AsyncEx.AsyncFactory`1.EventArgsTask`1.#ctor(System.Object,System.Reflection.EventInfo)">
      <summary>
            Subscribes to the specified event.
            </summary>
      <param name="target">The object that publishes the event.</param>
      <param name="eventInfo">The event to which we subscribe.</param>
    </member>
    <member name="P:Nito.AsyncEx.AsyncFactory`1.EventArgsTask`1.Task">
      <summary>
            Gets the task that is completed when the event is raised.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncFactory`1.FromApm(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0})">
      <summary>
            Wraps a begin/end asynchronous method.
            </summary>
      <param name="beginMethod">The begin method. May not be <c>null</c>.</param>
      <param name="endMethod">The end method. May not be <c>null</c>.</param>
      <returns>The result of the asynchronous operation.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncFactory`1.ToBegin(System.Threading.Tasks.Task{`0},System.AsyncCallback,System.Object)">
      <summary>
            Wraps a <see cref="T:System.Threading.Tasks.Task`1" /> into the Begin method of an APM pattern.
            </summary>
      <param name="task">The task to wrap. May not be <c>null</c>.</param>
      <param name="callback">The callback method passed into the Begin method of the APM pattern.</param>
      <param name="state">The state passed into the Begin method of the APM pattern.</param>
      <returns>The asynchronous operation, to be returned by the Begin method of the APM pattern.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncFactory`1.ToEnd(System.IAsyncResult)">
      <summary>
            Wraps a <see cref="T:System.Threading.Tasks.Task`1" /> into the End method of an APM pattern.
            </summary>
      <param name="asyncResult">The asynchronous operation returned by the matching Begin method of this APM pattern.</param>
      <returns>The result of the asynchronous operation, to be returned by the End method of the APM pattern.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncFactory`1.FromEvent(System.Object)">
      <summary>
            Gets a task that will complete the next time an event is raised. The event type must follow the standard <c>void EventHandlerType(object, TResult)</c> pattern. Be mindful of race conditions (i.e., if the event is raised immediately before this method is called, your task may never complete).
            </summary>
      <param name="target">The object that publishes the event.</param>
      <returns>The event args.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncFactory`1.FromEvent(System.Object,System.String)">
      <summary>
            Gets a task that will complete the next time an event is raised. The event type must follow the standard <c>void EventHandlerType(object, TResult)</c> pattern. Be mindful of race conditions (i.e., if the event is raised immediately before this method is called, your task may never complete).
            </summary>
      <param name="target">The object that publishes the event. May not be <c>null</c>.</param>
      <param name="eventName">The name of the event. May not be <c>null</c>.</param>
      <returns>The event args.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncFactory`1.FromApm``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0)">
      <summary>
            Wraps a begin/end asynchronous method.
            </summary>
      <typeparam name="TArg0">The type of argument 0.</typeparam>
      <param name="beginMethod">The begin method.</param>
      <param name="endMethod">The end method.</param>
      <param name="arg0">Argument 0.</param>
      <returns>The result of the asynchronous operation.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncFactory`1.FromApm``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1)">
      <summary>
            Wraps a begin/end asynchronous method.
            </summary>
      <typeparam name="TArg0">The type of argument 0.</typeparam>
      <typeparam name="TArg1">The type of argument 1.</typeparam>
      <param name="beginMethod">The begin method.</param>
      <param name="endMethod">The end method.</param>
      <param name="arg0">Argument 0.</param>
      <param name="arg1">Argument 1.</param>
      <returns>The result of the asynchronous operation.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncFactory`1.FromApm``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2)">
      <summary>
            Wraps a begin/end asynchronous method.
            </summary>
      <typeparam name="TArg0">The type of argument 0.</typeparam>
      <typeparam name="TArg1">The type of argument 1.</typeparam>
      <typeparam name="TArg2">The type of argument 2.</typeparam>
      <param name="beginMethod">The begin method.</param>
      <param name="endMethod">The end method.</param>
      <param name="arg0">Argument 0.</param>
      <param name="arg1">Argument 1.</param>
      <param name="arg2">Argument 2.</param>
      <returns>The result of the asynchronous operation.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncFactory`1.FromApm``4(System.Func{``0,``1,``2,``3,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,``3)">
      <summary>
            Wraps a begin/end asynchronous method.
            </summary>
      <typeparam name="TArg0">The type of argument 0.</typeparam>
      <typeparam name="TArg1">The type of argument 1.</typeparam>
      <typeparam name="TArg2">The type of argument 2.</typeparam>
      <typeparam name="TArg3">The type of argument 3.</typeparam>
      <param name="beginMethod">The begin method.</param>
      <param name="endMethod">The end method.</param>
      <param name="arg0">Argument 0.</param>
      <param name="arg1">Argument 1.</param>
      <param name="arg2">Argument 2.</param>
      <param name="arg3">Argument 3.</param>
      <returns>The result of the asynchronous operation.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncFactory`1.FromApm``5(System.Func{``0,``1,``2,``3,``4,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,``3,``4)">
      <summary>
            Wraps a begin/end asynchronous method.
            </summary>
      <typeparam name="TArg0">The type of argument 0.</typeparam>
      <typeparam name="TArg1">The type of argument 1.</typeparam>
      <typeparam name="TArg2">The type of argument 2.</typeparam>
      <typeparam name="TArg3">The type of argument 3.</typeparam>
      <typeparam name="TArg4">The type of argument 4.</typeparam>
      <param name="beginMethod">The begin method.</param>
      <param name="endMethod">The end method.</param>
      <param name="arg0">Argument 0.</param>
      <param name="arg1">Argument 1.</param>
      <param name="arg2">Argument 2.</param>
      <param name="arg3">Argument 3.</param>
      <param name="arg4">Argument 4.</param>
      <returns>The result of the asynchronous operation.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncFactory`1.FromApm``6(System.Func{``0,``1,``2,``3,``4,``5,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,``3,``4,``5)">
      <summary>
            Wraps a begin/end asynchronous method.
            </summary>
      <typeparam name="TArg0">The type of argument 0.</typeparam>
      <typeparam name="TArg1">The type of argument 1.</typeparam>
      <typeparam name="TArg2">The type of argument 2.</typeparam>
      <typeparam name="TArg3">The type of argument 3.</typeparam>
      <typeparam name="TArg4">The type of argument 4.</typeparam>
      <typeparam name="TArg5">The type of argument 5.</typeparam>
      <param name="beginMethod">The begin method.</param>
      <param name="endMethod">The end method.</param>
      <param name="arg0">Argument 0.</param>
      <param name="arg1">Argument 1.</param>
      <param name="arg2">Argument 2.</param>
      <param name="arg3">Argument 3.</param>
      <param name="arg4">Argument 4.</param>
      <param name="arg5">Argument 5.</param>
      <returns>The result of the asynchronous operation.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncFactory`1.FromApm``7(System.Func{``0,``1,``2,``3,``4,``5,``6,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,``3,``4,``5,``6)">
      <summary>
            Wraps a begin/end asynchronous method.
            </summary>
      <typeparam name="TArg0">The type of argument 0.</typeparam>
      <typeparam name="TArg1">The type of argument 1.</typeparam>
      <typeparam name="TArg2">The type of argument 2.</typeparam>
      <typeparam name="TArg3">The type of argument 3.</typeparam>
      <typeparam name="TArg4">The type of argument 4.</typeparam>
      <typeparam name="TArg5">The type of argument 5.</typeparam>
      <typeparam name="TArg6">The type of argument 6.</typeparam>
      <param name="beginMethod">The begin method.</param>
      <param name="endMethod">The end method.</param>
      <param name="arg0">Argument 0.</param>
      <param name="arg1">Argument 1.</param>
      <param name="arg2">Argument 2.</param>
      <param name="arg3">Argument 3.</param>
      <param name="arg4">Argument 4.</param>
      <param name="arg5">Argument 5.</param>
      <param name="arg6">Argument 6.</param>
      <returns>The result of the asynchronous operation.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncFactory`1.FromApm``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,``3,``4,``5,``6,``7)">
      <summary>
            Wraps a begin/end asynchronous method.
            </summary>
      <typeparam name="TArg0">The type of argument 0.</typeparam>
      <typeparam name="TArg1">The type of argument 1.</typeparam>
      <typeparam name="TArg2">The type of argument 2.</typeparam>
      <typeparam name="TArg3">The type of argument 3.</typeparam>
      <typeparam name="TArg4">The type of argument 4.</typeparam>
      <typeparam name="TArg5">The type of argument 5.</typeparam>
      <typeparam name="TArg6">The type of argument 6.</typeparam>
      <typeparam name="TArg7">The type of argument 7.</typeparam>
      <param name="beginMethod">The begin method.</param>
      <param name="endMethod">The end method.</param>
      <param name="arg0">Argument 0.</param>
      <param name="arg1">Argument 1.</param>
      <param name="arg2">Argument 2.</param>
      <param name="arg3">Argument 3.</param>
      <param name="arg4">Argument 4.</param>
      <param name="arg5">Argument 5.</param>
      <param name="arg6">Argument 6.</param>
      <param name="arg7">Argument 7.</param>
      <returns>The result of the asynchronous operation.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncFactory`1.FromApm``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
      <summary>
            Wraps a begin/end asynchronous method.
            </summary>
      <typeparam name="TArg0">The type of argument 0.</typeparam>
      <typeparam name="TArg1">The type of argument 1.</typeparam>
      <typeparam name="TArg2">The type of argument 2.</typeparam>
      <typeparam name="TArg3">The type of argument 3.</typeparam>
      <typeparam name="TArg4">The type of argument 4.</typeparam>
      <typeparam name="TArg5">The type of argument 5.</typeparam>
      <typeparam name="TArg6">The type of argument 6.</typeparam>
      <typeparam name="TArg7">The type of argument 7.</typeparam>
      <typeparam name="TArg8">The type of argument 8.</typeparam>
      <param name="beginMethod">The begin method.</param>
      <param name="endMethod">The end method.</param>
      <param name="arg0">Argument 0.</param>
      <param name="arg1">Argument 1.</param>
      <param name="arg2">Argument 2.</param>
      <param name="arg3">Argument 3.</param>
      <param name="arg4">Argument 4.</param>
      <param name="arg5">Argument 5.</param>
      <param name="arg6">Argument 6.</param>
      <param name="arg7">Argument 7.</param>
      <param name="arg8">Argument 8.</param>
      <returns>The result of the asynchronous operation.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncFactory`1.FromApm``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
      <summary>
            Wraps a begin/end asynchronous method.
            </summary>
      <typeparam name="TArg0">The type of argument 0.</typeparam>
      <typeparam name="TArg1">The type of argument 1.</typeparam>
      <typeparam name="TArg2">The type of argument 2.</typeparam>
      <typeparam name="TArg3">The type of argument 3.</typeparam>
      <typeparam name="TArg4">The type of argument 4.</typeparam>
      <typeparam name="TArg5">The type of argument 5.</typeparam>
      <typeparam name="TArg6">The type of argument 6.</typeparam>
      <typeparam name="TArg7">The type of argument 7.</typeparam>
      <typeparam name="TArg8">The type of argument 8.</typeparam>
      <typeparam name="TArg9">The type of argument 9.</typeparam>
      <param name="beginMethod">The begin method.</param>
      <param name="endMethod">The end method.</param>
      <param name="arg0">Argument 0.</param>
      <param name="arg1">Argument 1.</param>
      <param name="arg2">Argument 2.</param>
      <param name="arg3">Argument 3.</param>
      <param name="arg4">Argument 4.</param>
      <param name="arg5">Argument 5.</param>
      <param name="arg6">Argument 6.</param>
      <param name="arg7">Argument 7.</param>
      <param name="arg8">Argument 8.</param>
      <param name="arg9">Argument 9.</param>
      <returns>The result of the asynchronous operation.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncFactory`1.FromApm``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
      <summary>
            Wraps a begin/end asynchronous method.
            </summary>
      <typeparam name="TArg0">The type of argument 0.</typeparam>
      <typeparam name="TArg1">The type of argument 1.</typeparam>
      <typeparam name="TArg2">The type of argument 2.</typeparam>
      <typeparam name="TArg3">The type of argument 3.</typeparam>
      <typeparam name="TArg4">The type of argument 4.</typeparam>
      <typeparam name="TArg5">The type of argument 5.</typeparam>
      <typeparam name="TArg6">The type of argument 6.</typeparam>
      <typeparam name="TArg7">The type of argument 7.</typeparam>
      <typeparam name="TArg8">The type of argument 8.</typeparam>
      <typeparam name="TArg9">The type of argument 9.</typeparam>
      <typeparam name="TArg10">The type of argument 10.</typeparam>
      <param name="beginMethod">The begin method.</param>
      <param name="endMethod">The end method.</param>
      <param name="arg0">Argument 0.</param>
      <param name="arg1">Argument 1.</param>
      <param name="arg2">Argument 2.</param>
      <param name="arg3">Argument 3.</param>
      <param name="arg4">Argument 4.</param>
      <param name="arg5">Argument 5.</param>
      <param name="arg6">Argument 6.</param>
      <param name="arg7">Argument 7.</param>
      <param name="arg8">Argument 8.</param>
      <param name="arg9">Argument 9.</param>
      <param name="arg10">Argument 10.</param>
      <returns>The result of the asynchronous operation.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncFactory`1.FromApm``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
      <summary>
            Wraps a begin/end asynchronous method.
            </summary>
      <typeparam name="TArg0">The type of argument 0.</typeparam>
      <typeparam name="TArg1">The type of argument 1.</typeparam>
      <typeparam name="TArg2">The type of argument 2.</typeparam>
      <typeparam name="TArg3">The type of argument 3.</typeparam>
      <typeparam name="TArg4">The type of argument 4.</typeparam>
      <typeparam name="TArg5">The type of argument 5.</typeparam>
      <typeparam name="TArg6">The type of argument 6.</typeparam>
      <typeparam name="TArg7">The type of argument 7.</typeparam>
      <typeparam name="TArg8">The type of argument 8.</typeparam>
      <typeparam name="TArg9">The type of argument 9.</typeparam>
      <typeparam name="TArg10">The type of argument 10.</typeparam>
      <typeparam name="TArg11">The type of argument 11.</typeparam>
      <param name="beginMethod">The begin method.</param>
      <param name="endMethod">The end method.</param>
      <param name="arg0">Argument 0.</param>
      <param name="arg1">Argument 1.</param>
      <param name="arg2">Argument 2.</param>
      <param name="arg3">Argument 3.</param>
      <param name="arg4">Argument 4.</param>
      <param name="arg5">Argument 5.</param>
      <param name="arg6">Argument 6.</param>
      <param name="arg7">Argument 7.</param>
      <param name="arg8">Argument 8.</param>
      <param name="arg9">Argument 9.</param>
      <param name="arg10">Argument 10.</param>
      <param name="arg11">Argument 11.</param>
      <returns>The result of the asynchronous operation.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncFactory`1.FromApm``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
      <summary>
            Wraps a begin/end asynchronous method.
            </summary>
      <typeparam name="TArg0">The type of argument 0.</typeparam>
      <typeparam name="TArg1">The type of argument 1.</typeparam>
      <typeparam name="TArg2">The type of argument 2.</typeparam>
      <typeparam name="TArg3">The type of argument 3.</typeparam>
      <typeparam name="TArg4">The type of argument 4.</typeparam>
      <typeparam name="TArg5">The type of argument 5.</typeparam>
      <typeparam name="TArg6">The type of argument 6.</typeparam>
      <typeparam name="TArg7">The type of argument 7.</typeparam>
      <typeparam name="TArg8">The type of argument 8.</typeparam>
      <typeparam name="TArg9">The type of argument 9.</typeparam>
      <typeparam name="TArg10">The type of argument 10.</typeparam>
      <typeparam name="TArg11">The type of argument 11.</typeparam>
      <typeparam name="TArg12">The type of argument 12.</typeparam>
      <param name="beginMethod">The begin method.</param>
      <param name="endMethod">The end method.</param>
      <param name="arg0">Argument 0.</param>
      <param name="arg1">Argument 1.</param>
      <param name="arg2">Argument 2.</param>
      <param name="arg3">Argument 3.</param>
      <param name="arg4">Argument 4.</param>
      <param name="arg5">Argument 5.</param>
      <param name="arg6">Argument 6.</param>
      <param name="arg7">Argument 7.</param>
      <param name="arg8">Argument 8.</param>
      <param name="arg9">Argument 9.</param>
      <param name="arg10">Argument 10.</param>
      <param name="arg11">Argument 11.</param>
      <param name="arg12">Argument 12.</param>
      <returns>The result of the asynchronous operation.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncFactory`1.FromApm``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
      <summary>
            Wraps a begin/end asynchronous method.
            </summary>
      <typeparam name="TArg0">The type of argument 0.</typeparam>
      <typeparam name="TArg1">The type of argument 1.</typeparam>
      <typeparam name="TArg2">The type of argument 2.</typeparam>
      <typeparam name="TArg3">The type of argument 3.</typeparam>
      <typeparam name="TArg4">The type of argument 4.</typeparam>
      <typeparam name="TArg5">The type of argument 5.</typeparam>
      <typeparam name="TArg6">The type of argument 6.</typeparam>
      <typeparam name="TArg7">The type of argument 7.</typeparam>
      <typeparam name="TArg8">The type of argument 8.</typeparam>
      <typeparam name="TArg9">The type of argument 9.</typeparam>
      <typeparam name="TArg10">The type of argument 10.</typeparam>
      <typeparam name="TArg11">The type of argument 11.</typeparam>
      <typeparam name="TArg12">The type of argument 12.</typeparam>
      <typeparam name="TArg13">The type of argument 13.</typeparam>
      <param name="beginMethod">The begin method.</param>
      <param name="endMethod">The end method.</param>
      <param name="arg0">Argument 0.</param>
      <param name="arg1">Argument 1.</param>
      <param name="arg2">Argument 2.</param>
      <param name="arg3">Argument 3.</param>
      <param name="arg4">Argument 4.</param>
      <param name="arg5">Argument 5.</param>
      <param name="arg6">Argument 6.</param>
      <param name="arg7">Argument 7.</param>
      <param name="arg8">Argument 8.</param>
      <param name="arg9">Argument 9.</param>
      <param name="arg10">Argument 10.</param>
      <param name="arg11">Argument 11.</param>
      <param name="arg12">Argument 12.</param>
      <param name="arg13">Argument 13.</param>
      <returns>The result of the asynchronous operation.</returns>
    </member>
    <member name="T:Nito.AsyncEx.AsyncFactory">
      <summary>
            Provides asynchronous wrappers.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncFactory.FromApm(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult})">
      <summary>
            Wraps a begin/end asynchronous method.
            </summary>
      <param name="beginMethod">The begin method.</param>
      <param name="endMethod">The end method.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncFactory.ToBegin(System.Threading.Tasks.Task,System.AsyncCallback,System.Object)">
      <summary>
            Wraps a <see cref="T:System.Threading.Tasks.Task" /> into the Begin method of an APM pattern.
            </summary>
      <param name="task">The task to wrap.</param>
      <param name="callback">The callback method passed into the Begin method of the APM pattern.</param>
      <param name="state">The state passed into the Begin method of the APM pattern.</param>
      <returns>The asynchronous operation, to be returned by the Begin method of the APM pattern.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncFactory.ToEnd(System.IAsyncResult)">
      <summary>
            Wraps a <see cref="T:System.Threading.Tasks.Task" /> into the End method of an APM pattern.
            </summary>
      <param name="asyncResult">The asynchronous operation returned by the matching Begin method of this APM pattern.</param>
      <returns>The result of the asynchronous operation, to be returned by the End method of the APM pattern.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncFactory.FromWaitHandle(System.Threading.WaitHandle)">
      <summary>
            Wraps a <see cref="T:System.Threading.WaitHandle" /> with a <see cref="T:System.Threading.Tasks.Task" />. When the <see cref="T:System.Threading.WaitHandle" /> is signalled, the returned <see cref="T:System.Threading.Tasks.Task" /> is completed. If the handle is already signalled, this method acts synchronously.
            </summary>
      <param name="handle">The <see cref="T:System.Threading.WaitHandle" /> to observe.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncFactory.FromWaitHandle(System.Threading.WaitHandle,System.TimeSpan)">
      <summary>
            Wraps a <see cref="T:System.Threading.WaitHandle" /> with a <see cref="T:System.Threading.Tasks.Task`1" />. If the <see cref="T:System.Threading.WaitHandle" /> is signalled, the returned task is completed with a <c>true</c> result. If the observation times out, the returned task is completed with a <c>false</c> result. If the handle is already signalled or the timeout is zero, this method acts synchronously.
            </summary>
      <param name="handle">The <see cref="T:System.Threading.WaitHandle" /> to observe.</param>
      <param name="timeout">The timeout after which the <see cref="T:System.Threading.WaitHandle" /> is no longer observed.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncFactory.FromWaitHandle(System.Threading.WaitHandle,System.Threading.CancellationToken)">
      <summary>
            Wraps a <see cref="T:System.Threading.WaitHandle" /> with a <see cref="T:System.Threading.Tasks.Task`1" />. If the <see cref="T:System.Threading.WaitHandle" /> is signalled, the returned task is (successfully) completed. If the observation is cancelled, the returned task is cancelled. If the handle is already signalled or the cancellation token is already cancelled, this method acts synchronously.
            </summary>
      <param name="handle">The <see cref="T:System.Threading.WaitHandle" /> to observe.</param>
      <param name="token">The cancellation token that cancels observing the <see cref="T:System.Threading.WaitHandle" />.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncFactory.FromWaitHandle(System.Threading.WaitHandle,System.TimeSpan,System.Threading.CancellationToken)">
      <summary>
            Wraps a <see cref="T:System.Threading.WaitHandle" /> with a <see cref="T:System.Threading.Tasks.Task`1" />. If the <see cref="T:System.Threading.WaitHandle" /> is signalled, the returned task is completed with a <c>true</c> result. If the observation times out, the returned task is completed with a <c>false</c> result. If the observation is cancelled, the returned task is cancelled. If the handle is already signalled, the timeout is zero, or the cancellation token is already cancelled, then this method acts synchronously.
            </summary>
      <param name="handle">The <see cref="T:System.Threading.WaitHandle" /> to observe.</param>
      <param name="timeout">The timeout after which the <see cref="T:System.Threading.WaitHandle" /> is no longer observed.</param>
      <param name="token">The cancellation token that cancels observing the <see cref="T:System.Threading.WaitHandle" />.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncFactory.FromApm``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0)">
      <summary>
            Wraps a begin/end asynchronous method.
            </summary>
      <typeparam name="TArg0">The type of argument 0.</typeparam>
      <param name="beginMethod">The begin method.</param>
      <param name="endMethod">The end method.</param>
      <param name="arg0">Argument 0.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncFactory.FromApm``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1)">
      <summary>
            Wraps a begin/end asynchronous method.
            </summary>
      <typeparam name="TArg0">The type of argument 0.</typeparam>
      <typeparam name="TArg1">The type of argument 1.</typeparam>
      <param name="beginMethod">The begin method.</param>
      <param name="endMethod">The end method.</param>
      <param name="arg0">Argument 0.</param>
      <param name="arg1">Argument 1.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncFactory.FromApm``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2)">
      <summary>
            Wraps a begin/end asynchronous method.
            </summary>
      <typeparam name="TArg0">The type of argument 0.</typeparam>
      <typeparam name="TArg1">The type of argument 1.</typeparam>
      <typeparam name="TArg2">The type of argument 2.</typeparam>
      <param name="beginMethod">The begin method.</param>
      <param name="endMethod">The end method.</param>
      <param name="arg0">Argument 0.</param>
      <param name="arg1">Argument 1.</param>
      <param name="arg2">Argument 2.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncFactory.FromApm``4(System.Func{``0,``1,``2,``3,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,``3)">
      <summary>
            Wraps a begin/end asynchronous method.
            </summary>
      <typeparam name="TArg0">The type of argument 0.</typeparam>
      <typeparam name="TArg1">The type of argument 1.</typeparam>
      <typeparam name="TArg2">The type of argument 2.</typeparam>
      <typeparam name="TArg3">The type of argument 3.</typeparam>
      <param name="beginMethod">The begin method.</param>
      <param name="endMethod">The end method.</param>
      <param name="arg0">Argument 0.</param>
      <param name="arg1">Argument 1.</param>
      <param name="arg2">Argument 2.</param>
      <param name="arg3">Argument 3.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncFactory.FromApm``5(System.Func{``0,``1,``2,``3,``4,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,``3,``4)">
      <summary>
            Wraps a begin/end asynchronous method.
            </summary>
      <typeparam name="TArg0">The type of argument 0.</typeparam>
      <typeparam name="TArg1">The type of argument 1.</typeparam>
      <typeparam name="TArg2">The type of argument 2.</typeparam>
      <typeparam name="TArg3">The type of argument 3.</typeparam>
      <typeparam name="TArg4">The type of argument 4.</typeparam>
      <param name="beginMethod">The begin method.</param>
      <param name="endMethod">The end method.</param>
      <param name="arg0">Argument 0.</param>
      <param name="arg1">Argument 1.</param>
      <param name="arg2">Argument 2.</param>
      <param name="arg3">Argument 3.</param>
      <param name="arg4">Argument 4.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncFactory.FromApm``6(System.Func{``0,``1,``2,``3,``4,``5,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,``3,``4,``5)">
      <summary>
            Wraps a begin/end asynchronous method.
            </summary>
      <typeparam name="TArg0">The type of argument 0.</typeparam>
      <typeparam name="TArg1">The type of argument 1.</typeparam>
      <typeparam name="TArg2">The type of argument 2.</typeparam>
      <typeparam name="TArg3">The type of argument 3.</typeparam>
      <typeparam name="TArg4">The type of argument 4.</typeparam>
      <typeparam name="TArg5">The type of argument 5.</typeparam>
      <param name="beginMethod">The begin method.</param>
      <param name="endMethod">The end method.</param>
      <param name="arg0">Argument 0.</param>
      <param name="arg1">Argument 1.</param>
      <param name="arg2">Argument 2.</param>
      <param name="arg3">Argument 3.</param>
      <param name="arg4">Argument 4.</param>
      <param name="arg5">Argument 5.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncFactory.FromApm``7(System.Func{``0,``1,``2,``3,``4,``5,``6,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,``3,``4,``5,``6)">
      <summary>
            Wraps a begin/end asynchronous method.
            </summary>
      <typeparam name="TArg0">The type of argument 0.</typeparam>
      <typeparam name="TArg1">The type of argument 1.</typeparam>
      <typeparam name="TArg2">The type of argument 2.</typeparam>
      <typeparam name="TArg3">The type of argument 3.</typeparam>
      <typeparam name="TArg4">The type of argument 4.</typeparam>
      <typeparam name="TArg5">The type of argument 5.</typeparam>
      <typeparam name="TArg6">The type of argument 6.</typeparam>
      <param name="beginMethod">The begin method.</param>
      <param name="endMethod">The end method.</param>
      <param name="arg0">Argument 0.</param>
      <param name="arg1">Argument 1.</param>
      <param name="arg2">Argument 2.</param>
      <param name="arg3">Argument 3.</param>
      <param name="arg4">Argument 4.</param>
      <param name="arg5">Argument 5.</param>
      <param name="arg6">Argument 6.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncFactory.FromApm``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,``3,``4,``5,``6,``7)">
      <summary>
            Wraps a begin/end asynchronous method.
            </summary>
      <typeparam name="TArg0">The type of argument 0.</typeparam>
      <typeparam name="TArg1">The type of argument 1.</typeparam>
      <typeparam name="TArg2">The type of argument 2.</typeparam>
      <typeparam name="TArg3">The type of argument 3.</typeparam>
      <typeparam name="TArg4">The type of argument 4.</typeparam>
      <typeparam name="TArg5">The type of argument 5.</typeparam>
      <typeparam name="TArg6">The type of argument 6.</typeparam>
      <typeparam name="TArg7">The type of argument 7.</typeparam>
      <param name="beginMethod">The begin method.</param>
      <param name="endMethod">The end method.</param>
      <param name="arg0">Argument 0.</param>
      <param name="arg1">Argument 1.</param>
      <param name="arg2">Argument 2.</param>
      <param name="arg3">Argument 3.</param>
      <param name="arg4">Argument 4.</param>
      <param name="arg5">Argument 5.</param>
      <param name="arg6">Argument 6.</param>
      <param name="arg7">Argument 7.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncFactory.FromApm``9(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,``3,``4,``5,``6,``7,``8)">
      <summary>
            Wraps a begin/end asynchronous method.
            </summary>
      <typeparam name="TArg0">The type of argument 0.</typeparam>
      <typeparam name="TArg1">The type of argument 1.</typeparam>
      <typeparam name="TArg2">The type of argument 2.</typeparam>
      <typeparam name="TArg3">The type of argument 3.</typeparam>
      <typeparam name="TArg4">The type of argument 4.</typeparam>
      <typeparam name="TArg5">The type of argument 5.</typeparam>
      <typeparam name="TArg6">The type of argument 6.</typeparam>
      <typeparam name="TArg7">The type of argument 7.</typeparam>
      <typeparam name="TArg8">The type of argument 8.</typeparam>
      <param name="beginMethod">The begin method.</param>
      <param name="endMethod">The end method.</param>
      <param name="arg0">Argument 0.</param>
      <param name="arg1">Argument 1.</param>
      <param name="arg2">Argument 2.</param>
      <param name="arg3">Argument 3.</param>
      <param name="arg4">Argument 4.</param>
      <param name="arg5">Argument 5.</param>
      <param name="arg6">Argument 6.</param>
      <param name="arg7">Argument 7.</param>
      <param name="arg8">Argument 8.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncFactory.FromApm``10(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
      <summary>
            Wraps a begin/end asynchronous method.
            </summary>
      <typeparam name="TArg0">The type of argument 0.</typeparam>
      <typeparam name="TArg1">The type of argument 1.</typeparam>
      <typeparam name="TArg2">The type of argument 2.</typeparam>
      <typeparam name="TArg3">The type of argument 3.</typeparam>
      <typeparam name="TArg4">The type of argument 4.</typeparam>
      <typeparam name="TArg5">The type of argument 5.</typeparam>
      <typeparam name="TArg6">The type of argument 6.</typeparam>
      <typeparam name="TArg7">The type of argument 7.</typeparam>
      <typeparam name="TArg8">The type of argument 8.</typeparam>
      <typeparam name="TArg9">The type of argument 9.</typeparam>
      <param name="beginMethod">The begin method.</param>
      <param name="endMethod">The end method.</param>
      <param name="arg0">Argument 0.</param>
      <param name="arg1">Argument 1.</param>
      <param name="arg2">Argument 2.</param>
      <param name="arg3">Argument 3.</param>
      <param name="arg4">Argument 4.</param>
      <param name="arg5">Argument 5.</param>
      <param name="arg6">Argument 6.</param>
      <param name="arg7">Argument 7.</param>
      <param name="arg8">Argument 8.</param>
      <param name="arg9">Argument 9.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncFactory.FromApm``11(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
      <summary>
            Wraps a begin/end asynchronous method.
            </summary>
      <typeparam name="TArg0">The type of argument 0.</typeparam>
      <typeparam name="TArg1">The type of argument 1.</typeparam>
      <typeparam name="TArg2">The type of argument 2.</typeparam>
      <typeparam name="TArg3">The type of argument 3.</typeparam>
      <typeparam name="TArg4">The type of argument 4.</typeparam>
      <typeparam name="TArg5">The type of argument 5.</typeparam>
      <typeparam name="TArg6">The type of argument 6.</typeparam>
      <typeparam name="TArg7">The type of argument 7.</typeparam>
      <typeparam name="TArg8">The type of argument 8.</typeparam>
      <typeparam name="TArg9">The type of argument 9.</typeparam>
      <typeparam name="TArg10">The type of argument 10.</typeparam>
      <param name="beginMethod">The begin method.</param>
      <param name="endMethod">The end method.</param>
      <param name="arg0">Argument 0.</param>
      <param name="arg1">Argument 1.</param>
      <param name="arg2">Argument 2.</param>
      <param name="arg3">Argument 3.</param>
      <param name="arg4">Argument 4.</param>
      <param name="arg5">Argument 5.</param>
      <param name="arg6">Argument 6.</param>
      <param name="arg7">Argument 7.</param>
      <param name="arg8">Argument 8.</param>
      <param name="arg9">Argument 9.</param>
      <param name="arg10">Argument 10.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncFactory.FromApm``12(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
      <summary>
            Wraps a begin/end asynchronous method.
            </summary>
      <typeparam name="TArg0">The type of argument 0.</typeparam>
      <typeparam name="TArg1">The type of argument 1.</typeparam>
      <typeparam name="TArg2">The type of argument 2.</typeparam>
      <typeparam name="TArg3">The type of argument 3.</typeparam>
      <typeparam name="TArg4">The type of argument 4.</typeparam>
      <typeparam name="TArg5">The type of argument 5.</typeparam>
      <typeparam name="TArg6">The type of argument 6.</typeparam>
      <typeparam name="TArg7">The type of argument 7.</typeparam>
      <typeparam name="TArg8">The type of argument 8.</typeparam>
      <typeparam name="TArg9">The type of argument 9.</typeparam>
      <typeparam name="TArg10">The type of argument 10.</typeparam>
      <typeparam name="TArg11">The type of argument 11.</typeparam>
      <param name="beginMethod">The begin method.</param>
      <param name="endMethod">The end method.</param>
      <param name="arg0">Argument 0.</param>
      <param name="arg1">Argument 1.</param>
      <param name="arg2">Argument 2.</param>
      <param name="arg3">Argument 3.</param>
      <param name="arg4">Argument 4.</param>
      <param name="arg5">Argument 5.</param>
      <param name="arg6">Argument 6.</param>
      <param name="arg7">Argument 7.</param>
      <param name="arg8">Argument 8.</param>
      <param name="arg9">Argument 9.</param>
      <param name="arg10">Argument 10.</param>
      <param name="arg11">Argument 11.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncFactory.FromApm``13(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
      <summary>
            Wraps a begin/end asynchronous method.
            </summary>
      <typeparam name="TArg0">The type of argument 0.</typeparam>
      <typeparam name="TArg1">The type of argument 1.</typeparam>
      <typeparam name="TArg2">The type of argument 2.</typeparam>
      <typeparam name="TArg3">The type of argument 3.</typeparam>
      <typeparam name="TArg4">The type of argument 4.</typeparam>
      <typeparam name="TArg5">The type of argument 5.</typeparam>
      <typeparam name="TArg6">The type of argument 6.</typeparam>
      <typeparam name="TArg7">The type of argument 7.</typeparam>
      <typeparam name="TArg8">The type of argument 8.</typeparam>
      <typeparam name="TArg9">The type of argument 9.</typeparam>
      <typeparam name="TArg10">The type of argument 10.</typeparam>
      <typeparam name="TArg11">The type of argument 11.</typeparam>
      <typeparam name="TArg12">The type of argument 12.</typeparam>
      <param name="beginMethod">The begin method.</param>
      <param name="endMethod">The end method.</param>
      <param name="arg0">Argument 0.</param>
      <param name="arg1">Argument 1.</param>
      <param name="arg2">Argument 2.</param>
      <param name="arg3">Argument 3.</param>
      <param name="arg4">Argument 4.</param>
      <param name="arg5">Argument 5.</param>
      <param name="arg6">Argument 6.</param>
      <param name="arg7">Argument 7.</param>
      <param name="arg8">Argument 8.</param>
      <param name="arg9">Argument 9.</param>
      <param name="arg10">Argument 10.</param>
      <param name="arg11">Argument 11.</param>
      <param name="arg12">Argument 12.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncFactory.FromApm``14(System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
      <summary>
            Wraps a begin/end asynchronous method.
            </summary>
      <typeparam name="TArg0">The type of argument 0.</typeparam>
      <typeparam name="TArg1">The type of argument 1.</typeparam>
      <typeparam name="TArg2">The type of argument 2.</typeparam>
      <typeparam name="TArg3">The type of argument 3.</typeparam>
      <typeparam name="TArg4">The type of argument 4.</typeparam>
      <typeparam name="TArg5">The type of argument 5.</typeparam>
      <typeparam name="TArg6">The type of argument 6.</typeparam>
      <typeparam name="TArg7">The type of argument 7.</typeparam>
      <typeparam name="TArg8">The type of argument 8.</typeparam>
      <typeparam name="TArg9">The type of argument 9.</typeparam>
      <typeparam name="TArg10">The type of argument 10.</typeparam>
      <typeparam name="TArg11">The type of argument 11.</typeparam>
      <typeparam name="TArg12">The type of argument 12.</typeparam>
      <typeparam name="TArg13">The type of argument 13.</typeparam>
      <param name="beginMethod">The begin method.</param>
      <param name="endMethod">The end method.</param>
      <param name="arg0">Argument 0.</param>
      <param name="arg1">Argument 1.</param>
      <param name="arg2">Argument 2.</param>
      <param name="arg3">Argument 3.</param>
      <param name="arg4">Argument 4.</param>
      <param name="arg5">Argument 5.</param>
      <param name="arg6">Argument 6.</param>
      <param name="arg7">Argument 7.</param>
      <param name="arg8">Argument 8.</param>
      <param name="arg9">Argument 9.</param>
      <param name="arg10">Argument 10.</param>
      <param name="arg11">Argument 11.</param>
      <param name="arg12">Argument 12.</param>
      <param name="arg13">Argument 13.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Nito.AsyncEx.AsyncLazy`1">
      <summary>
            Provides support for asynchronous lazy initialization. This type is fully threadsafe.
            </summary>
      <typeparam name="T">The type of object that is being asynchronously initialized.</typeparam>
    </member>
    <member name="F:Nito.AsyncEx.AsyncLazy`1._instance">
      <summary>
            The underlying lazy task.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncLazy`1._id">
      <summary>
            The semi-unique identifier for this instance. This is 0 if the id has not yet been created.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncLazy`1.#ctor(System.Func{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.AsyncEx.AsyncLazy`1" /> class.
            </summary>
      <param name="factory">The delegate that is invoked on a background thread to produce the value when it is needed. May not be <c>null</c>.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncLazy`1.#ctor(System.Func{System.Threading.Tasks.Task{`0}})">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.AsyncEx.AsyncLazy`1" /> class.
            </summary>
      <param name="factory">The asynchronous delegate that is invoked on a background thread to produce the value when it is needed. May not be <c>null</c>.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncLazy`1.GetAwaiter">
      <summary>
            Asynchronous infrastructure support. This method permits instances of <see cref="T:Nito.AsyncEx.AsyncLazy`1" /> to be await'ed.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncLazy`1.Start">
      <summary>
            Starts the asynchronous initialization, if it has not already started.
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.AsyncLazy`1.Id">
      <summary>
            Gets a semi-unique identifier for this asynchronous lazy instance.
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.AsyncLazy`1.IsStarted">
      <summary>
            Whether the asynchronous factory method has started. This is initially <c>false</c> and becomes <c>true</c> when this instance is awaited or after <see cref="M:Nito.AsyncEx.AsyncLazy`1.Start" /> is called.
            </summary>
    </member>
    <member name="T:Nito.AsyncEx.AsyncLock">
      <summary>
            A mutual exclusion lock that is compatible with async. Note that this lock is <b>not</b> recursive!
            </summary>
    </member>
    <member name="T:Nito.AsyncEx.AsyncLock.Key">
      <summary>
            The disposable which releases the lock.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncLock.Key.#ctor(Nito.AsyncEx.AsyncLock)">
      <summary>
            Creates the key for a lock.
            </summary>
      <param name="asyncLock">The lock to release. May not be <c>null</c>.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncLock.Key.Dispose">
      <summary>
            Release the lock.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncLock._taken">
      <summary>
            Whether the lock is taken by a task.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncLock._queue">
      <summary>
            The queue of TCSs that other tasks are awaiting to acquire the lock.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncLock._cachedKeyTask">
      <summary>
            A task that is completed with the key object for this lock.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncLock._id">
      <summary>
            The semi-unique identifier for this instance. This is 0 if the id has not yet been created.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncLock._mutex">
      <summary>
            The object used for mutual exclusion.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncLock.#ctor">
      <summary>
            Creates a new async-compatible mutual exclusion lock.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncLock.#ctor(Nito.AsyncEx.IAsyncWaitQueue{System.IDisposable})">
      <summary>
            Creates a new async-compatible mutual exclusion lock using the specified wait queue.
            </summary>
      <param name="queue">The wait queue used to manage waiters.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncLock.LockAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously acquires the lock. Returns a disposable that releases the lock when disposed.
            </summary>
      <param name="cancellationToken">The cancellation token used to cancel the lock. If this is already set, then this method will attempt to take the lock immediately (succeeding if the lock is currently available).</param>
      <returns>A disposable that releases the lock when disposed.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncLock.Lock(System.Threading.CancellationToken)">
      <summary>
            Synchronously acquires the lock. Returns a disposable that releases the lock when disposed. This method may block the calling thread.
            </summary>
      <param name="cancellationToken">The cancellation token used to cancel the lock. If this is already set, then this method will attempt to take the lock immediately (succeeding if the lock is currently available).</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncLock.LockAsync">
      <summary>
            Asynchronously acquires the lock. Returns a disposable that releases the lock when disposed.
            </summary>
      <returns>A disposable that releases the lock when disposed.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncLock.Lock">
      <summary>
            Synchronously acquires the lock. Returns a disposable that releases the lock when disposed. This method may block the calling thread.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncLock.ReleaseLock">
      <summary>
            Releases the lock.
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.AsyncLock.Id">
      <summary>
            Gets a semi-unique identifier for this asynchronous lock.
            </summary>
    </member>
    <member name="T:Nito.AsyncEx.AsyncManualResetEvent">
      <summary>
            An async-compatible manual-reset event.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncManualResetEvent._sync">
      <summary>
            The object used for synchronization.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncManualResetEvent._tcs">
      <summary>
            The current state of the event.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncManualResetEvent._id">
      <summary>
            The semi-unique identifier for this instance. This is 0 if the id has not yet been created.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncManualResetEvent.#ctor(System.Boolean)">
      <summary>
            Creates an async-compatible manual-reset event.
            </summary>
      <param name="set">Whether the manual-reset event is initially set or unset.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncManualResetEvent.#ctor">
      <summary>
            Creates an async-compatible manual-reset event that is initially unset.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncManualResetEvent.WaitAsync">
      <summary>
            Asynchronously waits for this event to be set.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncManualResetEvent.Wait">
      <summary>
            Synchronously waits for this event to be set. This method may block the calling thread.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncManualResetEvent.Wait(System.Threading.CancellationToken)">
      <summary>
            Synchronously waits for this event to be set. This method may block the calling thread.
            </summary>
      <param name="cancellationToken">The cancellation token used to cancel the wait. If this token is already canceled, this method will first check whether the event is set.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncManualResetEvent.Set">
      <summary>
            Sets the event, atomically completing every task returned by <see cref="M:Nito.AsyncEx.AsyncManualResetEvent.WaitAsync" />. If the event is already set, this method does nothing.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncManualResetEvent.Reset">
      <summary>
            Resets the event. If the event is already reset, this method does nothing.
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.AsyncManualResetEvent.Id">
      <summary>
            Gets a semi-unique identifier for this asynchronous manual-reset event.
            </summary>
    </member>
    <member name="T:Nito.AsyncEx.AsyncMonitor">
      <summary>
            An async-compatible monitor.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncMonitor._asyncLock">
      <summary>
            The lock.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncMonitor._conditionVariable">
      <summary>
            The condition variable.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncMonitor.#ctor(Nito.AsyncEx.IAsyncWaitQueue{System.IDisposable},Nito.AsyncEx.IAsyncWaitQueue{System.Object})">
      <summary>
            Constructs a new monitor.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncMonitor.#ctor">
      <summary>
            Constructs a new monitor.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncMonitor.EnterAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously enters the monitor. Returns a disposable that leaves the monitor when disposed.
            </summary>
      <param name="cancellationToken">The cancellation token used to cancel the enter. If this is already set, then this method will attempt to enter the monitor immediately (succeeding if the monitor is currently available).</param>
      <returns>A disposable that leaves the monitor when disposed.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncMonitor.Enter(System.Threading.CancellationToken)">
      <summary>
            Synchronously enters the monitor. Returns a disposable that leaves the monitor when disposed. This method may block the calling thread.
            </summary>
      <param name="cancellationToken">The cancellation token used to cancel the enter. If this is already set, then this method will attempt to enter the monitor immediately (succeeding if the monitor is currently available).</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncMonitor.EnterAsync">
      <summary>
            Asynchronously enters the monitor. Returns a disposable that leaves the monitor when disposed.
            </summary>
      <returns>A disposable that leaves the monitor when disposed.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncMonitor.Enter">
      <summary>
            Asynchronously enters the monitor. Returns a disposable that leaves the monitor when disposed. This method may block the calling thread.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncMonitor.WaitAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously waits for a pulse signal on this monitor. The monitor MUST already be entered when calling this method, and it will still be entered when this method returns, even if the method is cancelled. This method internally will leave the monitor while waiting for a notification.
            </summary>
      <param name="cancellationToken">The cancellation signal used to cancel this wait.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncMonitor.Wait(System.Threading.CancellationToken)">
      <summary>
            Asynchronously waits for a pulse signal on this monitor. This method may block the calling thread. The monitor MUST already be entered when calling this method, and it will still be entered when this method returns, even if the method is cancelled. This method internally will leave the monitor while waiting for a notification.
            </summary>
      <param name="cancellationToken">The cancellation signal used to cancel this wait.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncMonitor.WaitAsync">
      <summary>
            Asynchronously waits for a pulse signal on this monitor. The monitor MUST already be entered when calling this method, and it will still be entered when this method returns. This method internally will leave the monitor while waiting for a notification.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncMonitor.Wait">
      <summary>
            Asynchronously waits for a pulse signal on this monitor. This method may block the calling thread. The monitor MUST already be entered when calling this method, and it will still be entered when this method returns. This method internally will leave the monitor while waiting for a notification.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncMonitor.Pulse">
      <summary>
            Sends a signal to a single task waiting on this monitor. The monitor MUST already be entered when calling this method, and it will still be entered when this method returns.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncMonitor.PulseAll">
      <summary>
            Sends a signal to all tasks waiting on this monitor. The monitor MUST already be entered when calling this method, and it will still be entered when this method returns.
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.AsyncMonitor.Id">
      <summary>
            Gets a semi-unique identifier for this monitor.
            </summary>
    </member>
    <member name="T:Nito.AsyncEx.AsyncProducerConsumerQueue`1">
      <summary>
            An async-compatible producer/consumer queue.
            </summary>
      <typeparam name="T">The type of elements contained in the queue.</typeparam>
    </member>
    <member name="T:Nito.AsyncEx.AsyncProducerConsumerQueue`1.DequeueResult">
      <summary>
            The result of a <c>TryDequeue</c>, <c>DequeueFromAny</c>, or <c>TryDequeueFromAny</c> operation.
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.AsyncProducerConsumerQueue`1.DequeueResult.Queue">
      <summary>
            The queue from which the item was dequeued, or <c>null</c> if the operation failed.
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.AsyncProducerConsumerQueue`1.DequeueResult.Success">
      <summary>
            Whether the operation was successful. This is <c>true</c> if and only if <see cref="P:Nito.AsyncEx.AsyncProducerConsumerQueue`1.DequeueResult.Queue" /> is not <c>null</c>.
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.AsyncProducerConsumerQueue`1.DequeueResult.Item">
      <summary>
            The dequeued item. This is only valid if <see cref="P:Nito.AsyncEx.AsyncProducerConsumerQueue`1.DequeueResult.Queue" /> is not <c>null</c>.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncProducerConsumerQueue`1._queue">
      <summary>
            The underlying queue.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncProducerConsumerQueue`1._maxCount">
      <summary>
            The maximum number of elements allowed in the queue.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncProducerConsumerQueue`1._mutex">
      <summary>
            The mutual-exclusion lock protecting the queue.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncProducerConsumerQueue`1._notFull">
      <summary>
            A condition variable that is signalled when the queue is not full.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncProducerConsumerQueue`1._completedOrNotEmpty">
      <summary>
            A condition variable that is signalled when the queue is completed or not empty.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncProducerConsumerQueue`1._completed">
      <summary>
            A cancellation token source that is canceled when the queue is marked completed for adding.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncProducerConsumerQueue`1.FalseResult">
      <summary>
            A cached result that is common when calling <see cref="o:AsyncProducerConsumerQueueExtensions.TryDequeueFromAnyAsync" />.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncProducerConsumerQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
      <summary>
            Creates a new async-compatible producer/consumer queue with the specified initial elements and a maximum element count.
            </summary>
      <param name="collection">The initial elements to place in the queue.</param>
      <param name="maxCount">The maximum element count. This must be greater than zero.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncProducerConsumerQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Creates a new async-compatible producer/consumer queue with the specified initial elements.
            </summary>
      <param name="collection">The initial elements to place in the queue.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncProducerConsumerQueue`1.#ctor(System.Int32)">
      <summary>
            Creates a new async-compatible producer/consumer queue with a maximum element count.
            </summary>
      <param name="maxCount">The maximum element count. This must be greater than zero.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncProducerConsumerQueue`1.#ctor">
      <summary>
            Creates a new async-compatible producer/consumer queue.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncProducerConsumerQueue`1.Dispose">
      <summary>
            Releases resources held by this instance. After disposal, any use of this instance is undefined.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncProducerConsumerQueue`1.CompleteAddingAsync">
      <summary>
            Asynchronously marks the producer/consumer queue as complete for adding.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncProducerConsumerQueue`1.CompleteAdding">
      <summary>
            Synchronously marks the producer/consumer queue as complete for adding.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncProducerConsumerQueue`1.TryEnqueueAsync(`0,System.Threading.CancellationToken,Nito.AsyncEx.TaskCompletionSource)">
      <summary>
            Attempts to enqueue an item.
            </summary>
      <param name="item">The item to enqueue.</param>
      <param name="cancellationToken">A cancellation token that can be used to abort the enqueue operation. If <paramref name="abort" /> is not <c>null</c>, then this token must include signals from the <paramref name="abort" /> object.</param>
      <param name="abort">A synchronization object used to cancel related enqueue operations. May be <c>null</c> if this is the only enqueue operation.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncProducerConsumerQueue`1.DoTryEnqueue(`0,System.Threading.CancellationToken)">
      <summary>
            Attempts to enqueue an item. This method may block the calling thread.
            </summary>
      <param name="item">The item to enqueue.</param>
      <param name="cancellationToken">A cancellation token that can be used to abort the enqueue operation.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncProducerConsumerQueue`1.TryEnqueueAsync(`0,System.Threading.CancellationToken)">
      <summary>
            Attempts to enqueue an item to the producer/consumer queue. Returns <c>false</c> if the producer/consumer queue has completed adding.
            </summary>
      <param name="item">The item to enqueue.</param>
      <param name="cancellationToken">A cancellation token that can be used to abort the enqueue operation.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncProducerConsumerQueue`1.TryEnqueue(`0,System.Threading.CancellationToken)">
      <summary>
            Attempts to enqueue an item to the producer/consumer queue. Returns <c>false</c> if the producer/consumer queue has completed adding. This method may block the calling thread.
            </summary>
      <param name="item">The item to enqueue.</param>
      <param name="cancellationToken">A cancellation token that can be used to abort the enqueue operation.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncProducerConsumerQueue`1.TryEnqueueAsync(`0)">
      <summary>
            Attempts to enqueue an item to the producer/consumer queue. Returns <c>false</c> if the producer/consumer queue has completed adding.
            </summary>
      <param name="item">The item to enqueue.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncProducerConsumerQueue`1.TryEnqueue(`0)">
      <summary>
            Attempts to enqueue an item to the producer/consumer queue. Returns <c>false</c> if the producer/consumer queue has completed adding. This method may block the calling thread.
            </summary>
      <param name="item">The item to enqueue.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncProducerConsumerQueue`1.EnqueueAsync(`0,System.Threading.CancellationToken)">
      <summary>
            Enqueues an item to the producer/consumer queue. Throws <see cref="T:System.InvalidOperationException" /> if the producer/consumer queue has completed adding.
            </summary>
      <param name="item">The item to enqueue.</param>
      <param name="cancellationToken">A cancellation token that can be used to abort the enqueue operation.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncProducerConsumerQueue`1.Enqueue(`0,System.Threading.CancellationToken)">
      <summary>
            Enqueues an item to the producer/consumer queue. Throws <see cref="T:System.InvalidOperationException" /> if the producer/consumer queue has completed adding. This method may block the calling thread.
            </summary>
      <param name="item">The item to enqueue.</param>
      <param name="cancellationToken">A cancellation token that can be used to abort the enqueue operation.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncProducerConsumerQueue`1.EnqueueAsync(`0)">
      <summary>
            Enqueues an item to the producer/consumer queue. Throws <see cref="T:System.InvalidOperationException" /> if the producer/consumer queue has completed adding.
            </summary>
      <param name="item">The item to enqueue.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncProducerConsumerQueue`1.Enqueue(`0)">
      <summary>
            Enqueues an item to the producer/consumer queue. This method may block the calling thread. Throws <see cref="T:System.InvalidOperationException" /> if the producer/consumer queue has completed adding.
            </summary>
      <param name="item">The item to enqueue.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncProducerConsumerQueue`1.OutputAvailableAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously waits until an item is available to dequeue. Returns <c>false</c> if the producer/consumer queue has completed adding and there are no more items.
            </summary>
      <param name="cancellationToken">A cancellation token that can be used to abort the asynchronous wait.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncProducerConsumerQueue`1.OutputAvailableAsync">
      <summary>
            Asynchronously waits until an item is available to dequeue. Returns <c>false</c> if the producer/consumer queue has completed adding and there are no more items.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncProducerConsumerQueue`1.GetConsumingEnumerable(System.Threading.CancellationToken)">
      <summary>
            Provides a (synchronous) consuming enumerable for items in the producer/consumer queue.
            </summary>
      <param name="cancellationToken">A cancellation token that can be used to abort the synchronous enumeration.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncProducerConsumerQueue`1.GetConsumingEnumerable">
      <summary>
            Provides a (synchronous) consuming enumerable for items in the producer/consumer queue.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncProducerConsumerQueue`1.TryDequeueAsync(System.Threading.CancellationToken,Nito.AsyncEx.TaskCompletionSource)">
      <summary>
            Attempts to dequeue an item.
            </summary>
      <param name="cancellationToken">A cancellation token that can be used to abort the dequeue operation. If <paramref name="abort" /> is not <c>null</c>, then this token must include signals from the <paramref name="abort" /> object.</param>
      <param name="abort">A synchronization object used to cancel related dequeue operations. May be <c>null</c> if this is the only dequeue operation.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncProducerConsumerQueue`1.DoTryDequeue(System.Threading.CancellationToken)">
      <summary>
            Attempts to dequeue an item. This method may block the calling thread.
            </summary>
      <param name="cancellationToken">A cancellation token that can be used to abort the dequeue operation.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncProducerConsumerQueue`1.TryDequeueAsync(System.Threading.CancellationToken)">
      <summary>
            Attempts to dequeue an item from the producer/consumer queue.
            </summary>
      <param name="cancellationToken">A cancellation token that can be used to abort the dequeue operation.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncProducerConsumerQueue`1.TryDequeue(System.Threading.CancellationToken)">
      <summary>
            Attempts to dequeue an item from the producer/consumer queue. This method may block the calling thread.
            </summary>
      <param name="cancellationToken">A cancellation token that can be used to abort the dequeue operation.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncProducerConsumerQueue`1.TryDequeueAsync">
      <summary>
            Attempts to dequeue an item from the producer/consumer queue.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncProducerConsumerQueue`1.TryDequeue">
      <summary>
            Attempts to dequeue an item from the producer/consumer queue. This method may block the calling thread.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncProducerConsumerQueue`1.DequeueAsync(System.Threading.CancellationToken)">
      <summary>
            Dequeues an item from the producer/consumer queue. Returns the dequeued item. Throws <see cref="T:System.InvalidOperationException" /> if the producer/consumer queue has completed adding and is empty.
            </summary>
      <param name="cancellationToken">A cancellation token that can be used to abort the dequeue operation.</param>
      <returns>The dequeued item.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncProducerConsumerQueue`1.Dequeue(System.Threading.CancellationToken)">
      <summary>
            Dequeues an item from the producer/consumer queue. Returns the dequeued item. This method may block the calling thread. Throws <see cref="T:System.InvalidOperationException" /> if the producer/consumer queue has completed adding and is empty.
            </summary>
      <param name="cancellationToken">A cancellation token that can be used to abort the dequeue operation.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncProducerConsumerQueue`1.DequeueAsync">
      <summary>
            Dequeues an item from the producer/consumer queue. Returns the dequeued item. Throws <see cref="T:System.InvalidOperationException" /> if the producer/consumer queue has completed adding and is empty.
            </summary>
      <returns>The dequeued item.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncProducerConsumerQueue`1.Dequeue">
      <summary>
            Dequeues an item from the producer/consumer queue. Returns the dequeued item. This method may block the calling thread. Throws <see cref="T:System.InvalidOperationException" /> if the producer/consumer queue has completed adding and is empty.
            </summary>
      <returns>The dequeued item.</returns>
    </member>
    <member name="P:Nito.AsyncEx.AsyncProducerConsumerQueue`1.Empty">
      <summary>
            Whether the queue is empty.
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.AsyncProducerConsumerQueue`1.Full">
      <summary>
            Whether the queue is full.
            </summary>
    </member>
    <member name="T:Nito.AsyncEx.AsyncProducerConsumerQueueExtensions">
      <summary>
            Provides methods for working on multiple <see cref="T:Nito.AsyncEx.AsyncProducerConsumerQueue`1" /> instances.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncProducerConsumerQueueExtensions.TryEnqueueToAnyAsync``1(System.Collections.Generic.IEnumerable{Nito.AsyncEx.AsyncProducerConsumerQueue{``0}},``0,System.Threading.CancellationToken)">
      <summary>
            Attempts to enqueue an item to any of a number of producer/consumer queues. Returns the producer/consumer queue that received the item. Returns <c>null</c> if all producer/consumer queues have completed adding.
            </summary>
      <param name="queues">The producer/consumer queues.</param>
      <param name="item">The item to enqueue.</param>
      <param name="cancellationToken">A cancellation token that can be used to abort the enqueue operation.</param>
      <returns>The producer/consumer queue that received the item.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncProducerConsumerQueueExtensions.TryEnqueueToAny``1(System.Collections.Generic.IEnumerable{Nito.AsyncEx.AsyncProducerConsumerQueue{``0}},``0,System.Threading.CancellationToken)">
      <summary>
            Attempts to enqueue an item to any of a number of producer/consumer queues. Returns the producer/consumer queue that received the item. Returns <c>null</c> if all producer/consumer queues have completed adding. This method may block the calling thread.
            </summary>
      <param name="queues">The producer/consumer queues.</param>
      <param name="item">The item to enqueue.</param>
      <param name="cancellationToken">A cancellation token that can be used to abort the enqueue operation.</param>
      <returns>The producer/consumer queue that received the item.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncProducerConsumerQueueExtensions.TryEnqueueToAnyAsync``1(System.Collections.Generic.IEnumerable{Nito.AsyncEx.AsyncProducerConsumerQueue{``0}},``0)">
      <summary>
            Attempts to enqueue an item to any of a number of producer/consumer queues. Returns the producer/consumer queue that received the item. Returns <c>null</c> if all producer/consumer queues have completed adding.
            </summary>
      <param name="queues">The producer/consumer queues.</param>
      <param name="item">The item to enqueue.</param>
      <returns>The producer/consumer queue that received the item.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncProducerConsumerQueueExtensions.TryEnqueueToAny``1(System.Collections.Generic.IEnumerable{Nito.AsyncEx.AsyncProducerConsumerQueue{``0}},``0)">
      <summary>
            Attempts to enqueue an item to any of a number of producer/consumer queues. Returns the producer/consumer queue that received the item. Returns <c>null</c> if all producer/consumer queues have completed adding. This method may block the calling thread.
            </summary>
      <param name="queues">The producer/consumer queues.</param>
      <param name="item">The item to enqueue.</param>
      <returns>The producer/consumer queue that received the item.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncProducerConsumerQueueExtensions.EnqueueToAnyAsync``1(System.Collections.Generic.IEnumerable{Nito.AsyncEx.AsyncProducerConsumerQueue{``0}},``0,System.Threading.CancellationToken)">
      <summary>
            Enqueues an item to any of a number of producer/consumer queues. Returns the producer/consumer queue that received the item. Throws <see cref="T:System.InvalidOperationException" /> if all producer/consumer queues have completed adding.
            </summary>
      <param name="queues">The producer/consumer queues.</param>
      <param name="item">The item to enqueue.</param>
      <param name="cancellationToken">A cancellation token that can be used to abort the enqueue operation.</param>
      <returns>The producer/consumer queue that received the item.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncProducerConsumerQueueExtensions.EnqueueToAny``1(System.Collections.Generic.IEnumerable{Nito.AsyncEx.AsyncProducerConsumerQueue{``0}},``0,System.Threading.CancellationToken)">
      <summary>
            Enqueues an item to any of a number of producer/consumer queues. Returns the producer/consumer queue that received the item. Throws <see cref="T:System.InvalidOperationException" /> if all producer/consumer queues have completed adding. This method may block the calling thread.
            </summary>
      <param name="queues">The producer/consumer queues.</param>
      <param name="item">The item to enqueue.</param>
      <param name="cancellationToken">A cancellation token that can be used to abort the enqueue operation.</param>
      <returns>The producer/consumer queue that received the item.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncProducerConsumerQueueExtensions.EnqueueToAnyAsync``1(System.Collections.Generic.IEnumerable{Nito.AsyncEx.AsyncProducerConsumerQueue{``0}},``0)">
      <summary>
            Enqueues an item to any of a number of producer/consumer queues. Returns the producer/consumer queue that received the item. Throws <see cref="T:System.InvalidOperationException" /> if all producer/consumer queues have completed adding.
            </summary>
      <param name="queues">The producer/consumer queues.</param>
      <param name="item">The item to enqueue.</param>
      <returns>The producer/consumer queue that received the item.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncProducerConsumerQueueExtensions.EnqueueToAny``1(System.Collections.Generic.IEnumerable{Nito.AsyncEx.AsyncProducerConsumerQueue{``0}},``0)">
      <summary>
            Enqueues an item to any of a number of producer/consumer queues. Returns the producer/consumer queue that received the item. Throws <see cref="T:System.InvalidOperationException" /> if all producer/consumer queues have completed adding. This method may block the calling thread.
            </summary>
      <param name="queues">The producer/consumer queues.</param>
      <param name="item">The item to enqueue.</param>
      <returns>The producer/consumer queue that received the item.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncProducerConsumerQueueExtensions.TryDequeueFromAnyAsync``1(System.Collections.Generic.IEnumerable{Nito.AsyncEx.AsyncProducerConsumerQueue{``0}},System.Threading.CancellationToken)">
      <summary>
            Attempts to dequeue an item from any of a number of producer/consumer queues. The operation "fails" if all the producer/consumer queues have completed adding and are empty.
            </summary>
      <param name="queues">The producer/consumer queues.</param>
      <param name="cancellationToken">A cancellation token that can be used to abort the dequeue operation.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncProducerConsumerQueueExtensions.TryDequeueFromAny``1(System.Collections.Generic.IEnumerable{Nito.AsyncEx.AsyncProducerConsumerQueue{``0}},System.Threading.CancellationToken)">
      <summary>
            Attempts to dequeue an item from any of a number of producer/consumer queues. The operation "fails" if all the producer/consumer queues have completed adding and are empty. This method may block the calling thread.
            </summary>
      <param name="queues">The producer/consumer queues.</param>
      <param name="cancellationToken">A cancellation token that can be used to abort the dequeue operation.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncProducerConsumerQueueExtensions.TryDequeueFromAnyAsync``1(System.Collections.Generic.IEnumerable{Nito.AsyncEx.AsyncProducerConsumerQueue{``0}})">
      <summary>
            Attempts to dequeue an item from any of a number of producer/consumer queues. The operation "fails" if all the producer/consumer queues have completed adding and are empty.
            </summary>
      <param name="queues">The producer/consumer queues.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncProducerConsumerQueueExtensions.TryDequeueFromAny``1(System.Collections.Generic.IEnumerable{Nito.AsyncEx.AsyncProducerConsumerQueue{``0}})">
      <summary>
            Attempts to dequeue an item from any of a number of producer/consumer queues. The operation "fails" if all the producer/consumer queues have completed adding and are empty. This method may block the calling thread.
            </summary>
      <param name="queues">The producer/consumer queues.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncProducerConsumerQueueExtensions.DequeueFromAnyAsync``1(System.Collections.Generic.IEnumerable{Nito.AsyncEx.AsyncProducerConsumerQueue{``0}},System.Threading.CancellationToken)">
      <summary>
            Dequeues an item from any of a number of producer/consumer queues. Throws <see cref="T:System.InvalidOperationException" /> if all the producer/consumer queues have completed adding and are empty.
            </summary>
      <param name="queues">The producer/consumer queues.</param>
      <param name="cancellationToken">A cancellation token that can be used to abort the dequeue operation.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncProducerConsumerQueueExtensions.DequeueFromAny``1(System.Collections.Generic.IEnumerable{Nito.AsyncEx.AsyncProducerConsumerQueue{``0}},System.Threading.CancellationToken)">
      <summary>
            Dequeues an item from any of a number of producer/consumer queues. Throws <see cref="T:System.InvalidOperationException" /> if all the producer/consumer queues have completed adding and are empty. This method may block the calling thread.
            </summary>
      <param name="queues">The producer/consumer queues.</param>
      <param name="cancellationToken">A cancellation token that can be used to abort the dequeue operation.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncProducerConsumerQueueExtensions.DequeueFromAnyAsync``1(System.Collections.Generic.IEnumerable{Nito.AsyncEx.AsyncProducerConsumerQueue{``0}})">
      <summary>
            Dequeues an item from any of a number of producer/consumer queues. Throws <see cref="T:System.InvalidOperationException" /> if all the producer/consumer queues have completed adding and are empty.
            </summary>
      <param name="queues">The producer/consumer queues.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncProducerConsumerQueueExtensions.DequeueFromAny``1(System.Collections.Generic.IEnumerable{Nito.AsyncEx.AsyncProducerConsumerQueue{``0}})">
      <summary>
            Dequeues an item from any of a number of producer/consumer queues. Throws <see cref="T:System.InvalidOperationException" /> if all the producer/consumer queues have completed adding and are empty. This method may block the calling thread.
            </summary>
      <param name="queues">The producer/consumer queues.</param>
    </member>
    <member name="T:Nito.AsyncEx.AsyncReaderWriterLock">
      <summary>
            A reader/writer lock that is compatible with async. Note that this lock is <b>not</b> recursive!
            </summary>
    </member>
    <member name="T:Nito.AsyncEx.AsyncReaderWriterLock.ReaderKey">
      <summary>
            The disposable which releases the reader lock.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncReaderWriterLock.ReaderKey.#ctor(Nito.AsyncEx.AsyncReaderWriterLock)">
      <summary>
            Creates the key for a lock.
            </summary>
      <param name="asyncReaderWriterLock">The lock to release. May not be <c>null</c>.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncReaderWriterLock.ReaderKey.Dispose">
      <summary>
            Release the lock.
            </summary>
    </member>
    <member name="T:Nito.AsyncEx.AsyncReaderWriterLock.WriterKey">
      <summary>
            The disposable which releases the writer lock.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncReaderWriterLock.WriterKey.#ctor(Nito.AsyncEx.AsyncReaderWriterLock)">
      <summary>
            Creates the key for a lock.
            </summary>
      <param name="asyncReaderWriterLock">The lock to release. May not be <c>null</c>.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncReaderWriterLock.WriterKey.Dispose">
      <summary>
            Release the lock.
            </summary>
    </member>
    <member name="T:Nito.AsyncEx.AsyncReaderWriterLock.UpgradeableReaderKey">
      <summary>
            The disposable which manages the upgradeable reader lock.
            </summary>
    </member>
    <member name="T:Nito.AsyncEx.AsyncReaderWriterLock.UpgradeableReaderKey.UpgradeKey">
      <summary>
            The disposable which downgrades an upgradeable reader key.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncReaderWriterLock.UpgradeableReaderKey.UpgradeKey.#ctor(Nito.AsyncEx.AsyncReaderWriterLock.UpgradeableReaderKey)">
      <summary>
            Creates the upgrade key for an upgradeable reader key.
            </summary>
      <param name="key">The upgradeable reader key to downgrade. May not be <c>null</c>.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncReaderWriterLock.UpgradeableReaderKey.UpgradeKey.Dispose">
      <summary>
            Downgrade the upgradeable reader key.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncReaderWriterLock.UpgradeableReaderKey.#ctor(Nito.AsyncEx.AsyncReaderWriterLock)">
      <summary>
            Creates the key for a lock.
            </summary>
      <param name="asyncReaderWriterLock">The lock to release. May not be <c>null</c>.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncReaderWriterLock.UpgradeableReaderKey.UpgradeAsync(System.Threading.CancellationToken)">
      <summary>
            Upgrades the reader lock to a writer lock. Returns a disposable that downgrades the writer lock to a reader lock when disposed.
            </summary>
      <param name="cancellationToken">The cancellation token used to cancel the upgrade. If this is already set, then this method will attempt to upgrade immediately (succeeding if the lock is currently available).</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncReaderWriterLock.UpgradeableReaderKey.Upgrade(System.Threading.CancellationToken)">
      <summary>
            Synchronously upgrades the reader lock to a writer lock. Returns a disposable that downgrades the writer lock to a reader lock when disposed. This method may block the calling thread.
            </summary>
      <param name="cancellationToken">The cancellation token used to cancel the upgrade. If this is already set, then this method will attempt to upgrade immediately (succeeding if the lock is currently available).</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncReaderWriterLock.UpgradeableReaderKey.UpgradeAsync">
      <summary>
            Upgrades the reader lock to a writer lock. Returns a disposable that downgrades the writer lock to a reader lock when disposed.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncReaderWriterLock.UpgradeableReaderKey.Upgrade">
      <summary>
            Synchronously upgrades the reader lock to a writer lock. Returns a disposable that downgrades the writer lock to a reader lock when disposed. This method may block the calling thread.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncReaderWriterLock.UpgradeableReaderKey.Downgrade">
      <summary>
            Downgrades the writer lock to a reader lock.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncReaderWriterLock.UpgradeableReaderKey.Dispose">
      <summary>
            Release the lock.
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.AsyncReaderWriterLock.UpgradeableReaderKey.Upgraded">
      <summary>
            Gets a value indicating whether this lock has been upgraded to a write lock.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncReaderWriterLock._writerQueue">
      <summary>
            The queue of TCSs that other tasks are awaiting to acquire the lock as writers.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncReaderWriterLock._readerQueue">
      <summary>
            The queue of TCSs that other tasks are awaiting to acquire the lock as readers.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncReaderWriterLock._upgradeableReaderQueue">
      <summary>
            The queue of TCSs that other tasks are awaiting to acquire the lock as upgradeable readers.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncReaderWriterLock._upgradeReaderQueue">
      <summary>
            The queue of TCSs that other tasks are awaiting to upgrade a reader lock to a writer lock.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncReaderWriterLock._id">
      <summary>
            The semi-unique identifier for this instance. This is 0 if the id has not yet been created.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncReaderWriterLock._upgradeableReaderKey">
      <summary>
            The current upgradeable reader lock key, if any. If this is not <c>null</c>, then there is an upgradeable reader lock held.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncReaderWriterLock._locksHeld">
      <summary>
            Number of reader locks held (including an upgradeable reader lock, if applicable); -1 if a writer lock is held; 0 if no locks are held.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncReaderWriterLock._mutex">
      <summary>
            The object used for mutual exclusion.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncReaderWriterLock._cachedReaderKeyTask">
      <summary>
            A task that is completed with the reader key object for this lock.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncReaderWriterLock._cachedWriterKeyTask">
      <summary>
            A task that is completed with the writer key object for this lock.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncReaderWriterLock.#ctor(Nito.AsyncEx.IAsyncWaitQueue{System.IDisposable},Nito.AsyncEx.IAsyncWaitQueue{System.IDisposable},Nito.AsyncEx.IAsyncWaitQueue{Nito.AsyncEx.AsyncReaderWriterLock.UpgradeableReaderKey},Nito.AsyncEx.IAsyncWaitQueue{System.IDisposable})">
      <summary>
            Creates a new async-compatible reader/writer lock.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncReaderWriterLock.#ctor">
      <summary>
            Creates a new async-compatible reader/writer lock.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncReaderWriterLock.ReleaseWaitersWhenCanceled(System.Threading.Tasks.Task)">
      <summary>
            Applies a continuation to the task that will call <see cref="M:Nito.AsyncEx.AsyncReaderWriterLock.ReleaseWaiters" /> if the task is canceled. This method may not be called while holding the sync lock.
            </summary>
      <param name="task">The task to observe for cancellation.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncReaderWriterLock.ReaderLockAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously acquires the lock as a reader. Returns a disposable that releases the lock when disposed.
            </summary>
      <param name="cancellationToken">The cancellation token used to cancel the lock. If this is already set, then this method will attempt to take the lock immediately (succeeding if the lock is currently available).</param>
      <returns>A disposable that releases the lock when disposed.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncReaderWriterLock.ReaderLock(System.Threading.CancellationToken)">
      <summary>
            Synchronously acquires the lock as a reader. Returns a disposable that releases the lock when disposed. This method may block the calling thread.
            </summary>
      <param name="cancellationToken">The cancellation token used to cancel the lock. If this is already set, then this method will attempt to take the lock immediately (succeeding if the lock is currently available).</param>
      <returns>A disposable that releases the lock when disposed.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncReaderWriterLock.ReaderLockAsync">
      <summary>
            Asynchronously acquires the lock as a reader. Returns a disposable that releases the lock when disposed.
            </summary>
      <returns>A disposable that releases the lock when disposed.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncReaderWriterLock.ReaderLock">
      <summary>
            Synchronously acquires the lock as a reader. Returns a disposable that releases the lock when disposed. This method may block the calling thread.
            </summary>
      <returns>A disposable that releases the lock when disposed.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncReaderWriterLock.WriterLockAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously acquires the lock as a writer. Returns a disposable that releases the lock when disposed.
            </summary>
      <param name="cancellationToken">The cancellation token used to cancel the lock. If this is already set, then this method will attempt to take the lock immediately (succeeding if the lock is currently available).</param>
      <returns>A disposable that releases the lock when disposed.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncReaderWriterLock.WriterLock(System.Threading.CancellationToken)">
      <summary>
            Synchronously acquires the lock as a writer. Returns a disposable that releases the lock when disposed. This method may block the calling thread.
            </summary>
      <param name="cancellationToken">The cancellation token used to cancel the lock. If this is already set, then this method will attempt to take the lock immediately (succeeding if the lock is currently available).</param>
      <returns>A disposable that releases the lock when disposed.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncReaderWriterLock.WriterLockAsync">
      <summary>
            Asynchronously acquires the lock as a writer. Returns a disposable that releases the lock when disposed.
            </summary>
      <returns>A disposable that releases the lock when disposed.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncReaderWriterLock.WriterLock">
      <summary>
            Asynchronously acquires the lock as a writer. Returns a disposable that releases the lock when disposed. This method may block the calling thread.
            </summary>
      <returns>A disposable that releases the lock when disposed.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncReaderWriterLock.UpgradeableReaderLockAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously acquires the lock as a reader with the option to upgrade. Returns a key that can be used to upgrade and downgrade the lock, and releases the lock when disposed.
            </summary>
      <param name="cancellationToken">The cancellation token used to cancel the lock. If this is already set, then this method will attempt to take the lock immediately (succeeding if the lock is currently available).</param>
      <returns>A key that can be used to upgrade and downgrade this lock, and releases the lock when disposed.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncReaderWriterLock.UpgradeableReaderLock(System.Threading.CancellationToken)">
      <summary>
            Synchronously acquires the lock as a reader with the option to upgrade. Returns a key that can be used to upgrade and downgrade the lock, and releases the lock when disposed. This method may block the calling thread.
            </summary>
      <param name="cancellationToken">The cancellation token used to cancel the lock. If this is already set, then this method will attempt to take the lock immediately (succeeding if the lock is currently available).</param>
      <returns>A key that can be used to upgrade and downgrade this lock, and releases the lock when disposed.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncReaderWriterLock.UpgradeableReaderLockAsync">
      <summary>
            Asynchronously acquires the lock as a reader with the option to upgrade. Returns a key that can be used to upgrade and downgrade the lock, and releases the lock when disposed.
            </summary>
      <returns>A key that can be used to upgrade and downgrade this lock, and releases the lock when disposed.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncReaderWriterLock.UpgradeableReaderLock">
      <summary>
            Synchronously acquires the lock as a reader with the option to upgrade. Returns a key that can be used to upgrade and downgrade the lock, and releases the lock when disposed. This method may block the calling thread.
            </summary>
      <returns>A key that can be used to upgrade and downgrade this lock, and releases the lock when disposed.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncReaderWriterLock.UpgradeAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously upgrades a reader lock to a writer lock. This method assumes the sync lock is already held.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncReaderWriterLock.Downgrade">
      <summary>
            Downgrades a writer lock to a reader lock. This method assumes the sync lock is already held.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncReaderWriterLock.ReleaseWaiters">
      <summary>
            Grants lock(s) to waiting tasks. This method assumes the sync lock is already held.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncReaderWriterLock.ReleaseReaderLock">
      <summary>
            Releases the lock as a reader.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncReaderWriterLock.ReleaseWriterLock">
      <summary>
            Releases the lock as a writer.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncReaderWriterLock.ReleaseUpgradeableReaderLock(System.Threading.Tasks.Task)">
      <summary>
            Releases the lock as an upgradeable reader.
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.AsyncReaderWriterLock.Id">
      <summary>
            Gets a semi-unique identifier for this asynchronous lock.
            </summary>
    </member>
    <member name="T:Nito.AsyncEx.AsyncSemaphore">
      <summary>
            An async-compatible semaphore. Alternatively, you could use <c>SemaphoreSlim</c> on .NET 4.5 / Windows Store.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncSemaphore._queue">
      <summary>
            The queue of TCSs that other tasks are awaiting to acquire the semaphore.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncSemaphore._count">
      <summary>
            The number of waits that will be immediately granted.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncSemaphore._id">
      <summary>
            The semi-unique identifier for this instance. This is 0 if the id has not yet been created.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.AsyncSemaphore._mutex">
      <summary>
            The object used for mutual exclusion.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncSemaphore.#ctor(System.Int32,Nito.AsyncEx.IAsyncWaitQueue{System.Object})">
      <summary>
            Creates a new async-compatible semaphore with the specified initial count.
            </summary>
      <param name="initialCount">The initial count for this semaphore. This must be greater than or equal to zero.</param>
      <param name="queue">The wait queue used to manage waiters.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncSemaphore.#ctor(System.Int32)">
      <summary>
            Creates a new async-compatible semaphore with the specified initial count.
            </summary>
      <param name="initialCount">The initial count for this semaphore. This must be greater than or equal to zero.</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncSemaphore.WaitAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously waits for a slot in the semaphore to be available.
            </summary>
      <param name="cancellationToken">The cancellation token used to cancel the wait. If this is already set, then this method will attempt to take the slot immediately (succeeding if a slot is currently available).</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncSemaphore.Wait(System.Threading.CancellationToken)">
      <summary>
            Synchronously waits for a slot in the semaphore to be available. This method may block the calling thread.
            </summary>
      <param name="cancellationToken">The cancellation token used to cancel the wait. If this is already set, then this method will attempt to take the slot immediately (succeeding if a slot is currently available).</param>
    </member>
    <member name="M:Nito.AsyncEx.AsyncSemaphore.WaitAsync">
      <summary>
            Asynchronously waits for a slot in the semaphore to be available.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncSemaphore.Wait">
      <summary>
            Synchronously waits for a slot in the semaphore to be available. This method may block the calling thread.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncSemaphore.Release(System.Int32)">
      <summary>
            Releases the semaphore.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncSemaphore.Release">
      <summary>
            Releases the semaphore.
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.AsyncSemaphore.Id">
      <summary>
            Gets a semi-unique identifier for this asynchronous semaphore.
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.AsyncSemaphore.CurrentCount">
      <summary>
            Gets the number of slots currently available on this semaphore.
            </summary>
    </member>
    <member name="T:Nito.AsyncEx.IAsyncWaitQueue`1">
      <summary>
            A collection of cancelable <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> instances. Implementations must be threadsafe <b>and</b> must work correctly if the caller is holding a lock.
            </summary>
      <typeparam name="T">The type of the results. If this isn't needed, use <see cref="T:System.Object" />.</typeparam>
    </member>
    <member name="M:Nito.AsyncEx.IAsyncWaitQueue`1.Enqueue">
      <summary>
            Creates a new entry and queues it to this wait queue. The returned task must support both synchronous and asynchronous waits.
            </summary>
      <returns>The queued task.</returns>
    </member>
    <member name="M:Nito.AsyncEx.IAsyncWaitQueue`1.Dequeue(`0)">
      <summary>
            Removes a single entry in the wait queue. Returns a disposable that completes that entry.
            </summary>
      <param name="result">The result used to complete the wait queue entry. If this isn't needed, use <c>default(T)</c>.</param>
    </member>
    <member name="M:Nito.AsyncEx.IAsyncWaitQueue`1.DequeueAll(`0)">
      <summary>
            Removes all entries in the wait queue. Returns a disposable that completes all entries.
            </summary>
      <param name="result">The result used to complete the wait queue entries. If this isn't needed, use <c>default(T)</c>.</param>
    </member>
    <member name="M:Nito.AsyncEx.IAsyncWaitQueue`1.TryCancel(System.Threading.Tasks.Task)">
      <summary>
            Attempts to remove an entry from the wait queue. Returns a disposable that cancels the entry.
            </summary>
      <param name="task">The task to cancel.</param>
      <returns>A value indicating whether the entry was found and canceled.</returns>
    </member>
    <member name="M:Nito.AsyncEx.IAsyncWaitQueue`1.CancelAll">
      <summary>
            Removes all entries from the wait queue. Returns a disposable that cancels all entries.
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.IAsyncWaitQueue`1.IsEmpty">
      <summary>
            Gets whether the queue is empty.
            </summary>
    </member>
    <member name="T:Nito.AsyncEx.AsyncWaitQueueExtensions">
      <summary>
            Provides extension methods for wait queues.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AsyncWaitQueueExtensions.Enqueue``1(Nito.AsyncEx.IAsyncWaitQueue{``0},System.Threading.CancellationToken)">
      <summary>
            Creates a new entry and queues it to this wait queue. If the cancellation token is already canceled, this method immediately returns a canceled task without modifying the wait queue.
            </summary>
      <param name="this">The wait queue.</param>
      <param name="token">The token used to cancel the wait.</param>
      <returns>The queued task.</returns>
    </member>
    <member name="M:Nito.AsyncEx.AsyncWaitQueueExtensions.Enqueue``1(Nito.AsyncEx.IAsyncWaitQueue{``0},System.Object,System.Threading.CancellationToken)">
      <summary>
            Creates a new entry and queues it to this wait queue. If the cancellation token is already canceled, this method immediately returns a canceled task without modifying the wait queue.
            </summary>
      <param name="this">The wait queue.</param>
      <param name="syncObject">A synchronization object taken while cancelling the entry.</param>
      <param name="token">The token used to cancel the wait.</param>
      <returns>The queued task.</returns>
    </member>
    <member name="T:Nito.AsyncEx.DefaultAsyncWaitQueue`1">
      <summary>
            The default wait queue implementation, which uses a double-ended queue.
            </summary>
      <typeparam name="T">The type of the results. If this isn't needed, use <see cref="T:System.Object" />.</typeparam>
    </member>
    <member name="T:Nito.AsyncEx.AwaitableDisposable`1">
      <summary>
            An awaitable wrapper around a task whose result is disposable. The wrapper is not disposable, so this prevents usage errors like "using (MyAsync())" when the appropriate usage should be "using (await MyAsync())".
            </summary>
      <typeparam name="T">The type of the result of the underlying task.</typeparam>
    </member>
    <member name="F:Nito.AsyncEx.AwaitableDisposable`1._task">
      <summary>
            The underlying task.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AwaitableDisposable`1.#ctor(System.Threading.Tasks.Task{`0})">
      <summary>
            Initializes a new awaitable wrapper around the specified task.
            </summary>
      <param name="task">The underlying task to wrap.</param>
    </member>
    <member name="M:Nito.AsyncEx.AwaitableDisposable`1.AsTask">
      <summary>
            Returns the underlying task.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AwaitableDisposable`1.op_Implicit(Nito.AsyncEx.AwaitableDisposable{`0})~System.Threading.Tasks.Task{`0}">
      <summary>
            Implicit conversion to the underlying task.
            </summary>
      <param name="source">The awaitable wrapper.</param>
    </member>
    <member name="M:Nito.AsyncEx.AwaitableDisposable`1.GetAwaiter">
      <summary>
            Infrastructure. Returns the task awaiter for the underlying task.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.AwaitableDisposable`1.ConfigureAwait(System.Boolean)">
      <summary>
            Infrastructure. Returns a configured task awaiter for the underlying task.
            </summary>
      <param name="continueOnCapturedContext">Whether to attempt to marshal the continuation back to the captured context.</param>
    </member>
    <member name="T:Nito.AsyncEx.CancellationTokenExtensions">
      <summary>
            Provides extension methods for <see cref="T:System.Threading.CancellationToken" />.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.CancellationTokenExtensions.AsTask(System.Threading.CancellationToken)">
      <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task" /> that is canceled when this <see cref="T:System.Threading.CancellationToken" /> is canceled.
            </summary>
      <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> to monitor.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that is canceled when this <see cref="T:System.Threading.CancellationToken" /> is canceled.</returns>
    </member>
    <member name="T:Nito.AsyncEx.CancellationTokenHelpers">
      <summary>
            Helper methods for cancellation tokens.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.CancellationTokenHelpers.Timeout(System.TimeSpan)">
      <summary>
            Creates a cancellation token that is canceled after the due time.
            </summary>
      <param name="dueTime">The due time after which to cancel the token.</param>
      <returns>A cancellation token that is canceled after the due time.</returns>
    </member>
    <member name="M:Nito.AsyncEx.CancellationTokenHelpers.Timeout(System.Int32)">
      <summary>
            Creates a cancellation token that is canceled after the due time.
            </summary>
      <param name="dueTime">The due time after which to cancel the token.</param>
      <returns>A cancellation token that is canceled after the due time.</returns>
    </member>
    <member name="M:Nito.AsyncEx.CancellationTokenHelpers.Normalize(System.Threading.CancellationToken[])">
      <summary>
            Reduces a set of cancellation tokens by removing any cancellation tokens that cannot be canceled. If any tokens are already canceled, the returned token will be canceled.
            </summary>
      <param name="cancellationTokens">The cancellation tokens to reduce.</param>
    </member>
    <member name="M:Nito.AsyncEx.CancellationTokenHelpers.Normalize(System.Collections.Generic.IEnumerable{System.Threading.CancellationToken})">
      <summary>
            Reduces a set of cancellation tokens by removing any cancellation tokens that cannot be canceled. If any tokens are already canceled, the returned token will be canceled.
            </summary>
      <param name="cancellationTokens">The cancellation tokens to reduce.</param>
    </member>
    <member name="M:Nito.AsyncEx.CancellationTokenHelpers.FromTask(System.Threading.Tasks.Task,System.Threading.Tasks.TaskContinuationOptions)">
      <summary>
            Creates a cancellation token that is canceled when the provided <see cref="T:System.Threading.Tasks.Task" /> completes.
            </summary>
      <param name="source">The task to observe.</param>
      <param name="continuationOptions">The options to use for the task continuation.</param>
    </member>
    <member name="M:Nito.AsyncEx.CancellationTokenHelpers.FromTask(System.Threading.Tasks.Task)">
      <summary>
            Creates a cancellation token that is canceled when the provided <see cref="T:System.Threading.Tasks.Task" /> completes.
            </summary>
      <param name="source">The task to observe.</param>
    </member>
    <member name="P:Nito.AsyncEx.CancellationTokenHelpers.None">
      <summary>
            Gets <see cref="P:System.Threading.CancellationToken.None" />, a cancellation token that is never canceled.
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.CancellationTokenHelpers.Canceled">
      <summary>
            Gets a cancellation token that is already canceled.
            </summary>
    </member>
    <member name="T:Nito.AsyncEx.DeferralManager">
      <summary>
            Manages the deferrals for a "command" event that may have asynchonous handlers.
            </summary>
    </member>
    <member name="T:Nito.AsyncEx.DeferralManager.Deferral">
      <summary>
            A deferral.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.DeferralManager.Deferral.#ctor(Nito.AsyncEx.AsyncCountdownEvent)">
      <summary>
            Creates a new deferral referencing the countdown event of the deferral manager.
            </summary>
      <param name="count">The countdown event of the deferral manager.</param>
    </member>
    <member name="F:Nito.AsyncEx.DeferralManager._count">
      <summary>
            The countdown event, triggered when all deferrals have completed. This is <c>null</c> if there are no deferrals.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.DeferralManager.GetDeferral">
      <summary>
            Gets a deferral. The deferral is complete when disposed.
            </summary>
      <returns>The deferral.</returns>
    </member>
    <member name="M:Nito.AsyncEx.DeferralManager.SignalAndWaitAsync">
      <summary>
            Notifies the manager that all deferrals have been requested, and returns a task that is completed when all deferrals have completed.
            </summary>
      <returns>A task that is completed when all deferrals have completed.</returns>
    </member>
    <member name="T:Nito.Deque`1">
      <summary>
            A double-ended queue (deque), which provides O(1) indexed access, O(1) removals from the front and back, amortized O(1) insertions to the front and back, and O(N) insertions and removals anywhere else (with the operations getting slower as the index approaches the middle).
            </summary>
      <typeparam name="T">The type of elements contained in the deque.</typeparam>
    </member>
    <member name="F:Nito.Deque`1.DefaultCapacity">
      <summary>
            The default capacity.
            </summary>
    </member>
    <member name="F:Nito.Deque`1.buffer">
      <summary>
            The circular buffer that holds the view.
            </summary>
    </member>
    <member name="F:Nito.Deque`1.offset">
      <summary>
            The offset into <see cref="F:Nito.Deque`1.buffer" /> where the view begins.
            </summary>
    </member>
    <member name="M:Nito.Deque`1.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.Deque`1" /> class with the specified capacity.
            </summary>
      <param name="capacity">The initial capacity. Must be greater than <c>0</c>.</param>
    </member>
    <member name="M:Nito.Deque`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.Deque`1" /> class with the elements from the specified collection.
            </summary>
      <param name="collection">The collection.</param>
    </member>
    <member name="M:Nito.Deque`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.Deque`1" /> class.
            </summary>
    </member>
    <member name="M:Nito.Deque`1.Insert(System.Int32,`0)">
      <summary>
            Inserts an item to this list at the specified index.
            </summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert into this list.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in this list.
            </exception>
      <exception cref="T:System.NotSupportedException">
            This list is read-only.
            </exception>
    </member>
    <member name="M:Nito.Deque`1.RemoveAt(System.Int32)">
      <summary>
            Removes the item at the specified index.
            </summary>
      <param name="index">The zero-based index of the item to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in this list.
            </exception>
      <exception cref="T:System.NotSupportedException">
            This list is read-only.
            </exception>
    </member>
    <member name="M:Nito.Deque`1.IndexOf(`0)">
      <summary>
            Determines the index of a specific item in this list.
            </summary>
      <param name="item">The object to locate in this list.</param>
      <returns>The index of <paramref name="item" /> if found in this list; otherwise, -1.</returns>
    </member>
    <member name="M:Nito.Deque`1.Remove(`0)">
      <summary>
            Removes the first occurrence of a specific object from this list.
            </summary>
      <param name="item">The object to remove from this list.</param>
      <returns>
            true if <paramref name="item" /> was successfully removed from this list; otherwise, false. This method also returns false if <paramref name="item" /> is not found in this list.
            </returns>
      <exception cref="T:System.NotSupportedException">
            This list is read-only.
            </exception>
    </member>
    <member name="M:Nito.Deque`1.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Nito.Deque`1.CheckNewIndexArgument(System.Int32,System.Int32)">
      <summary>
            Checks the <paramref name="index" /> argument to see if it refers to a valid insertion point in a source of a given length.
            </summary>
      <param name="sourceLength">The length of the source. This parameter is not checked for validity.</param>
      <param name="index">The index into the source.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index to an insertion point for the source.</exception>
    </member>
    <member name="M:Nito.Deque`1.CheckExistingIndexArgument(System.Int32,System.Int32)">
      <summary>
            Checks the <paramref name="index" /> argument to see if it refers to an existing element in a source of a given length.
            </summary>
      <param name="sourceLength">The length of the source. This parameter is not checked for validity.</param>
      <param name="index">The index into the source.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index to an existing element for the source.</exception>
    </member>
    <member name="M:Nito.Deque`1.CheckRangeArguments(System.Int32,System.Int32,System.Int32)">
      <summary>
            Checks the <paramref name="offset" /> and <paramref name="count" /> arguments for validity when applied to a source of a given length. Allows 0-element ranges, including a 0-element range at the end of the source.
            </summary>
      <param name="sourceLength">The length of the source. This parameter is not checked for validity.</param>
      <param name="offset">The index into source at which the range begins.</param>
      <param name="count">The number of elements in the range.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Either <paramref name="offset" /> or <paramref name="count" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">The range [offset, offset + count) is not within the range [0, sourceLength).</exception>
    </member>
    <member name="M:Nito.Deque`1.DequeIndexToBufferIndex(System.Int32)">
      <summary>
            Applies the offset to <paramref name="index" />, resulting in a buffer index.
            </summary>
      <param name="index">The deque index.</param>
      <returns>The buffer index.</returns>
    </member>
    <member name="M:Nito.Deque`1.DoGetItem(System.Int32)">
      <summary>
            Gets an element at the specified view index.
            </summary>
      <param name="index">The zero-based view index of the element to get. This index is guaranteed to be valid.</param>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="M:Nito.Deque`1.DoSetItem(System.Int32,`0)">
      <summary>
            Sets an element at the specified view index.
            </summary>
      <param name="index">The zero-based view index of the element to get. This index is guaranteed to be valid.</param>
      <param name="item">The element to store in the list.</param>
    </member>
    <member name="M:Nito.Deque`1.DoInsert(System.Int32,`0)">
      <summary>
            Inserts an element at the specified view index.
            </summary>
      <param name="index">The zero-based view index at which the element should be inserted. This index is guaranteed to be valid.</param>
      <param name="item">The element to store in the list.</param>
    </member>
    <member name="M:Nito.Deque`1.DoRemoveAt(System.Int32)">
      <summary>
            Removes an element at the specified view index.
            </summary>
      <param name="index">The zero-based view index of the element to remove. This index is guaranteed to be valid.</param>
    </member>
    <member name="M:Nito.Deque`1.PostIncrement(System.Int32)">
      <summary>
            Increments <see cref="F:Nito.Deque`1.offset" /> by <paramref name="value" /> using modulo-<see cref="P:Nito.Deque`1.Capacity" /> arithmetic.
            </summary>
      <param name="value">The value by which to increase <see cref="F:Nito.Deque`1.offset" />. May not be negative.</param>
      <returns>The value of <see cref="F:Nito.Deque`1.offset" /> after it was incremented.</returns>
    </member>
    <member name="M:Nito.Deque`1.PreDecrement(System.Int32)">
      <summary>
            Decrements <see cref="F:Nito.Deque`1.offset" /> by <paramref name="value" /> using modulo-<see cref="P:Nito.Deque`1.Capacity" /> arithmetic.
            </summary>
      <param name="value">The value by which to reduce <see cref="F:Nito.Deque`1.offset" />. May not be negative or greater than <see cref="P:Nito.Deque`1.Capacity" />.</param>
      <returns>The value of <see cref="F:Nito.Deque`1.offset" /> before it was decremented.</returns>
    </member>
    <member name="M:Nito.Deque`1.DoAddToBack(`0)">
      <summary>
            Inserts a single element to the back of the view. <see cref="P:Nito.Deque`1.IsFull" /> must be false when this method is called.
            </summary>
      <param name="value">The element to insert.</param>
    </member>
    <member name="M:Nito.Deque`1.DoAddToFront(`0)">
      <summary>
            Inserts a single element to the front of the view. <see cref="P:Nito.Deque`1.IsFull" /> must be false when this method is called.
            </summary>
      <param name="value">The element to insert.</param>
    </member>
    <member name="M:Nito.Deque`1.DoRemoveFromBack">
      <summary>
            Removes and returns the last element in the view. <see cref="P:Nito.Deque`1.IsEmpty" /> must be false when this method is called.
            </summary>
      <returns>The former last element.</returns>
    </member>
    <member name="M:Nito.Deque`1.DoRemoveFromFront">
      <summary>
            Removes and returns the first element in the view. <see cref="P:Nito.Deque`1.IsEmpty" /> must be false when this method is called.
            </summary>
      <returns>The former first element.</returns>
    </member>
    <member name="M:Nito.Deque`1.DoInsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0},System.Int32)">
      <summary>
            Inserts a range of elements into the view.
            </summary>
      <param name="index">The index into the view at which the elements are to be inserted.</param>
      <param name="collection">The elements to insert.</param>
      <param name="collectionCount">The number of elements in <paramref name="collection" />. Must be greater than zero, and the sum of <paramref name="collectionCount" /> and <see cref="P:Nito.Deque`1.Count" /> must be less than or equal to <see cref="P:Nito.Deque`1.Capacity" />.</param>
    </member>
    <member name="M:Nito.Deque`1.DoRemoveRange(System.Int32,System.Int32)">
      <summary>
            Removes a range of elements from the view.
            </summary>
      <param name="index">The index into the view at which the range begins.</param>
      <param name="collectionCount">The number of elements in the range. This must be greater than 0 and less than or equal to <see cref="P:Nito.Deque`1.Count" />.</param>
    </member>
    <member name="M:Nito.Deque`1.EnsureCapacityForOneElement">
      <summary>
            Doubles the capacity if necessary to make room for one more element. When this method returns, <see cref="P:Nito.Deque`1.IsFull" /> is false.
            </summary>
    </member>
    <member name="M:Nito.Deque`1.AddToBack(`0)">
      <summary>
            Inserts a single element at the back of this deque.
            </summary>
      <param name="value">The element to insert.</param>
    </member>
    <member name="M:Nito.Deque`1.AddToFront(`0)">
      <summary>
            Inserts a single element at the front of this deque.
            </summary>
      <param name="value">The element to insert.</param>
    </member>
    <member name="M:Nito.Deque`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Inserts a collection of elements into this deque.
            </summary>
      <param name="index">The index at which the collection is inserted.</param>
      <param name="collection">The collection of elements to insert.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index to an insertion point for the source.</exception>
    </member>
    <member name="M:Nito.Deque`1.RemoveRange(System.Int32,System.Int32)">
      <summary>
            Removes a range of elements from this deque.
            </summary>
      <param name="offset">The index into the deque at which the range begins.</param>
      <param name="count">The number of elements to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Either <paramref name="offset" /> or <paramref name="count" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">The range [<paramref name="offset" />, <paramref name="offset" /> + <paramref name="count" />) is not within the range [0, <see cref="P:Nito.Deque`1.Count" />).</exception>
    </member>
    <member name="M:Nito.Deque`1.RemoveFromBack">
      <summary>
            Removes and returns the last element of this deque.
            </summary>
      <returns>The former last element.</returns>
      <exception cref="T:System.InvalidOperationException">The deque is empty.</exception>
    </member>
    <member name="M:Nito.Deque`1.RemoveFromFront">
      <summary>
            Removes and returns the first element of this deque.
            </summary>
      <returns>The former first element.</returns>
      <exception cref="T:System.InvalidOperationException">The deque is empty.</exception>
    </member>
    <member name="M:Nito.Deque`1.Clear">
      <summary>
            Removes all items from this deque.
            </summary>
    </member>
    <member name="P:Nito.Deque`1.Item(System.Int32)">
      <summary>
            Gets or sets the item at the specified index.
            </summary>
      <param name="index">The index of the item to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in this list.</exception>
      <exception cref="T:System.NotSupportedException">This property is set and the list is read-only.</exception>
    </member>
    <member name="P:Nito.Deque`1.IsEmpty">
      <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
    </member>
    <member name="P:Nito.Deque`1.IsFull">
      <summary>
            Gets a value indicating whether this instance is at full capacity.
            </summary>
    </member>
    <member name="P:Nito.Deque`1.IsSplit">
      <summary>
            Gets a value indicating whether the buffer is "split" (meaning the beginning of the view is at a later index in <see cref="F:Nito.Deque`1.buffer" /> than the end).
            </summary>
    </member>
    <member name="P:Nito.Deque`1.Capacity">
      <summary>
            Gets or sets the capacity for this deque. This value must always be greater than zero, and this property cannot be set to a value less than <see cref="P:Nito.Deque`1.Count" />.
            </summary>
      <exception cref="T:System.InvalidOperationException">
        <c>Capacity</c> cannot be set to a value less than <see cref="P:Nito.Deque`1.Count" />.</exception>
    </member>
    <member name="P:Nito.Deque`1.Count">
      <summary>
            Gets the number of elements contained in this deque.
            </summary>
      <returns>The number of elements contained in this deque.</returns>
    </member>
    <member name="T:Nito.AsyncEx.ExceptionHelpers">
      <summary>
            Provides helper (non-extension) methods dealing with exceptions.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.ExceptionHelpers.PrepareForRethrow(System.Exception)">
      <summary>
            Attempts to prepare the exception for re-throwing by preserving the stack trace. The returned exception should be immediately thrown.
            </summary>
      <param name="exception">The exception. May not be <c>null</c>.</param>
      <returns>The <see cref="T:System.Exception" /> that was passed into this method.</returns>
    </member>
    <member name="T:Nito.AsyncEx.Internal.IdManager`1">
      <summary>
            Allocates Ids for instances on demand. 0 is an invalid/unassigned Id. Ids may be non-unique in very long-running systems. This is similar to the Id system used by <see cref="T:System.Threading.Tasks.Task" /> and <see cref="T:System.Threading.Tasks.TaskScheduler" />.
            </summary>
      <typeparam name="TTag">The type for which ids are generated.</typeparam>
    </member>
    <member name="F:Nito.AsyncEx.Internal.IdManager`1._lastId">
      <summary>
            The last id generated for this type. This is 0 if no ids have been generated.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.Internal.IdManager`1.GetId(System.Int32@)">
      <summary>
            Returns the id, allocating it if necessary.
            </summary>
      <param name="id">A reference to the field containing the id.</param>
    </member>
    <member name="T:Nito.AsyncEx.NormalizedCancellationToken">
      <summary>
            A <see cref="P:Nito.AsyncEx.NormalizedCancellationToken.Token" /> that may or may not also reference its own <see cref="T:System.Threading.CancellationTokenSource" />. Instances of this type should always be disposed.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.NormalizedCancellationToken._cts">
      <summary>
            The <see cref="T:System.Threading.CancellationTokenSource" />, if any. If this is not <c>null</c>, then <see cref="F:Nito.AsyncEx.NormalizedCancellationToken._token" /> is <c>_cts.Token</c>.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.NormalizedCancellationToken._token">
      <summary>
            The <see cref="P:Nito.AsyncEx.NormalizedCancellationToken.Token" />. If <see cref="F:Nito.AsyncEx.NormalizedCancellationToken._cts" /> is not <c>null</c>, then this is <c>_cts.Token</c>.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.NormalizedCancellationToken.#ctor">
      <summary>
            Creates a normalized cancellation token that can never be canceled.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.NormalizedCancellationToken.#ctor(System.Threading.CancellationTokenSource)">
      <summary>
            Creates a normalized cancellation token from a <see cref="T:System.Threading.CancellationTokenSource" />. <see cref="P:Nito.AsyncEx.NormalizedCancellationToken.Token" /> is set to the <see cref="P:System.Threading.CancellationTokenSource.Token" /> property of <paramref name="cts" />.
            </summary>
      <param name="cts">The source for this token.</param>
    </member>
    <member name="M:Nito.AsyncEx.NormalizedCancellationToken.#ctor(System.Threading.CancellationToken)">
      <summary>
            Creates a normalized cancellation token from a <see cref="T:System.Threading.CancellationToken" />. <see cref="P:Nito.AsyncEx.NormalizedCancellationToken.Token" /> is set to <paramref name="token" />.
            </summary>
      <param name="token">The source for this token.</param>
    </member>
    <member name="M:Nito.AsyncEx.NormalizedCancellationToken.Dispose">
      <summary>
            Releases any resources used by this normalized cancellation token.
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.NormalizedCancellationToken.Token">
      <summary>
            Gets the <see cref="T:System.Threading.CancellationToken" /> for this normalized cancellation token.
            </summary>
    </member>
    <member name="T:Nito.AsyncEx.INotifyTaskCompletion">
      <summary>
            Watches a task and raises property-changed notifications when the task completes.
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.INotifyTaskCompletion.Task">
      <summary>
            Gets the task being watched. This property never changes and is never <c>null</c>.
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.INotifyTaskCompletion.TaskCompleted">
      <summary>
            Gets a task that completes successfully when <see cref="P:Nito.AsyncEx.INotifyTaskCompletion.Task" /> completes (successfully, faulted, or canceled). This property never changes and is never <c>null</c>.
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.INotifyTaskCompletion.Status">
      <summary>
            Gets the current task status. This property raises a notification when the task completes.
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.INotifyTaskCompletion.IsCompleted">
      <summary>
            Gets whether the task has completed. This property raises a notification when the value changes to <c>true</c>.
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.INotifyTaskCompletion.IsNotCompleted">
      <summary>
            Gets whether the task is busy (not completed). This property raises a notification when the value changes to <c>false</c>.
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.INotifyTaskCompletion.IsSuccessfullyCompleted">
      <summary>
            Gets whether the task has completed successfully. This property raises a notification when the value changes to <c>true</c>.
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.INotifyTaskCompletion.IsCanceled">
      <summary>
            Gets whether the task has been canceled. This property raises a notification only if the task is canceled (i.e., if the value changes to <c>true</c>).
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.INotifyTaskCompletion.IsFaulted">
      <summary>
            Gets whether the task has faulted. This property raises a notification only if the task faults (i.e., if the value changes to <c>true</c>).
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.INotifyTaskCompletion.Exception">
      <summary>
            Gets the wrapped faulting exception for the task. Returns <c>null</c> if the task is not faulted. This property raises a notification only if the task faults (i.e., if the value changes to non-<c>null</c>).
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.INotifyTaskCompletion.InnerException">
      <summary>
            Gets the original faulting exception for the task. Returns <c>null</c> if the task is not faulted. This property raises a notification only if the task faults (i.e., if the value changes to non-<c>null</c>).
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.INotifyTaskCompletion.ErrorMessage">
      <summary>
            Gets the error message for the original faulting exception for the task. Returns <c>null</c> if the task is not faulted. This property raises a notification only if the task faults (i.e., if the value changes to non-<c>null</c>).
            </summary>
    </member>
    <member name="T:Nito.AsyncEx.INotifyTaskCompletion`1">
      <summary>
            Watches a task and raises property-changed notifications when the task completes.
            </summary>
      <typeparam name="TResult">The type of the task result.</typeparam>
    </member>
    <member name="P:Nito.AsyncEx.INotifyTaskCompletion`1.Task">
      <summary>
            Gets the task being watched. This property never changes and is never <c>null</c>.
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.INotifyTaskCompletion`1.Result">
      <summary>
            Gets the result of the task. Returns the default value of <typeparamref name="TResult" /> if the task has not completed successfully. This property raises a notification when the task completes successfully.
            </summary>
    </member>
    <member name="T:Nito.AsyncEx.NotifyTaskCompletion">
      <summary>
            Factory for task completion notifiers.
            </summary>
    </member>
    <member name="T:Nito.AsyncEx.NotifyTaskCompletion.NotifyTaskCompletionImplementation">
      <summary>
            Watches a task and raises property-changed notifications when the task completes.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.NotifyTaskCompletion.NotifyTaskCompletionImplementation.#ctor(System.Threading.Tasks.Task)">
      <summary>
            Initializes a task notifier watching the specified task.
            </summary>
      <param name="task">The task to watch.</param>
    </member>
    <member name="T:Nito.AsyncEx.NotifyTaskCompletion.NotifyTaskCompletionImplementation`1">
      <summary>
            Watches a task and raises property-changed notifications when the task completes.
            </summary>
      <typeparam name="TResult">The type of the task result.</typeparam>
    </member>
    <member name="M:Nito.AsyncEx.NotifyTaskCompletion.NotifyTaskCompletionImplementation`1.#ctor(System.Threading.Tasks.Task{`0})">
      <summary>
            Initializes a task notifier watching the specified task.
            </summary>
      <param name="task">The task to watch.</param>
    </member>
    <member name="M:Nito.AsyncEx.NotifyTaskCompletion.Create(System.Threading.Tasks.Task)">
      <summary>
            Creates a new task notifier watching the specified task.
            </summary>
      <param name="task">The task to watch.</param>
      <returns>A new task notifier watching the specified task.</returns>
    </member>
    <member name="M:Nito.AsyncEx.NotifyTaskCompletion.Create``1(System.Threading.Tasks.Task{``0})">
      <summary>
            Creates a new task notifier watching the specified task.
            </summary>
      <typeparam name="TResult">The type of the task result.</typeparam>
      <param name="task">The task to watch.</param>
      <returns>A new task notifier watching the specified task.</returns>
    </member>
    <member name="M:Nito.AsyncEx.NotifyTaskCompletion.Create(System.Func{System.Threading.Tasks.Task})">
      <summary>
            Executes the specified asynchronous code and creates a new task notifier watching the returned task.
            </summary>
      <param name="asyncAction">The asynchronous code to execute.</param>
      <returns>A new task notifier watching the returned task.</returns>
    </member>
    <member name="M:Nito.AsyncEx.NotifyTaskCompletion.Create``1(System.Func{System.Threading.Tasks.Task{``0}})">
      <summary>
            Executes the specified asynchronous code and creates a new task notifier watching the returned task.
            </summary>
      <param name="asyncAction">The asynchronous code to execute.</param>
      <returns>A new task notifier watching the returned task.</returns>
    </member>
    <member name="T:Nito.AsyncEx.PropertyProgress`1">
      <summary>
            A progress implementation that stores progress updates in a property. If this instance is created on a UI thread, its <see cref="P:Nito.AsyncEx.PropertyProgress`1.Progress" /> property is suitable for data binding.
            </summary>
      <typeparam name="T">The type of progress value.</typeparam>
    </member>
    <member name="F:Nito.AsyncEx.PropertyProgress`1._context">
      <summary>
            The context of the thread that created this instance.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.PropertyProgress`1._progress">
      <summary>
            The last reported progress value.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.PropertyProgress`1.#ctor(`0)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.AsyncEx.PropertyProgress`1" /> class.
            </summary>
      <param name="initialProgress">The initial progress value.</param>
    </member>
    <member name="M:Nito.AsyncEx.PropertyProgress`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.AsyncEx.PropertyProgress`1" /> class.
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.PropertyProgress`1.Progress">
      <summary>
            The last reported progress value.
            </summary>
    </member>
    <member name="T:Nito.AsyncEx.SynchronizationContextHelpers">
      <summary>
            Provides helper types for <see cref="T:System.Threading.SynchronizationContext" />.
            </summary>
    </member>
    <member name="T:Nito.AsyncEx.SynchronizationContextHelpers.SynchronizationContextSwitcher">
      <summary>
            Utility class for temporarily switching <see cref="T:System.Threading.SynchronizationContext" /> implementations.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.SynchronizationContextHelpers.SynchronizationContextSwitcher.#ctor(System.Threading.SynchronizationContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.AsyncEx.SynchronizationContextHelpers.SynchronizationContextSwitcher" /> class, installing the new <see cref="T:System.Threading.SynchronizationContext" />.
            </summary>
      <param name="newContext">The new <see cref="T:System.Threading.SynchronizationContext" />.</param>
    </member>
    <member name="P:Nito.AsyncEx.SynchronizationContextHelpers.CurrentOrDefault">
      <summary>
            Retrieves the current synchronization context, or the default synchronization context if there is no current synchronization context.
            </summary>
    </member>
    <member name="T:Nito.AsyncEx.Synchronous.TaskExtensions">
      <summary>
            Provides synchronous extension methods for tasks.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.Synchronous.TaskExtensions.WaitAndUnwrapException(System.Threading.Tasks.Task)">
      <summary>
            Waits for the task to complete, unwrapping any exceptions.
            </summary>
      <param name="task">The task. May not be <c>null</c>.</param>
    </member>
    <member name="M:Nito.AsyncEx.Synchronous.TaskExtensions.WaitAndUnwrapException(System.Threading.Tasks.Task,System.Threading.CancellationToken)">
      <summary>
            Waits for the task to complete, unwrapping any exceptions.
            </summary>
      <param name="task">The task. May not be <c>null</c>.</param>
      <param name="cancellationToken">A cancellation token to observe while waiting for the task to complete.</param>
      <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken" /> was cancelled before the <paramref name="task" /> completed, or the <paramref name="task" /> raised an <see cref="T:System.OperationCanceledException" />.</exception>
    </member>
    <member name="M:Nito.AsyncEx.Synchronous.TaskExtensions.WaitAndUnwrapException``1(System.Threading.Tasks.Task{``0})">
      <summary>
            Waits for the task to complete, unwrapping any exceptions.
            </summary>
      <typeparam name="TResult">The type of the result of the task.</typeparam>
      <param name="task">The task. May not be <c>null</c>.</param>
      <returns>The result of the task.</returns>
    </member>
    <member name="M:Nito.AsyncEx.Synchronous.TaskExtensions.WaitAndUnwrapException``1(System.Threading.Tasks.Task{``0},System.Threading.CancellationToken)">
      <summary>
            Waits for the task to complete, unwrapping any exceptions.
            </summary>
      <typeparam name="TResult">The type of the result of the task.</typeparam>
      <param name="task">The task. May not be <c>null</c>.</param>
      <param name="cancellationToken">A cancellation token to observe while waiting for the task to complete.</param>
      <returns>The result of the task.</returns>
      <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken" /> was cancelled before the <paramref name="task" /> completed, or the <paramref name="task" /> raised an <see cref="T:System.OperationCanceledException" />.</exception>
    </member>
    <member name="M:Nito.AsyncEx.Synchronous.TaskExtensions.WaitWithoutException(System.Threading.Tasks.Task)">
      <summary>
            Waits for the task to complete, but does not raise task exceptions. The task exception (if any) is unobserved.
            </summary>
      <param name="task">The task. May not be <c>null</c>.</param>
    </member>
    <member name="M:Nito.AsyncEx.Synchronous.TaskExtensions.WaitWithoutException(System.Threading.Tasks.Task,System.Threading.CancellationToken)">
      <summary>
            Waits for the task to complete, but does not raise task exceptions. The task exception (if any) is unobserved.
            </summary>
      <param name="task">The task. May not be <c>null</c>.</param>
      <param name="cancellationToken">A cancellation token to observe while waiting for the task to complete.</param>
      <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken" /> was cancelled before the <paramref name="task" /> completed.</exception>
    </member>
    <member name="T:Nito.AsyncEx.TaskCompletionSource">
      <summary>
            Represents the producer side of a <see cref="T:System.Threading.Tasks.Task" /> unbound to a delegate, providing access to the consumer side through the <see cref="P:Nito.AsyncEx.TaskCompletionSource.Task" /> property.
            </summary>
    </member>
    <member name="F:Nito.AsyncEx.TaskCompletionSource._tcs">
      <summary>
            The underlying TCS.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.TaskCompletionSource.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.AsyncEx.TaskCompletionSource" /> class.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.TaskCompletionSource.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.AsyncEx.TaskCompletionSource" /> class with the specified state.
            </summary>
      <param name="state">The state to use as the underlying <see cref="P:Nito.AsyncEx.TaskCompletionSource.Task" />'s <see cref="P:System.IAsyncResult.AsyncState" />.</param>
    </member>
    <member name="M:Nito.AsyncEx.TaskCompletionSource.#ctor(System.Threading.Tasks.TaskCreationOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.AsyncEx.TaskCompletionSource" /> class with the specified options.
            </summary>
      <param name="creationOptions">The options to use when creating the underlying <see cref="P:Nito.AsyncEx.TaskCompletionSource.Task" />.</param>
    </member>
    <member name="M:Nito.AsyncEx.TaskCompletionSource.#ctor(System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>
            Initializes a new instance of the <see cref="T:Nito.AsyncEx.TaskCompletionSource" /> class with the specified state and options.
            </summary>
      <param name="state">The state to use as the underlying <see cref="P:Nito.AsyncEx.TaskCompletionSource.Task" />'s <see cref="P:System.IAsyncResult.AsyncState" />.</param>
      <param name="creationOptions">The options to use when creating the underlying <see cref="P:Nito.AsyncEx.TaskCompletionSource.Task" />.</param>
    </member>
    <member name="M:Nito.AsyncEx.TaskCompletionSource.SetCanceled">
      <summary>
            Transitions the underlying <see cref="P:Nito.AsyncEx.TaskCompletionSource.Task" /> into the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /> state.
            </summary>
      <exception cref="T:System.InvalidOperationException">The underlying <see cref="P:Nito.AsyncEx.TaskCompletionSource.Task" /> has already been completed.</exception>
    </member>
    <member name="M:Nito.AsyncEx.TaskCompletionSource.TrySetCanceled">
      <summary>
            Attempts to transition the underlying <see cref="P:Nito.AsyncEx.TaskCompletionSource.Task" /> into the <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /> state.
            </summary>
      <returns>
        <c>true</c> if the operation was successful; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nito.AsyncEx.TaskCompletionSource.SetException(System.Exception)">
      <summary>
            Transitions the underlying <see cref="P:Nito.AsyncEx.TaskCompletionSource.Task" /> into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state.
            </summary>
      <param name="exception">The exception to bind to this <see cref="P:Nito.AsyncEx.TaskCompletionSource.Task" />. May not be <c>null</c>.</param>
      <exception cref="T:System.InvalidOperationException">The underlying <see cref="P:Nito.AsyncEx.TaskCompletionSource.Task" /> has already been completed.</exception>
    </member>
    <member name="M:Nito.AsyncEx.TaskCompletionSource.SetException(System.Collections.Generic.IEnumerable{System.Exception})">
      <summary>
            Transitions the underlying <see cref="P:Nito.AsyncEx.TaskCompletionSource.Task" /> into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state.
            </summary>
      <param name="exceptions">The collection of exceptions to bind to this <see cref="P:Nito.AsyncEx.TaskCompletionSource.Task" />. May not be <c>null</c> or contain <c>null</c> elements.</param>
      <exception cref="T:System.InvalidOperationException">The underlying <see cref="P:Nito.AsyncEx.TaskCompletionSource.Task" /> has already been completed.</exception>
    </member>
    <member name="M:Nito.AsyncEx.TaskCompletionSource.TrySetException(System.Exception)">
      <summary>
            Attempts to transition the underlying <see cref="P:Nito.AsyncEx.TaskCompletionSource.Task" /> into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state.
            </summary>
      <param name="exception">The exception to bind to this <see cref="P:Nito.AsyncEx.TaskCompletionSource.Task" />. May not be <c>null</c>.</param>
      <returns>
        <c>true</c> if the operation was successful; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nito.AsyncEx.TaskCompletionSource.TrySetException(System.Collections.Generic.IEnumerable{System.Exception})">
      <summary>
            Attempts to transition the underlying <see cref="P:Nito.AsyncEx.TaskCompletionSource.Task" /> into the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state.
            </summary>
      <param name="exceptions">The collection of exceptions to bind to this <see cref="P:Nito.AsyncEx.TaskCompletionSource.Task" />. May not be <c>null</c> or contain <c>null</c> elements.</param>
      <returns>
        <c>true</c> if the operation was successful; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Nito.AsyncEx.TaskCompletionSource.SetResult">
      <summary>
            Transitions the underlying <see cref="P:Nito.AsyncEx.TaskCompletionSource.Task" /> into the <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /> state.
            </summary>
      <exception cref="T:System.InvalidOperationException">The underlying <see cref="P:Nito.AsyncEx.TaskCompletionSource.Task" /> has already been completed.</exception>
    </member>
    <member name="M:Nito.AsyncEx.TaskCompletionSource.TrySetResult">
      <summary>
            Attempts to transition the underlying <see cref="P:Nito.AsyncEx.TaskCompletionSource.Task" /> into the <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" /> state.
            </summary>
      <returns>
        <c>true</c> if the operation was successful; otherwise, <c>false</c>.</returns>
    </member>
    <member name="P:Nito.AsyncEx.TaskCompletionSource.Task">
      <summary>
            Gets the <see cref="P:Nito.AsyncEx.TaskCompletionSource.Task" /> created by this <see cref="T:Nito.AsyncEx.TaskCompletionSource" />.
            </summary>
    </member>
    <member name="T:Nito.AsyncEx.TaskCompletionSourceExtensions">
      <summary>
            Provides extension methods for <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.TaskCompletionSourceExtensions.TryCompleteFromCompletedTask``2(System.Threading.Tasks.TaskCompletionSource{``0},System.Threading.Tasks.Task{``1})">
      <summary>
            Attempts to complete a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />, propagating the completion of <paramref name="task" />.
            </summary>
      <typeparam name="TResult">The type of the result of the target asynchronous operation.</typeparam>
      <typeparam name="TSourceResult">The type of the result of the source asynchronous operation.</typeparam>
      <param name="this">The task completion source. May not be <c>null</c>.</param>
      <param name="task">The task. May not be <c>null</c>.</param>
      <returns>
        <c>true</c> if this method completed the task completion source; <c>false</c> if it was already completed.</returns>
    </member>
    <member name="M:Nito.AsyncEx.TaskCompletionSourceExtensions.TryCompleteFromEventArgs``1(System.Threading.Tasks.TaskCompletionSource{``0},System.ComponentModel.AsyncCompletedEventArgs,System.Func{``0})">
      <summary>
            Attempts to complete a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />, propagating the completion of <paramref name="eventArgs" />.
            </summary>
      <typeparam name="TResult">The type of the result of the asynchronous operation.</typeparam>
      <param name="this">The task completion source. May not be <c>null</c>.</param>
      <param name="eventArgs">The event arguments passed to the completion event. May not be <c>null</c>.</param>
      <param name="getResult">The delegate used to retrieve the result. This is only invoked if <paramref name="eventArgs" /> indicates successful completion. May not be <c>null</c>.</param>
      <returns>
        <c>true</c> if this method completed the task completion source; <c>false</c> if it was already completed.</returns>
    </member>
    <member name="M:Nito.AsyncEx.TaskCompletionSourceExtensions.TryCompleteFromCompletedTask(Nito.AsyncEx.TaskCompletionSource,System.Threading.Tasks.Task)">
      <summary>
            Attempts to complete a <see cref="T:Nito.AsyncEx.TaskCompletionSource" />, propagating the completion of <paramref name="task" />.
            </summary>
      <param name="this">The task completion source. May not be <c>null</c>.</param>
      <param name="task">The task. May not be <c>null</c>.</param>
      <returns>
        <c>true</c> if this method completed the task completion source; <c>false</c> if it was already completed.</returns>
    </member>
    <member name="M:Nito.AsyncEx.TaskCompletionSourceExtensions.TryCompleteFromEventArgs(Nito.AsyncEx.TaskCompletionSource,System.ComponentModel.AsyncCompletedEventArgs)">
      <summary>
            Attempts to complete a <see cref="T:Nito.AsyncEx.TaskCompletionSource" />, propagating the completion of <paramref name="eventArgs" />.
            </summary>
      <param name="this">The task completion source. May not be <c>null</c>.</param>
      <param name="eventArgs">The event arguments passed to the completion event. May not be <c>null</c>.</param>
      <returns>
        <c>true</c> if this method completed the task completion source; <c>false</c> if it was already completed.</returns>
    </member>
    <member name="M:Nito.AsyncEx.TaskCompletionSourceExtensions.TrySetResultWithBackgroundContinuations``1(System.Threading.Tasks.TaskCompletionSource{``0},``0)">
      <summary>
            Attempts to complete a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> with the specified value, forcing all continuations onto a threadpool thread even if they specified <c>ExecuteSynchronously</c>.
            </summary>
      <typeparam name="TResult">The type of the result of the asynchronous operation.</typeparam>
      <param name="this">The task completion source. May not be <c>null</c>.</param>
      <param name="result">The result of the asynchronous operation.</param>
    </member>
    <member name="M:Nito.AsyncEx.TaskCompletionSourceExtensions.TrySetResultWithBackgroundContinuations(Nito.AsyncEx.TaskCompletionSource)">
      <summary>
            Attempts to complete a <see cref="T:Nito.AsyncEx.TaskCompletionSource" />, forcing all continuations onto a threadpool thread even if they specified <c>ExecuteSynchronously</c>.
            </summary>
      <param name="this">The task completion source. May not be <c>null</c>.</param>
    </member>
    <member name="M:Nito.AsyncEx.TaskCompletionSourceExtensions.TrySetCanceledWithBackgroundContinuations``1(System.Threading.Tasks.TaskCompletionSource{``0})">
      <summary>
            Attempts to complete a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> as canceled, forcing all continuations onto a threadpool thread even if they specified <c>ExecuteSynchronously</c>.
            </summary>
      <typeparam name="TResult">The type of the result of the asynchronous operation.</typeparam>
      <param name="this">The task completion source. May not be <c>null</c>.</param>
    </member>
    <member name="M:Nito.AsyncEx.TaskCompletionSourceExtensions.TrySetCanceledWithBackgroundContinuations(Nito.AsyncEx.TaskCompletionSource)">
      <summary>
            Attempts to complete a <see cref="T:Nito.AsyncEx.TaskCompletionSource" /> as canceled, forcing all continuations onto a threadpool thread even if they specified <c>ExecuteSynchronously</c>.
            </summary>
      <param name="this">The task completion source. May not be <c>null</c>.</param>
    </member>
    <member name="M:Nito.AsyncEx.TaskCompletionSourceExtensions.TrySetExceptionWithBackgroundContinuations``1(System.Threading.Tasks.TaskCompletionSource{``0},System.Exception)">
      <summary>
            Attempts to complete a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> as faulted, forcing all continuations onto a threadpool thread even if they specified <c>ExecuteSynchronously</c>.
            </summary>
      <typeparam name="TResult">The type of the result of the asynchronous operation.</typeparam>
      <param name="this">The task completion source. May not be <c>null</c>.</param>
      <param name="exception">The exception to bind to the task.</param>
    </member>
    <member name="M:Nito.AsyncEx.TaskCompletionSourceExtensions.TrySetExceptionWithBackgroundContinuations(Nito.AsyncEx.TaskCompletionSource,System.Exception)">
      <summary>
            Attempts to complete a <see cref="T:Nito.AsyncEx.TaskCompletionSource" /> as faulted, forcing all continuations onto a threadpool thread even if they specified <c>ExecuteSynchronously</c>.
            </summary>
      <param name="this">The task completion source. May not be <c>null</c>.</param>
      <param name="exception">The exception to bind to the task.</param>
    </member>
    <member name="M:Nito.AsyncEx.TaskCompletionSourceExtensions.TrySetExceptionWithBackgroundContinuations``1(System.Threading.Tasks.TaskCompletionSource{``0},System.Collections.Generic.IEnumerable{System.Exception})">
      <summary>
            Attempts to complete a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> as faulted, forcing all continuations onto a threadpool thread even if they specified <c>ExecuteSynchronously</c>.
            </summary>
      <typeparam name="TResult">The type of the result of the asynchronous operation.</typeparam>
      <param name="this">The task completion source. May not be <c>null</c>.</param>
      <param name="exceptions">The exceptions to bind to the task.</param>
    </member>
    <member name="M:Nito.AsyncEx.TaskCompletionSourceExtensions.TrySetExceptionWithBackgroundContinuations(Nito.AsyncEx.TaskCompletionSource,System.Collections.Generic.IEnumerable{System.Exception})">
      <summary>
            Attempts to complete a <see cref="T:Nito.AsyncEx.TaskCompletionSource" /> as faulted, forcing all continuations onto a threadpool thread even if they specified <c>ExecuteSynchronously</c>.
            </summary>
      <param name="this">The task completion source. May not be <c>null</c>.</param>
      <param name="exceptions">The exceptions to bind to the task.</param>
    </member>
    <member name="T:Nito.AsyncEx.TaskConstants">
      <summary>
            Provides completed task constants.
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.TaskConstants.BooleanTrue">
      <summary>
            A task that has been completed with the value <c>true</c>.
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.TaskConstants.BooleanFalse">
      <summary>
            A task that has been completed with the value <c>false</c>.
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.TaskConstants.Int32Zero">
      <summary>
            A task that has been completed with the value <c>0</c>.
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.TaskConstants.Int32NegativeOne">
      <summary>
            A task that has been completed with the value <c>-1</c>.
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.TaskConstants.Completed">
      <summary>
            A <see cref="T:System.Threading.Tasks.Task" /> that has been completed.
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.TaskConstants.Never">
      <summary>
            A <see cref="T:System.Threading.Tasks.Task" /> that will never complete.
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.TaskConstants.Canceled">
      <summary>
            A task that has been canceled.
            </summary>
    </member>
    <member name="T:Nito.AsyncEx.TaskConstants`1">
      <summary>
            Provides completed task constants.
            </summary>
      <typeparam name="T">The type of the task result.</typeparam>
    </member>
    <member name="P:Nito.AsyncEx.TaskConstants`1.Default">
      <summary>
            A task that has been completed with the default value of <typeparamref name="T" />.
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.TaskConstants`1.Never">
      <summary>
            A <see cref="T:System.Threading.Tasks.Task" /> that will never complete.
            </summary>
    </member>
    <member name="P:Nito.AsyncEx.TaskConstants`1.Canceled">
      <summary>
            A task that has been canceled.
            </summary>
    </member>
    <member name="T:Nito.AsyncEx.TaskExtensions">
      <summary>
            Provides extension methods for tasks.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.TaskExtensions.OrderByCompletion``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
      <summary>
            Creates a new array of tasks which complete in order.
            </summary>
      <typeparam name="T">The type of the results of the tasks.</typeparam>
      <param name="tasks">The tasks to order by completion.</param>
    </member>
    <member name="T:Nito.AsyncEx.TaskFactoryExtensions">
      <summary>
            Provides extension methods for task factories.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.TaskFactoryExtensions.Run(System.Threading.Tasks.TaskFactory,System.Action)">
      <summary>
            Queues work to the task factory and returns a <see cref="T:System.Threading.Tasks.Task" /> representing that work.
            </summary>
      <param name="this">The <see cref="T:System.Threading.Tasks.TaskFactory" />. May not be <c>null</c>.</param>
      <param name="action">The action delegate to execute. May not be <c>null</c>.</param>
      <returns>The started task.</returns>
    </member>
    <member name="M:Nito.AsyncEx.TaskFactoryExtensions.Run``1(System.Threading.Tasks.TaskFactory,System.Func{``0})">
      <summary>
            Queues work to the task factory and returns a <see cref="T:System.Threading.Tasks.Task`1" /> representing that work.
            </summary>
      <param name="this">The <see cref="T:System.Threading.Tasks.TaskFactory" />. May not be <c>null</c>.</param>
      <param name="action">The action delegate to execute. May not be <c>null</c>.</param>
      <returns>The started task.</returns>
    </member>
    <member name="M:Nito.AsyncEx.TaskFactoryExtensions.Run(System.Threading.Tasks.TaskFactory,System.Func{System.Threading.Tasks.Task})">
      <summary>
            Queues work to the task factory and returns a proxy <see cref="T:System.Threading.Tasks.Task" /> representing that work.
            </summary>
      <param name="this">The <see cref="T:System.Threading.Tasks.TaskFactory" />. May not be <c>null</c>.</param>
      <param name="action">The action delegate to execute. May not be <c>null</c>.</param>
      <returns>The started task.</returns>
    </member>
    <member name="M:Nito.AsyncEx.TaskFactoryExtensions.Run``1(System.Threading.Tasks.TaskFactory,System.Func{System.Threading.Tasks.Task{``0}})">
      <summary>
            Queues work to the task factory and returns a proxy <see cref="T:System.Threading.Tasks.Task`1" /> representing that work.
            </summary>
      <param name="this">The <see cref="T:System.Threading.Tasks.TaskFactory" />. May not be <c>null</c>.</param>
      <param name="action">The action delegate to execute. May not be <c>null</c>.</param>
      <returns>The started task.</returns>
    </member>
    <member name="T:Nito.AsyncEx.EnlightenmentVerification">
      <summary>
            Verifies platform enlightenment.
            </summary>
    </member>
    <member name="M:Nito.AsyncEx.EnlightenmentVerification.EnsureLoaded">
      <summary>
            Returns a value indicating whether the correct platform enlightenment provider has been loaded.
            </summary>
    </member>
  </members>
</doc>